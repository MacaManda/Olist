{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KTyWXrMx7Z2r",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "30b41730-690c-4e6e-a348-c54e0b3fc655"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting fuzzywuzzy\n",
            "  Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl.metadata (4.9 kB)\n",
            "Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 kB)\n",
            "Installing collected packages: fuzzywuzzy\n",
            "Successfully installed fuzzywuzzy-0.18.0\n",
            "Collecting unidecode\n",
            "  Downloading Unidecode-1.3.8-py3-none-any.whl.metadata (13 kB)\n",
            "Downloading Unidecode-1.3.8-py3-none-any.whl (235 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m235.5/235.5 kB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: unidecode\n",
            "Successfully installed unidecode-1.3.8\n"
          ]
        }
      ],
      "source": [
        "# #Habilitar en colab\n",
        "!pip install fuzzywuzzy\n",
        "!pip install unidecode"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QGhIu1dD7Z2w",
        "outputId": "610a83fb-80a5-44af-d842-04a639d35906"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/fuzzywuzzy/fuzz.py:11: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n",
            "  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')\n"
          ]
        }
      ],
      "source": [
        "# Manipulación y análisis de datos\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from collections import Counter\n",
        "\n",
        "# Visualización de datos\n",
        "import matplotlib.pyplot as plt\n",
        "import plotly.express as px\n",
        "import seaborn as sns\n",
        "import missingno as msno\n",
        "\n",
        "# Expresiones regulares\n",
        "import re\n",
        "from fuzzywuzzy import process\n",
        "from fuzzywuzzy import fuzz\n",
        "from scipy.stats import ttest_ind\n",
        "import unicodedata\n",
        "from unidecode import unidecode\n",
        "\n",
        "import random\n",
        "import os\n",
        "\n",
        "import ipywidgets as widgets\n",
        "# from ydata_profiling import ProfileReport\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yo9H5fav7Z2y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "94e2b3f5-5474-4d07-df00-e54096a08b20"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "# #Habilitar en colab\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6OXg8bYf7Z2z",
        "outputId": "151e9c0a-2dab-4215-b2f5-180145a43d2d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "olist_customers_dataset.csv\n",
            "olist_geolocation_dataset.csv\n",
            "olist_order_items_dataset.csv\n",
            "olist_order_payments_dataset.csv\n",
            "olist_order_reviews_dataset.csv\n",
            "olist_orders_dataset.csv\n",
            "olist_products_dataset.csv\n",
            "product_category_name_translation.csv\n",
            "olist_sellers_dataset.csv\n",
            "olist_limpio_dataset.csv\n",
            "df_olist_completo_dataset.csv\n",
            "df_olist_actualizado_dataset.csv\n",
            "df_nuevas_columnas.csv\n"
          ]
        }
      ],
      "source": [
        "path = '/content/drive/My Drive/proyecto final/'\n",
        "# path = (r\"C:\\Users\\Usuario\\Desktop\\ACADEMIA\\CURSO\\PROYECTO FINAL//\")\n",
        "\n",
        "ficheros = [file for file in os.listdir(path) if os.path.isfile(os.path.join(path, file))]\n",
        "\n",
        "dict_datos = {}\n",
        "\n",
        "for file in ficheros:\n",
        "    if file.endswith(('.csv')):\n",
        "        print(file)\n",
        "        if file.endswith('.csv'):\n",
        "            df = pd.read_csv(path + file)\n",
        "        dict_datos[file] = df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UeesRGDN7Z21",
        "outputId": "96807f04-adba-4d4c-82d0-7638e280ba40"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "df_customers\n",
            "df_geolocation\n",
            "df_order_items\n",
            "df_order_payments\n",
            "df_order_reviews\n",
            "df_orders\n",
            "df_products\n",
            "df_category_name\n",
            "df_sellers\n",
            "df_limpio\n",
            "df_olist_completo\n",
            "df_olist_actualizado\n",
            "df_nuevas\n"
          ]
        }
      ],
      "source": [
        "nuevo_dict = dict()\n",
        "for k,v in dict_datos.items():\n",
        "    k_2 = \"_\".join(list(k.split (\"_\"))[1:-1])\n",
        "    if len(str(k_2))<1: pass\n",
        "    else:\n",
        "        k_3= \"df_\" + k_2\n",
        "        print (k_3)\n",
        "        nuevo_dict[k_3] = v"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hfxTwGnx7Z21",
        "outputId": "1133f628-1c44-4f02-e6d7-0f9f1c422130"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['df_customers', 'df_geolocation', 'df_order_items', 'df_order_payments', 'df_order_reviews', 'df_orders', 'df_products', 'df_category_name', 'df_sellers', 'df_limpio', 'df_olist_completo', 'df_olist_actualizado', 'df_nuevas'])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "nuevo_dict.keys()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8W-zx1w37Z22"
      },
      "source": [
        "# Funciones"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MbMkcfeJ7Z24"
      },
      "source": [
        "## exploracion inicial\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "ZXW3GSkC7Z24"
      },
      "outputs": [],
      "source": [
        "def exploracion_inicial(df, tipo = None):\n",
        "    if tipo == 'version_lite':\n",
        "        print(\"¿Cuántas filas y columnas hay en el conjunto de datos?\")\n",
        "        num_filas, num_columnas = df.shape\n",
        "        print(\"\\tHay {:,} filas y {:,} columnas.\".format(num_filas, num_columnas))\n",
        "\n",
        "        print(\"¿Cuáles son las primeras dos filas del conjunto de datos?\")\n",
        "        display(df.head(2))\n",
        "        print('\\n########################################################################################')\n",
        "    else:\n",
        "        print(\"¿Cuántas filas y columnas hay en el conjunto de datos?\")\n",
        "        num_filas, num_columnas = df.shape\n",
        "        print(\"\\tHay {:,} filas y {:,} columnas.\".format(num_filas, num_columnas))\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Cuáles son las primeras cinco filas del conjunto de datos?\")\n",
        "        display(df.head())\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Cuáles son las últimas cinco filas del conjunto de datos?\")\n",
        "        display(df.tail())\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Cómo puedes obtener una muestra aleatoria de filas del conjunto de datos?\")\n",
        "        display(df.sample(n = 5))\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Cuántas filas duplicadas hay?\")\n",
        "        display(df.duplicated().sum())\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Cuáles son las columnas del conjunto de datos?\")\n",
        "        for i in list(df.columns):\n",
        "            print('\\t - ' + i)\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Cuál es el tipo de datos de cada columna?\")\n",
        "        print(df.dtypes)\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Cuántas columnas hay de cada tipo de datos?\")\n",
        "        print(df.dtypes.value_counts())\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Cómo podríamos obtener información más completa sobre la estructura y el contenido del DataFrame?\")\n",
        "        print(df.info())\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Cuántos valores únicos tiene cada columna?\")\n",
        "        print(df.nunique())\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Cuáles son las estadísticas descriptivas básicas de todas las columnas?\")\n",
        "        display(df.describe(include = 'all').fillna(''))\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Hay valores nulos en el conjunto de datos?\")\n",
        "        print(df.isnull().sum().sort_values(ascending = False))\n",
        "        print('\\n########################################################################################')\n",
        "\n",
        "        print(\"¿Cuál es el porcentaje de valores nulos en cada columna?\")\n",
        "        print(round((df.isnull().sum()/len(df)*100), 2).sort_values(ascending = False))\n",
        "        print('\\n########################################################################################')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GeJ_wN0-7Z25"
      },
      "source": [
        "## fecha procesada\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "G_QZ5bPP7Z25"
      },
      "outputs": [],
      "source": [
        "def fecha_procesada(df, variable_analisis):\n",
        "    # Verificamos si hay al menos un valor con hora en la columna\n",
        "    contiene_hora = df[variable_analisis].astype(str).str.contains(r'\\d{2}:\\d{2}:\\d{2}').any()\n",
        "\n",
        "    # Aplicamos el formato adecuado según el contenido\n",
        "    if contiene_hora:\n",
        "        df[variable_analisis + '_procesada'] = pd.to_datetime(df[variable_analisis], format='%Y-%m-%d %H:%M:%S', errors='coerce')\n",
        "    else:\n",
        "        df[variable_analisis + '_procesada'] = pd.to_datetime(df[variable_analisis], format='%Y-%m-%d', errors='coerce')\n",
        "\n",
        "    # Contar valores nulos después de la conversión\n",
        "    nulos = df[variable_analisis + '_procesada'].isnull().sum()\n",
        "    print(f\"Número de valores nulos en '{variable_analisis}_procesada': {nulos}\")\n",
        "\n",
        "    # Sustituimos la columna original y eliminamos la auxiliar\n",
        "    df[variable_analisis] = df[variable_analisis + '_procesada']\n",
        "    df.drop(columns=[variable_analisis + '_procesada'], inplace=True)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SHwX7f5l7Z25"
      },
      "source": [
        "## gráfico por ciudades"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "cOu3EnJt7Z26"
      },
      "outputs": [],
      "source": [
        "def plot_grouped_bars(df):\n",
        "    # Agrupar por ciudad y calcular las métricas\n",
        "    city_state_summary = df.groupby(['customer_city_procesada']).agg(\n",
        "        customer_count=('customer_unique_id', 'nunique'),\n",
        "        order_count=('order_id', 'nunique')\n",
        "    ).sort_values(by=['customer_count', 'order_count'], ascending=False).head(20)\n",
        "\n",
        "    # Restablecer índice para facilitar la visualización\n",
        "    city_state_summary.reset_index(inplace=True)\n",
        "\n",
        "    # Crear una nueva columna para identificar las métricas\n",
        "    city_state_summary = city_state_summary.melt(id_vars=['customer_city_procesada'],\n",
        "                                                 value_vars=['customer_count', 'order_count'],\n",
        "                                                 var_name='metric', value_name='value')\n",
        "\n",
        "    # Configurar la figura\n",
        "    plt.figure(figsize=(14, 8))\n",
        "\n",
        "    # Gráfico de barras agrupadas\n",
        "    sns.barplot(x='customer_city_procesada', y='value', hue='metric', data=city_state_summary, dodge=True)\n",
        "\n",
        "    # Personalizar la apariencia\n",
        "    plt.title('Top 20: Número de Clientes y Pedidos por Ciudad')\n",
        "    plt.xlabel('Ciudad')\n",
        "    plt.ylabel('Número')\n",
        "    plt.xticks(rotation=90)\n",
        "    plt.legend(title='Métricas')\n",
        "\n",
        "    # Ajuste del layout\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "Gtdmps2I7Z26"
      },
      "outputs": [],
      "source": [
        "def plot_total_payment_value(df):\n",
        "    # Agrupar por ciudad y estado y calcular la suma del valor total de pagos\n",
        "    city_state_summary = df.groupby(['customer_city_procesada']).agg(\n",
        "        total_payment_value=('payment_value', 'sum')\n",
        "    ).sort_values(by='total_payment_value', ascending=False).head(20)\n",
        "\n",
        "    # Restablecer índice para facilitar la visualización\n",
        "    city_state_summary.reset_index(inplace=True)\n",
        "\n",
        "    # Configurar la figura\n",
        "    plt.figure(figsize=(14, 8))\n",
        "\n",
        "    # Gráfico de barras para total_payment_value\n",
        "    sns.barplot(x='customer_city_procesada', y='total_payment_value', data=city_state_summary, color='green')\n",
        "\n",
        "    # Personalizar la apariencia\n",
        "    plt.title('Top 20: Valor Total de Pagos por Ciudad')\n",
        "    plt.xlabel('Ciudad')\n",
        "    plt.ylabel('Valor Total de Pagos')\n",
        "    plt.xticks(rotation=90)\n",
        "\n",
        "    # Ajuste del layout\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N8OYf7Bg7Z28"
      },
      "source": [
        "# Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "wFGDiexR7Z29"
      },
      "outputs": [],
      "source": [
        "df_olist_actualizado = nuevo_dict['df_olist_actualizado']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "TTEC0ex77Z29",
        "outputId": "644b93dc-a4f2-494a-f105-6eeb5963ebba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¿Cuántas filas y columnas hay en el conjunto de datos?\n",
            "\tHay 115,021 filas y 45 columnas.\n",
            "\n",
            "########################################################################################\n",
            "¿Cuáles son las primeras cinco filas del conjunto de datos?\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                           order_id                       customer_id  \\\n",
              "0  e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d   \n",
              "1  e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d   \n",
              "2  e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d   \n",
              "3  53cdb2fc8bc7dce0b6741e2150273451  b0830fb4747a6c6d20dea0b8c802d7ef   \n",
              "4  47770eb9100c2d0c44946d9cf07ec65d  41ce2a54c0b03bf3443c3d931a367089   \n",
              "\n",
              "  order_status order_purchase_timestamp    order_approved_at  \\\n",
              "0    delivered      2017-10-02 10:56:33  2017-10-02 11:07:15   \n",
              "1    delivered      2017-10-02 10:56:33  2017-10-02 11:07:15   \n",
              "2    delivered      2017-10-02 10:56:33  2017-10-02 11:07:15   \n",
              "3    delivered      2018-07-24 20:41:37  2018-07-26 03:24:27   \n",
              "4    delivered      2018-08-08 08:38:49  2018-08-08 08:55:23   \n",
              "\n",
              "  order_delivered_carrier_date order_delivered_customer_date  \\\n",
              "0          2017-10-04 19:55:00           2017-10-10 21:25:13   \n",
              "1          2017-10-04 19:55:00           2017-10-10 21:25:13   \n",
              "2          2017-10-04 19:55:00           2017-10-10 21:25:13   \n",
              "3          2018-07-26 14:31:00           2018-08-07 15:27:45   \n",
              "4          2018-08-08 13:50:00           2018-08-17 18:06:29   \n",
              "\n",
              "  order_estimated_delivery_date                customer_unique_id  \\\n",
              "0                    2017-10-18  7c396fd4830fd04220f754e42b4e5bff   \n",
              "1                    2017-10-18  7c396fd4830fd04220f754e42b4e5bff   \n",
              "2                    2017-10-18  7c396fd4830fd04220f754e42b4e5bff   \n",
              "3                    2018-08-13  af07308b275d755c9edb36a90c618231   \n",
              "4                    2018-09-04  3a653a41f6f9fc3d2a113cf8398680e8   \n",
              "\n",
              "   customer_zip_code_prefix  ... product_weight_g product_length_cm  \\\n",
              "0                      3149  ...            500.0              19.0   \n",
              "1                      3149  ...            500.0              19.0   \n",
              "2                      3149  ...            500.0              19.0   \n",
              "3                     47813  ...            400.0              19.0   \n",
              "4                     75265  ...            420.0              24.0   \n",
              "\n",
              "  product_height_cm  product_width_cm  seller_zip_code_prefix     seller_city  \\\n",
              "0               8.0              13.0                    9350            maua   \n",
              "1               8.0              13.0                    9350            maua   \n",
              "2               8.0              13.0                    9350            maua   \n",
              "3              13.0              19.0                   31570  belo horizonte   \n",
              "4              19.0              21.0                   14840         guariba   \n",
              "\n",
              "  seller_state seller_city_procesada seller_lat  seller_lng  \n",
              "0           SP                  maua -23.659614  -46.475785  \n",
              "1           SP                  maua -23.659614  -46.475785  \n",
              "2           SP                  maua -23.659614  -46.475785  \n",
              "3           SP        belo horizonte -19.946666  -44.032371  \n",
              "4           SP               guariba -21.396342  -48.245580  \n",
              "\n",
              "[5 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c330e19-30b8-4f35-ad2a-405f1f19068e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>...</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>seller_zip_code_prefix</th>\n",
              "      <th>seller_city</th>\n",
              "      <th>seller_state</th>\n",
              "      <th>seller_city_procesada</th>\n",
              "      <th>seller_lat</th>\n",
              "      <th>seller_lng</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>9ef432eb6251297304e76186b10a928d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18</td>\n",
              "      <td>7c396fd4830fd04220f754e42b4e5bff</td>\n",
              "      <td>3149</td>\n",
              "      <td>...</td>\n",
              "      <td>500.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>9350</td>\n",
              "      <td>maua</td>\n",
              "      <td>SP</td>\n",
              "      <td>maua</td>\n",
              "      <td>-23.659614</td>\n",
              "      <td>-46.475785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>9ef432eb6251297304e76186b10a928d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18</td>\n",
              "      <td>7c396fd4830fd04220f754e42b4e5bff</td>\n",
              "      <td>3149</td>\n",
              "      <td>...</td>\n",
              "      <td>500.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>9350</td>\n",
              "      <td>maua</td>\n",
              "      <td>SP</td>\n",
              "      <td>maua</td>\n",
              "      <td>-23.659614</td>\n",
              "      <td>-46.475785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>9ef432eb6251297304e76186b10a928d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18</td>\n",
              "      <td>7c396fd4830fd04220f754e42b4e5bff</td>\n",
              "      <td>3149</td>\n",
              "      <td>...</td>\n",
              "      <td>500.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>9350</td>\n",
              "      <td>maua</td>\n",
              "      <td>SP</td>\n",
              "      <td>maua</td>\n",
              "      <td>-23.659614</td>\n",
              "      <td>-46.475785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>53cdb2fc8bc7dce0b6741e2150273451</td>\n",
              "      <td>b0830fb4747a6c6d20dea0b8c802d7ef</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-07-24 20:41:37</td>\n",
              "      <td>2018-07-26 03:24:27</td>\n",
              "      <td>2018-07-26 14:31:00</td>\n",
              "      <td>2018-08-07 15:27:45</td>\n",
              "      <td>2018-08-13</td>\n",
              "      <td>af07308b275d755c9edb36a90c618231</td>\n",
              "      <td>47813</td>\n",
              "      <td>...</td>\n",
              "      <td>400.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>31570</td>\n",
              "      <td>belo horizonte</td>\n",
              "      <td>SP</td>\n",
              "      <td>belo horizonte</td>\n",
              "      <td>-19.946666</td>\n",
              "      <td>-44.032371</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>47770eb9100c2d0c44946d9cf07ec65d</td>\n",
              "      <td>41ce2a54c0b03bf3443c3d931a367089</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-08-08 08:38:49</td>\n",
              "      <td>2018-08-08 08:55:23</td>\n",
              "      <td>2018-08-08 13:50:00</td>\n",
              "      <td>2018-08-17 18:06:29</td>\n",
              "      <td>2018-09-04</td>\n",
              "      <td>3a653a41f6f9fc3d2a113cf8398680e8</td>\n",
              "      <td>75265</td>\n",
              "      <td>...</td>\n",
              "      <td>420.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>14840</td>\n",
              "      <td>guariba</td>\n",
              "      <td>SP</td>\n",
              "      <td>guariba</td>\n",
              "      <td>-21.396342</td>\n",
              "      <td>-48.245580</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 45 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c330e19-30b8-4f35-ad2a-405f1f19068e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2c330e19-30b8-4f35-ad2a-405f1f19068e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2c330e19-30b8-4f35-ad2a-405f1f19068e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bddb1d1b-ce38-4a1c-9965-a791a3aaa570\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bddb1d1b-ce38-4a1c-9965-a791a3aaa570')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bddb1d1b-ce38-4a1c-9965-a791a3aaa570 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################################################################\n",
            "¿Cuáles son las últimas cinco filas del conjunto de datos?\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                order_id                       customer_id  \\\n",
              "115016  63943bddc261676b46f01ca7ac2f7bd8  1fca14ff2861355f6e5f14306ff977a7   \n",
              "115017  83c1379a015df1e13d02aae0204711ab  1aa71eb042121263aafbe80c1b562c9c   \n",
              "115018  11c177c8e97725db2631073c19f07b62  b331b74b18dc79bcdf6532d51e1637c1   \n",
              "115019  11c177c8e97725db2631073c19f07b62  b331b74b18dc79bcdf6532d51e1637c1   \n",
              "115020  66dea50a8b16d9b4dee7af250b4be1a5  edb027a75a1449115f6b43211ae02a24   \n",
              "\n",
              "       order_status order_purchase_timestamp    order_approved_at  \\\n",
              "115016    delivered      2018-02-06 12:58:58  2018-02-06 13:10:37   \n",
              "115017    delivered      2017-08-27 14:46:43  2017-08-27 15:04:16   \n",
              "115018    delivered      2018-01-08 21:28:27  2018-01-08 21:36:21   \n",
              "115019    delivered      2018-01-08 21:28:27  2018-01-08 21:36:21   \n",
              "115020    delivered      2018-03-08 20:57:30  2018-03-09 11:20:28   \n",
              "\n",
              "       order_delivered_carrier_date order_delivered_customer_date  \\\n",
              "115016          2018-02-07 23:22:42           2018-02-28 17:37:56   \n",
              "115017          2017-08-28 20:52:26           2017-09-21 11:24:17   \n",
              "115018          2018-01-12 15:35:03           2018-01-25 23:32:54   \n",
              "115019          2018-01-12 15:35:03           2018-01-25 23:32:54   \n",
              "115020          2018-03-09 22:11:59           2018-03-16 13:08:30   \n",
              "\n",
              "       order_estimated_delivery_date                customer_unique_id  \\\n",
              "115016                    2018-03-02  da62f9e57a76d978d02ab5362c509660   \n",
              "115017                    2017-09-27  737520a9aad80b3fbbdad19b66b37b30   \n",
              "115018                    2018-02-15  5097a5312c8b157bb7be58ae360ef43c   \n",
              "115019                    2018-02-15  5097a5312c8b157bb7be58ae360ef43c   \n",
              "115020                    2018-04-03  60350aa974b26ff12caad89e55993bd6   \n",
              "\n",
              "        customer_zip_code_prefix  ... product_weight_g product_length_cm  \\\n",
              "115016                     11722  ...           4950.0              40.0   \n",
              "115017                     45920  ...          13300.0              32.0   \n",
              "115018                     28685  ...           6550.0              20.0   \n",
              "115019                     28685  ...           6550.0              20.0   \n",
              "115020                     83750  ...            150.0              16.0   \n",
              "\n",
              "       product_height_cm  product_width_cm  seller_zip_code_prefix  \\\n",
              "115016              10.0              40.0                   17602   \n",
              "115017              90.0              22.0                    8290   \n",
              "115018              20.0              20.0                   37175   \n",
              "115019              20.0              20.0                   37175   \n",
              "115020               7.0              15.0                   14407   \n",
              "\n",
              "        seller_city seller_state seller_city_procesada seller_lat  seller_lng  \n",
              "115016         tupa           SP                  tupa -21.947949  -50.528828  \n",
              "115017    sao paulo           SP             sao paulo -23.810859  -46.736919  \n",
              "115018     ilicinea           MG              ilicinea -20.938634  -45.832034  \n",
              "115019     ilicinea           MG              ilicinea -20.938634  -45.832034  \n",
              "115020       franca           SP                franca -20.545472  -47.429739  \n",
              "\n",
              "[5 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d364c67e-a3d2-4f19-9eeb-a71af9fcec00\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>...</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>seller_zip_code_prefix</th>\n",
              "      <th>seller_city</th>\n",
              "      <th>seller_state</th>\n",
              "      <th>seller_city_procesada</th>\n",
              "      <th>seller_lat</th>\n",
              "      <th>seller_lng</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>115016</th>\n",
              "      <td>63943bddc261676b46f01ca7ac2f7bd8</td>\n",
              "      <td>1fca14ff2861355f6e5f14306ff977a7</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-02-06 12:58:58</td>\n",
              "      <td>2018-02-06 13:10:37</td>\n",
              "      <td>2018-02-07 23:22:42</td>\n",
              "      <td>2018-02-28 17:37:56</td>\n",
              "      <td>2018-03-02</td>\n",
              "      <td>da62f9e57a76d978d02ab5362c509660</td>\n",
              "      <td>11722</td>\n",
              "      <td>...</td>\n",
              "      <td>4950.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>17602</td>\n",
              "      <td>tupa</td>\n",
              "      <td>SP</td>\n",
              "      <td>tupa</td>\n",
              "      <td>-21.947949</td>\n",
              "      <td>-50.528828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115017</th>\n",
              "      <td>83c1379a015df1e13d02aae0204711ab</td>\n",
              "      <td>1aa71eb042121263aafbe80c1b562c9c</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-08-27 14:46:43</td>\n",
              "      <td>2017-08-27 15:04:16</td>\n",
              "      <td>2017-08-28 20:52:26</td>\n",
              "      <td>2017-09-21 11:24:17</td>\n",
              "      <td>2017-09-27</td>\n",
              "      <td>737520a9aad80b3fbbdad19b66b37b30</td>\n",
              "      <td>45920</td>\n",
              "      <td>...</td>\n",
              "      <td>13300.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>8290</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115018</th>\n",
              "      <td>11c177c8e97725db2631073c19f07b62</td>\n",
              "      <td>b331b74b18dc79bcdf6532d51e1637c1</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-08 21:28:27</td>\n",
              "      <td>2018-01-08 21:36:21</td>\n",
              "      <td>2018-01-12 15:35:03</td>\n",
              "      <td>2018-01-25 23:32:54</td>\n",
              "      <td>2018-02-15</td>\n",
              "      <td>5097a5312c8b157bb7be58ae360ef43c</td>\n",
              "      <td>28685</td>\n",
              "      <td>...</td>\n",
              "      <td>6550.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>37175</td>\n",
              "      <td>ilicinea</td>\n",
              "      <td>MG</td>\n",
              "      <td>ilicinea</td>\n",
              "      <td>-20.938634</td>\n",
              "      <td>-45.832034</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115019</th>\n",
              "      <td>11c177c8e97725db2631073c19f07b62</td>\n",
              "      <td>b331b74b18dc79bcdf6532d51e1637c1</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-08 21:28:27</td>\n",
              "      <td>2018-01-08 21:36:21</td>\n",
              "      <td>2018-01-12 15:35:03</td>\n",
              "      <td>2018-01-25 23:32:54</td>\n",
              "      <td>2018-02-15</td>\n",
              "      <td>5097a5312c8b157bb7be58ae360ef43c</td>\n",
              "      <td>28685</td>\n",
              "      <td>...</td>\n",
              "      <td>6550.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>37175</td>\n",
              "      <td>ilicinea</td>\n",
              "      <td>MG</td>\n",
              "      <td>ilicinea</td>\n",
              "      <td>-20.938634</td>\n",
              "      <td>-45.832034</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115020</th>\n",
              "      <td>66dea50a8b16d9b4dee7af250b4be1a5</td>\n",
              "      <td>edb027a75a1449115f6b43211ae02a24</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-03-08 20:57:30</td>\n",
              "      <td>2018-03-09 11:20:28</td>\n",
              "      <td>2018-03-09 22:11:59</td>\n",
              "      <td>2018-03-16 13:08:30</td>\n",
              "      <td>2018-04-03</td>\n",
              "      <td>60350aa974b26ff12caad89e55993bd6</td>\n",
              "      <td>83750</td>\n",
              "      <td>...</td>\n",
              "      <td>150.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>14407</td>\n",
              "      <td>franca</td>\n",
              "      <td>SP</td>\n",
              "      <td>franca</td>\n",
              "      <td>-20.545472</td>\n",
              "      <td>-47.429739</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 45 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d364c67e-a3d2-4f19-9eeb-a71af9fcec00')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d364c67e-a3d2-4f19-9eeb-a71af9fcec00 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d364c67e-a3d2-4f19-9eeb-a71af9fcec00');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-542e8403-165f-4f5d-8eea-089f015625b8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-542e8403-165f-4f5d-8eea-089f015625b8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-542e8403-165f-4f5d-8eea-089f015625b8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################################################################\n",
            "¿Cómo puedes obtener una muestra aleatoria de filas del conjunto de datos?\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                order_id                       customer_id  \\\n",
              "1781    7d07b6c1321e0ae86b7d6205e015f0a1  2cdced5335b76d6e563bfa3a40bcf7a4   \n",
              "17927   b22a25c879419b2e54ca118ee3933dcc  ed9c2af7dc024cd1b8668296f64059e3   \n",
              "50926   e5db2271e5244dc30abdd52135b98586  fcf9e2332ddc4452bffdf1915601477b   \n",
              "100163  65ae980faa8eb2cfa02e439832516930  1ccab9e5dfccf17ad4eef7a08b8f71cd   \n",
              "52390   acd5c180c2d3c364bd63013b33063120  c6689d9dd7d6f04090f33764ed5e94b0   \n",
              "\n",
              "       order_status order_purchase_timestamp    order_approved_at  \\\n",
              "1781      delivered      2017-04-18 23:33:17  2017-04-20 02:55:40   \n",
              "17927     delivered      2018-01-15 17:24:34  2018-01-17 12:50:06   \n",
              "50926     delivered      2017-07-16 23:05:48  2017-07-16 23:23:32   \n",
              "100163    delivered      2017-12-10 16:49:17  2017-12-10 16:59:23   \n",
              "52390     delivered      2018-02-10 22:33:31  2018-02-10 23:48:21   \n",
              "\n",
              "       order_delivered_carrier_date order_delivered_customer_date  \\\n",
              "1781            2017-04-20 12:22:11           2017-04-27 05:57:48   \n",
              "17927           2018-01-18 16:29:40           2018-01-24 12:39:25   \n",
              "50926           2017-07-26 09:27:46           2017-07-26 18:53:48   \n",
              "100163          2017-12-14 14:33:11           2018-01-03 16:32:49   \n",
              "52390           2018-02-16 00:05:08           2018-02-23 22:47:09   \n",
              "\n",
              "       order_estimated_delivery_date                customer_unique_id  \\\n",
              "1781                      2017-05-10  3894c7d8e29573e308ebc285ecd61d39   \n",
              "17927                     2018-02-05  48a174140ed74945b5caeda85815e092   \n",
              "50926                     2017-07-28  9fbcfac9e9f34ac6288cf3f71d6f9cbf   \n",
              "100163                    2018-01-08  a23e613e253483c976dcc6567efdddcd   \n",
              "52390                     2018-03-20  abca13f1dcc9f523d15a31de14061ac8   \n",
              "\n",
              "        customer_zip_code_prefix  ... product_weight_g product_length_cm  \\\n",
              "1781                       84220  ...          16100.0              35.0   \n",
              "17927                      14735  ...            800.0              16.0   \n",
              "50926                      11088  ...            358.0              16.0   \n",
              "100163                     13453  ...           1750.0              35.0   \n",
              "52390                      27541  ...            550.0              16.0   \n",
              "\n",
              "       product_height_cm  product_width_cm  seller_zip_code_prefix  \\\n",
              "1781                65.0              44.0                   13450   \n",
              "17927               10.0              16.0                   14940   \n",
              "50926                6.0              17.0                   11010   \n",
              "100163              31.0              19.0                   22240   \n",
              "52390               16.0              11.0                   89560   \n",
              "\n",
              "                  seller_city seller_state seller_city_procesada seller_lat  \\\n",
              "1781    santa barbara d´oeste           SP       santa barbara d        NaN   \n",
              "17927                ibitinga           SP              ibitinga -21.775356   \n",
              "50926                  santos           SP                santos -23.989532   \n",
              "100163         rio de janeiro           RJ        rio de janeiro -23.010196   \n",
              "52390                 videira           SC               videira -27.006157   \n",
              "\n",
              "        seller_lng  \n",
              "1781           NaN  \n",
              "17927   -48.848928  \n",
              "50926   -46.320169  \n",
              "100163  -43.543493  \n",
              "52390   -51.189622  \n",
              "\n",
              "[5 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b1d3d392-288d-4ec5-bcb4-73169e2c000d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>...</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>seller_zip_code_prefix</th>\n",
              "      <th>seller_city</th>\n",
              "      <th>seller_state</th>\n",
              "      <th>seller_city_procesada</th>\n",
              "      <th>seller_lat</th>\n",
              "      <th>seller_lng</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1781</th>\n",
              "      <td>7d07b6c1321e0ae86b7d6205e015f0a1</td>\n",
              "      <td>2cdced5335b76d6e563bfa3a40bcf7a4</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-04-18 23:33:17</td>\n",
              "      <td>2017-04-20 02:55:40</td>\n",
              "      <td>2017-04-20 12:22:11</td>\n",
              "      <td>2017-04-27 05:57:48</td>\n",
              "      <td>2017-05-10</td>\n",
              "      <td>3894c7d8e29573e308ebc285ecd61d39</td>\n",
              "      <td>84220</td>\n",
              "      <td>...</td>\n",
              "      <td>16100.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>13450</td>\n",
              "      <td>santa barbara d´oeste</td>\n",
              "      <td>SP</td>\n",
              "      <td>santa barbara d</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17927</th>\n",
              "      <td>b22a25c879419b2e54ca118ee3933dcc</td>\n",
              "      <td>ed9c2af7dc024cd1b8668296f64059e3</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-15 17:24:34</td>\n",
              "      <td>2018-01-17 12:50:06</td>\n",
              "      <td>2018-01-18 16:29:40</td>\n",
              "      <td>2018-01-24 12:39:25</td>\n",
              "      <td>2018-02-05</td>\n",
              "      <td>48a174140ed74945b5caeda85815e092</td>\n",
              "      <td>14735</td>\n",
              "      <td>...</td>\n",
              "      <td>800.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>14940</td>\n",
              "      <td>ibitinga</td>\n",
              "      <td>SP</td>\n",
              "      <td>ibitinga</td>\n",
              "      <td>-21.775356</td>\n",
              "      <td>-48.848928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50926</th>\n",
              "      <td>e5db2271e5244dc30abdd52135b98586</td>\n",
              "      <td>fcf9e2332ddc4452bffdf1915601477b</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-07-16 23:05:48</td>\n",
              "      <td>2017-07-16 23:23:32</td>\n",
              "      <td>2017-07-26 09:27:46</td>\n",
              "      <td>2017-07-26 18:53:48</td>\n",
              "      <td>2017-07-28</td>\n",
              "      <td>9fbcfac9e9f34ac6288cf3f71d6f9cbf</td>\n",
              "      <td>11088</td>\n",
              "      <td>...</td>\n",
              "      <td>358.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>11010</td>\n",
              "      <td>santos</td>\n",
              "      <td>SP</td>\n",
              "      <td>santos</td>\n",
              "      <td>-23.989532</td>\n",
              "      <td>-46.320169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100163</th>\n",
              "      <td>65ae980faa8eb2cfa02e439832516930</td>\n",
              "      <td>1ccab9e5dfccf17ad4eef7a08b8f71cd</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-12-10 16:49:17</td>\n",
              "      <td>2017-12-10 16:59:23</td>\n",
              "      <td>2017-12-14 14:33:11</td>\n",
              "      <td>2018-01-03 16:32:49</td>\n",
              "      <td>2018-01-08</td>\n",
              "      <td>a23e613e253483c976dcc6567efdddcd</td>\n",
              "      <td>13453</td>\n",
              "      <td>...</td>\n",
              "      <td>1750.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>22240</td>\n",
              "      <td>rio de janeiro</td>\n",
              "      <td>RJ</td>\n",
              "      <td>rio de janeiro</td>\n",
              "      <td>-23.010196</td>\n",
              "      <td>-43.543493</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52390</th>\n",
              "      <td>acd5c180c2d3c364bd63013b33063120</td>\n",
              "      <td>c6689d9dd7d6f04090f33764ed5e94b0</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-02-10 22:33:31</td>\n",
              "      <td>2018-02-10 23:48:21</td>\n",
              "      <td>2018-02-16 00:05:08</td>\n",
              "      <td>2018-02-23 22:47:09</td>\n",
              "      <td>2018-03-20</td>\n",
              "      <td>abca13f1dcc9f523d15a31de14061ac8</td>\n",
              "      <td>27541</td>\n",
              "      <td>...</td>\n",
              "      <td>550.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>89560</td>\n",
              "      <td>videira</td>\n",
              "      <td>SC</td>\n",
              "      <td>videira</td>\n",
              "      <td>-27.006157</td>\n",
              "      <td>-51.189622</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 45 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1d3d392-288d-4ec5-bcb4-73169e2c000d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b1d3d392-288d-4ec5-bcb4-73169e2c000d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b1d3d392-288d-4ec5-bcb4-73169e2c000d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-284a57cf-7f20-4f0a-b274-eb9d41328e5b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-284a57cf-7f20-4f0a-b274-eb9d41328e5b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-284a57cf-7f20-4f0a-b274-eb9d41328e5b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################################################################\n",
            "¿Cuántas filas duplicadas hay?\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################################################################\n",
            "¿Cuáles son las columnas del conjunto de datos?\n",
            "\t - order_id\n",
            "\t - customer_id\n",
            "\t - order_status\n",
            "\t - order_purchase_timestamp\n",
            "\t - order_approved_at\n",
            "\t - order_delivered_carrier_date\n",
            "\t - order_delivered_customer_date\n",
            "\t - order_estimated_delivery_date\n",
            "\t - customer_unique_id\n",
            "\t - customer_zip_code_prefix\n",
            "\t - customer_city\n",
            "\t - customer_state\n",
            "\t - customer_city_procesada\n",
            "\t - customer_lat\n",
            "\t - customer_lng\n",
            "\t - order_item_id\n",
            "\t - product_id\n",
            "\t - seller_id\n",
            "\t - shipping_limit_date\n",
            "\t - price\n",
            "\t - freight_value\n",
            "\t - payment_sequential\n",
            "\t - payment_type\n",
            "\t - payment_installments\n",
            "\t - payment_value\n",
            "\t - review_id\n",
            "\t - review_score\n",
            "\t - review_comment_title\n",
            "\t - review_comment_message\n",
            "\t - review_creation_date\n",
            "\t - review_answer_timestamp\n",
            "\t - product_category_name\n",
            "\t - product_name_lenght\n",
            "\t - product_description_lenght\n",
            "\t - product_photos_qty\n",
            "\t - product_weight_g\n",
            "\t - product_length_cm\n",
            "\t - product_height_cm\n",
            "\t - product_width_cm\n",
            "\t - seller_zip_code_prefix\n",
            "\t - seller_city\n",
            "\t - seller_state\n",
            "\t - seller_city_procesada\n",
            "\t - seller_lat\n",
            "\t - seller_lng\n",
            "\n",
            "########################################################################################\n",
            "¿Cuál es el tipo de datos de cada columna?\n",
            "order_id                          object\n",
            "customer_id                       object\n",
            "order_status                      object\n",
            "order_purchase_timestamp          object\n",
            "order_approved_at                 object\n",
            "order_delivered_carrier_date      object\n",
            "order_delivered_customer_date     object\n",
            "order_estimated_delivery_date     object\n",
            "customer_unique_id                object\n",
            "customer_zip_code_prefix           int64\n",
            "customer_city                     object\n",
            "customer_state                    object\n",
            "customer_city_procesada           object\n",
            "customer_lat                     float64\n",
            "customer_lng                     float64\n",
            "order_item_id                      int64\n",
            "product_id                        object\n",
            "seller_id                         object\n",
            "shipping_limit_date               object\n",
            "price                            float64\n",
            "freight_value                    float64\n",
            "payment_sequential               float64\n",
            "payment_type                      object\n",
            "payment_installments             float64\n",
            "payment_value                    float64\n",
            "review_id                         object\n",
            "review_score                     float64\n",
            "review_comment_title              object\n",
            "review_comment_message            object\n",
            "review_creation_date              object\n",
            "review_answer_timestamp           object\n",
            "product_category_name             object\n",
            "product_name_lenght              float64\n",
            "product_description_lenght       float64\n",
            "product_photos_qty               float64\n",
            "product_weight_g                 float64\n",
            "product_length_cm                float64\n",
            "product_height_cm                float64\n",
            "product_width_cm                 float64\n",
            "seller_zip_code_prefix             int64\n",
            "seller_city                       object\n",
            "seller_state                      object\n",
            "seller_city_procesada             object\n",
            "seller_lat                       float64\n",
            "seller_lng                       float64\n",
            "dtype: object\n",
            "\n",
            "########################################################################################\n",
            "¿Cuántas columnas hay de cada tipo de datos?\n",
            "object     25\n",
            "float64    17\n",
            "int64       3\n",
            "Name: count, dtype: int64\n",
            "\n",
            "########################################################################################\n",
            "¿Cómo podríamos obtener información más completa sobre la estructura y el contenido del DataFrame?\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 115021 entries, 0 to 115020\n",
            "Data columns (total 45 columns):\n",
            " #   Column                         Non-Null Count   Dtype  \n",
            "---  ------                         --------------   -----  \n",
            " 0   order_id                       115021 non-null  object \n",
            " 1   customer_id                    115021 non-null  object \n",
            " 2   order_status                   115021 non-null  object \n",
            " 3   order_purchase_timestamp       115021 non-null  object \n",
            " 4   order_approved_at              115021 non-null  object \n",
            " 5   order_delivered_carrier_date   115021 non-null  object \n",
            " 6   order_delivered_customer_date  115021 non-null  object \n",
            " 7   order_estimated_delivery_date  115021 non-null  object \n",
            " 8   customer_unique_id             115021 non-null  object \n",
            " 9   customer_zip_code_prefix       115021 non-null  int64  \n",
            " 10  customer_city                  115021 non-null  object \n",
            " 11  customer_state                 115021 non-null  object \n",
            " 12  customer_city_procesada        115021 non-null  object \n",
            " 13  customer_lat                   114879 non-null  float64\n",
            " 14  customer_lng                   114879 non-null  float64\n",
            " 15  order_item_id                  115021 non-null  int64  \n",
            " 16  product_id                     115021 non-null  object \n",
            " 17  seller_id                      115021 non-null  object \n",
            " 18  shipping_limit_date            115021 non-null  object \n",
            " 19  price                          115021 non-null  float64\n",
            " 20  freight_value                  115021 non-null  float64\n",
            " 21  payment_sequential             115018 non-null  float64\n",
            " 22  payment_type                   115018 non-null  object \n",
            " 23  payment_installments           115018 non-null  float64\n",
            " 24  payment_value                  115018 non-null  float64\n",
            " 25  review_id                      114160 non-null  object \n",
            " 26  review_score                   114160 non-null  float64\n",
            " 27  review_comment_title           13561 non-null   object \n",
            " 28  review_comment_message         47828 non-null   object \n",
            " 29  review_creation_date           114160 non-null  object \n",
            " 30  review_answer_timestamp        114160 non-null  object \n",
            " 31  product_category_name          115021 non-null  object \n",
            " 32  product_name_lenght            113394 non-null  float64\n",
            " 33  product_description_lenght     113394 non-null  float64\n",
            " 34  product_photos_qty             113394 non-null  float64\n",
            " 35  product_weight_g               115001 non-null  float64\n",
            " 36  product_length_cm              115001 non-null  float64\n",
            " 37  product_height_cm              115001 non-null  float64\n",
            " 38  product_width_cm               115001 non-null  float64\n",
            " 39  seller_zip_code_prefix         115021 non-null  int64  \n",
            " 40  seller_city                    115021 non-null  object \n",
            " 41  seller_state                   115021 non-null  object \n",
            " 42  seller_city_procesada          115021 non-null  object \n",
            " 43  seller_lat                     114165 non-null  float64\n",
            " 44  seller_lng                     114165 non-null  float64\n",
            "dtypes: float64(17), int64(3), object(25)\n",
            "memory usage: 39.5+ MB\n",
            "None\n",
            "\n",
            "########################################################################################\n",
            "¿Cuántos valores únicos tiene cada columna?\n",
            "order_id                         96461\n",
            "customer_id                      96461\n",
            "order_status                         2\n",
            "order_purchase_timestamp         95939\n",
            "order_approved_at                88272\n",
            "order_delivered_carrier_date     80100\n",
            "order_delivered_customer_date    95649\n",
            "order_estimated_delivery_date      445\n",
            "customer_unique_id               93342\n",
            "customer_zip_code_prefix         14889\n",
            "customer_city                     4085\n",
            "customer_state                      27\n",
            "customer_city_procesada           4066\n",
            "customer_lat                      3995\n",
            "customer_lng                      3994\n",
            "order_item_id                       21\n",
            "product_id                       32210\n",
            "seller_id                         2970\n",
            "shipping_limit_date              91327\n",
            "price                             5859\n",
            "freight_value                     6924\n",
            "payment_sequential                  26\n",
            "payment_type                         4\n",
            "payment_installments                24\n",
            "payment_value                    28543\n",
            "review_id                        95340\n",
            "review_score                         5\n",
            "review_comment_title              4362\n",
            "review_comment_message           34340\n",
            "review_creation_date              1195\n",
            "review_answer_timestamp          95188\n",
            "product_category_name               74\n",
            "product_name_lenght                 65\n",
            "product_description_lenght        2944\n",
            "product_photos_qty                  19\n",
            "product_weight_g                  2171\n",
            "product_length_cm                   99\n",
            "product_height_cm                  102\n",
            "product_width_cm                    94\n",
            "seller_zip_code_prefix            2168\n",
            "seller_city                        595\n",
            "seller_state                        22\n",
            "seller_city_procesada              543\n",
            "seller_lat                         530\n",
            "seller_lng                         530\n",
            "dtype: int64\n",
            "\n",
            "########################################################################################\n",
            "¿Cuáles son las estadísticas descriptivas básicas de todas las columnas?\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                order_id                       customer_id  \\\n",
              "count                             115021                            115021   \n",
              "unique                             96461                             96461   \n",
              "top     895ab968e7bb0d5659d16cd74cd1650c  270c23a11d024a44c896d1894b261a83   \n",
              "freq                                  63                                63   \n",
              "mean                                                                         \n",
              "std                                                                          \n",
              "min                                                                          \n",
              "25%                                                                          \n",
              "50%                                                                          \n",
              "75%                                                                          \n",
              "max                                                                          \n",
              "\n",
              "       order_status order_purchase_timestamp    order_approved_at  \\\n",
              "count        115021                   115021               115021   \n",
              "unique            2                    95939                88272   \n",
              "top       delivered      2017-08-08 20:26:31  2017-08-08 20:43:31   \n",
              "freq         115014                       63                   63   \n",
              "mean                                                                \n",
              "std                                                                 \n",
              "min                                                                 \n",
              "25%                                                                 \n",
              "50%                                                                 \n",
              "75%                                                                 \n",
              "max                                                                 \n",
              "\n",
              "       order_delivered_carrier_date order_delivered_customer_date  \\\n",
              "count                        115021                        115021   \n",
              "unique                        80100                         95649   \n",
              "top             2017-08-10 11:58:14           2017-08-14 12:46:18   \n",
              "freq                             63                            63   \n",
              "mean                                                                \n",
              "std                                                                 \n",
              "min                                                                 \n",
              "25%                                                                 \n",
              "50%                                                                 \n",
              "75%                                                                 \n",
              "max                                                                 \n",
              "\n",
              "       order_estimated_delivery_date                customer_unique_id  \\\n",
              "count                         115021                            115021   \n",
              "unique                           445                             93342   \n",
              "top                       2017-12-20  9a736b248f67d166d2fbb006bcb877c3   \n",
              "freq                             640                                75   \n",
              "mean                                                                     \n",
              "std                                                                      \n",
              "min                                                                      \n",
              "25%                                                                      \n",
              "50%                                                                      \n",
              "75%                                                                      \n",
              "max                                                                      \n",
              "\n",
              "       customer_zip_code_prefix  ... product_weight_g product_length_cm  \\\n",
              "count                  115021.0  ...         115001.0          115001.0   \n",
              "unique                           ...                                      \n",
              "top                              ...                                      \n",
              "freq                             ...                                      \n",
              "mean               35081.074908  ...      2107.533639         30.230041   \n",
              "std                29851.321681  ...      3774.256317         16.128151   \n",
              "min                      1003.0  ...              0.0               7.0   \n",
              "25%                     11310.0  ...            300.0              18.0   \n",
              "50%                     24320.0  ...            700.0              25.0   \n",
              "75%                     58801.0  ...           1800.0              38.0   \n",
              "max                     99980.0  ...          40425.0             105.0   \n",
              "\n",
              "       product_height_cm product_width_cm seller_zip_code_prefix seller_city  \\\n",
              "count           115001.0         115001.0               115021.0      115021   \n",
              "unique                                                                   595   \n",
              "top                                                                sao paulo   \n",
              "freq                                                                   28511   \n",
              "mean           16.590882        23.058391           24453.845602               \n",
              "std            13.427247        11.731553           27586.944698               \n",
              "min                  2.0              6.0                 1001.0               \n",
              "25%                  8.0             15.0                 6429.0               \n",
              "50%                 13.0             20.0                13660.0               \n",
              "75%                 20.0             30.0                28035.0               \n",
              "max                105.0            118.0                99730.0               \n",
              "\n",
              "       seller_state seller_city_procesada seller_lat seller_lng  \n",
              "count        115021                115021   114165.0   114165.0  \n",
              "unique           22                   543                        \n",
              "top              SP             sao paulo                        \n",
              "freq          82044                 28912                        \n",
              "mean                                      -22.911995 -47.369956  \n",
              "std                                         2.738418   2.408851  \n",
              "min                                       -32.205312 -69.941997  \n",
              "25%                                       -23.810859 -48.848928  \n",
              "50%                                       -23.491895 -46.736919  \n",
              "75%                                       -21.775356  -46.62957  \n",
              "max                                        -2.508939 -34.834456  \n",
              "\n",
              "[11 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c6331bbf-0157-4d9c-b9ab-fcd74abe2290\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>...</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>seller_zip_code_prefix</th>\n",
              "      <th>seller_city</th>\n",
              "      <th>seller_state</th>\n",
              "      <th>seller_city_procesada</th>\n",
              "      <th>seller_lat</th>\n",
              "      <th>seller_lng</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021.0</td>\n",
              "      <td>...</td>\n",
              "      <td>115001.0</td>\n",
              "      <td>115001.0</td>\n",
              "      <td>115001.0</td>\n",
              "      <td>115001.0</td>\n",
              "      <td>115021.0</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>114165.0</td>\n",
              "      <td>114165.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>96461</td>\n",
              "      <td>96461</td>\n",
              "      <td>2</td>\n",
              "      <td>95939</td>\n",
              "      <td>88272</td>\n",
              "      <td>80100</td>\n",
              "      <td>95649</td>\n",
              "      <td>445</td>\n",
              "      <td>93342</td>\n",
              "      <td></td>\n",
              "      <td>...</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>595</td>\n",
              "      <td>22</td>\n",
              "      <td>543</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>895ab968e7bb0d5659d16cd74cd1650c</td>\n",
              "      <td>270c23a11d024a44c896d1894b261a83</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-08-08 20:26:31</td>\n",
              "      <td>2017-08-08 20:43:31</td>\n",
              "      <td>2017-08-10 11:58:14</td>\n",
              "      <td>2017-08-14 12:46:18</td>\n",
              "      <td>2017-12-20</td>\n",
              "      <td>9a736b248f67d166d2fbb006bcb877c3</td>\n",
              "      <td></td>\n",
              "      <td>...</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>63</td>\n",
              "      <td>63</td>\n",
              "      <td>115014</td>\n",
              "      <td>63</td>\n",
              "      <td>63</td>\n",
              "      <td>63</td>\n",
              "      <td>63</td>\n",
              "      <td>640</td>\n",
              "      <td>75</td>\n",
              "      <td></td>\n",
              "      <td>...</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>28511</td>\n",
              "      <td>82044</td>\n",
              "      <td>28912</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>35081.074908</td>\n",
              "      <td>...</td>\n",
              "      <td>2107.533639</td>\n",
              "      <td>30.230041</td>\n",
              "      <td>16.590882</td>\n",
              "      <td>23.058391</td>\n",
              "      <td>24453.845602</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>-22.911995</td>\n",
              "      <td>-47.369956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>29851.321681</td>\n",
              "      <td>...</td>\n",
              "      <td>3774.256317</td>\n",
              "      <td>16.128151</td>\n",
              "      <td>13.427247</td>\n",
              "      <td>11.731553</td>\n",
              "      <td>27586.944698</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>2.738418</td>\n",
              "      <td>2.408851</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>1003.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1001.0</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>-32.205312</td>\n",
              "      <td>-69.941997</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>11310.0</td>\n",
              "      <td>...</td>\n",
              "      <td>300.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>6429.0</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-48.848928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>24320.0</td>\n",
              "      <td>...</td>\n",
              "      <td>700.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>13660.0</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>-23.491895</td>\n",
              "      <td>-46.736919</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>58801.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1800.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>28035.0</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>-21.775356</td>\n",
              "      <td>-46.62957</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>99980.0</td>\n",
              "      <td>...</td>\n",
              "      <td>40425.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>118.0</td>\n",
              "      <td>99730.0</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>-2.508939</td>\n",
              "      <td>-34.834456</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>11 rows × 45 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6331bbf-0157-4d9c-b9ab-fcd74abe2290')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c6331bbf-0157-4d9c-b9ab-fcd74abe2290 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c6331bbf-0157-4d9c-b9ab-fcd74abe2290');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-44ad1f53-598f-4b9b-b43d-c479cc10cca1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-44ad1f53-598f-4b9b-b43d-c479cc10cca1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-44ad1f53-598f-4b9b-b43d-c479cc10cca1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################################################################\n",
            "¿Hay valores nulos en el conjunto de datos?\n",
            "review_comment_title             101460\n",
            "review_comment_message            67193\n",
            "product_name_lenght                1627\n",
            "product_photos_qty                 1627\n",
            "product_description_lenght         1627\n",
            "review_answer_timestamp             861\n",
            "review_id                           861\n",
            "review_score                        861\n",
            "review_creation_date                861\n",
            "seller_lng                          856\n",
            "seller_lat                          856\n",
            "customer_lat                        142\n",
            "customer_lng                        142\n",
            "product_weight_g                     20\n",
            "product_length_cm                    20\n",
            "product_height_cm                    20\n",
            "product_width_cm                     20\n",
            "payment_sequential                    3\n",
            "payment_value                         3\n",
            "payment_installments                  3\n",
            "payment_type                          3\n",
            "freight_value                         0\n",
            "customer_id                           0\n",
            "order_status                          0\n",
            "seller_city_procesada                 0\n",
            "seller_state                          0\n",
            "seller_city                           0\n",
            "seller_zip_code_prefix                0\n",
            "order_purchase_timestamp              0\n",
            "order_approved_at                     0\n",
            "order_delivered_carrier_date          0\n",
            "order_delivered_customer_date         0\n",
            "order_estimated_delivery_date         0\n",
            "customer_unique_id                    0\n",
            "customer_zip_code_prefix              0\n",
            "product_category_name                 0\n",
            "customer_city                         0\n",
            "customer_state                        0\n",
            "customer_city_procesada               0\n",
            "order_item_id                         0\n",
            "product_id                            0\n",
            "seller_id                             0\n",
            "shipping_limit_date                   0\n",
            "price                                 0\n",
            "order_id                              0\n",
            "dtype: int64\n",
            "\n",
            "########################################################################################\n",
            "¿Cuál es el porcentaje de valores nulos en cada columna?\n",
            "review_comment_title             88.21\n",
            "review_comment_message           58.42\n",
            "product_photos_qty                1.41\n",
            "product_description_lenght        1.41\n",
            "product_name_lenght               1.41\n",
            "review_score                      0.75\n",
            "review_creation_date              0.75\n",
            "review_answer_timestamp           0.75\n",
            "review_id                         0.75\n",
            "seller_lat                        0.74\n",
            "seller_lng                        0.74\n",
            "customer_lat                      0.12\n",
            "customer_lng                      0.12\n",
            "product_length_cm                 0.02\n",
            "product_weight_g                  0.02\n",
            "product_height_cm                 0.02\n",
            "product_width_cm                  0.02\n",
            "payment_value                     0.00\n",
            "product_category_name             0.00\n",
            "seller_zip_code_prefix            0.00\n",
            "seller_city                       0.00\n",
            "seller_state                      0.00\n",
            "seller_city_procesada             0.00\n",
            "order_id                          0.00\n",
            "payment_installments              0.00\n",
            "customer_city                     0.00\n",
            "order_status                      0.00\n",
            "order_purchase_timestamp          0.00\n",
            "order_approved_at                 0.00\n",
            "order_delivered_carrier_date      0.00\n",
            "order_delivered_customer_date     0.00\n",
            "order_estimated_delivery_date     0.00\n",
            "customer_unique_id                0.00\n",
            "customer_zip_code_prefix          0.00\n",
            "customer_state                    0.00\n",
            "customer_id                       0.00\n",
            "customer_city_procesada           0.00\n",
            "order_item_id                     0.00\n",
            "product_id                        0.00\n",
            "seller_id                         0.00\n",
            "shipping_limit_date               0.00\n",
            "price                             0.00\n",
            "freight_value                     0.00\n",
            "payment_sequential                0.00\n",
            "payment_type                      0.00\n",
            "dtype: float64\n",
            "\n",
            "########################################################################################\n"
          ]
        }
      ],
      "source": [
        "exploracion_inicial(df_olist_actualizado)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "pTY9o4H87Z29"
      },
      "outputs": [],
      "source": [
        "columnas_seleccionadas = [\n",
        "    \"order_id\", \"order_status\", \"order_purchase_timestamp\", \"order_approved_at\",\n",
        "    \"order_delivered_carrier_date\", \"order_delivered_customer_date\", \"order_estimated_delivery_date\",\n",
        "    \"customer_unique_id\", \"customer_state\", \"order_item_id\",\n",
        "    \"product_id\", \"seller_id\", \"shipping_limit_date\", \"price\", \"freight_value\",\n",
        "    \"payment_sequential\", \"payment_type\", \"payment_installments\", \"payment_value\",\n",
        "    \"review_score\", \"product_category_name\", \"seller_state\"]\n",
        "\n",
        "df= df_olist_actualizado[columnas_seleccionadas]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "g5lkWOqI7Z2-",
        "outputId": "fa2c9d90-edd6-4402-c419-f22aa1f06c2b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¿Cuántas filas y columnas hay en el conjunto de datos?\n",
            "\tHay 115,021 filas y 22 columnas.\n",
            "\n",
            "########################################################################################\n",
            "¿Cuáles son las primeras cinco filas del conjunto de datos?\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                           order_id order_status order_purchase_timestamp  \\\n",
              "0  e481f51cbdc54678b7cc49136f2d6af7    delivered      2017-10-02 10:56:33   \n",
              "1  e481f51cbdc54678b7cc49136f2d6af7    delivered      2017-10-02 10:56:33   \n",
              "2  e481f51cbdc54678b7cc49136f2d6af7    delivered      2017-10-02 10:56:33   \n",
              "3  53cdb2fc8bc7dce0b6741e2150273451    delivered      2018-07-24 20:41:37   \n",
              "4  47770eb9100c2d0c44946d9cf07ec65d    delivered      2018-08-08 08:38:49   \n",
              "\n",
              "     order_approved_at order_delivered_carrier_date  \\\n",
              "0  2017-10-02 11:07:15          2017-10-04 19:55:00   \n",
              "1  2017-10-02 11:07:15          2017-10-04 19:55:00   \n",
              "2  2017-10-02 11:07:15          2017-10-04 19:55:00   \n",
              "3  2018-07-26 03:24:27          2018-07-26 14:31:00   \n",
              "4  2018-08-08 08:55:23          2018-08-08 13:50:00   \n",
              "\n",
              "  order_delivered_customer_date order_estimated_delivery_date  \\\n",
              "0           2017-10-10 21:25:13                    2017-10-18   \n",
              "1           2017-10-10 21:25:13                    2017-10-18   \n",
              "2           2017-10-10 21:25:13                    2017-10-18   \n",
              "3           2018-08-07 15:27:45                    2018-08-13   \n",
              "4           2018-08-17 18:06:29                    2018-09-04   \n",
              "\n",
              "                 customer_unique_id customer_state  order_item_id  ...  \\\n",
              "0  7c396fd4830fd04220f754e42b4e5bff             SP              1  ...   \n",
              "1  7c396fd4830fd04220f754e42b4e5bff             SP              1  ...   \n",
              "2  7c396fd4830fd04220f754e42b4e5bff             SP              1  ...   \n",
              "3  af07308b275d755c9edb36a90c618231             BA              1  ...   \n",
              "4  3a653a41f6f9fc3d2a113cf8398680e8             GO              1  ...   \n",
              "\n",
              "   shipping_limit_date   price freight_value  payment_sequential  \\\n",
              "0  2017-10-06 11:07:15   29.99          8.72                 1.0   \n",
              "1  2017-10-06 11:07:15   29.99          8.72                 3.0   \n",
              "2  2017-10-06 11:07:15   29.99          8.72                 2.0   \n",
              "3  2018-07-30 03:24:27  118.70         22.76                 1.0   \n",
              "4  2018-08-13 08:55:23  159.90         19.22                 1.0   \n",
              "\n",
              "   payment_type  payment_installments payment_value  review_score  \\\n",
              "0   credit_card                   1.0         18.12           4.0   \n",
              "1       voucher                   1.0          2.00           4.0   \n",
              "2       voucher                   1.0         18.59           4.0   \n",
              "3        boleto                   1.0        141.46           4.0   \n",
              "4   credit_card                   3.0        179.12           5.0   \n",
              "\n",
              "   product_category_name  seller_state  \n",
              "0             housewares            SP  \n",
              "1             housewares            SP  \n",
              "2             housewares            SP  \n",
              "3              perfumery            SP  \n",
              "4                   auto            SP  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2276f8ce-7ea3-46cd-8e35-4c0440213204\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_state</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>...</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "      <th>review_score</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>seller_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18</td>\n",
              "      <td>7c396fd4830fd04220f754e42b4e5bff</td>\n",
              "      <td>SP</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-10-06 11:07:15</td>\n",
              "      <td>29.99</td>\n",
              "      <td>8.72</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1.0</td>\n",
              "      <td>18.12</td>\n",
              "      <td>4.0</td>\n",
              "      <td>housewares</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18</td>\n",
              "      <td>7c396fd4830fd04220f754e42b4e5bff</td>\n",
              "      <td>SP</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-10-06 11:07:15</td>\n",
              "      <td>29.99</td>\n",
              "      <td>8.72</td>\n",
              "      <td>3.0</td>\n",
              "      <td>voucher</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>4.0</td>\n",
              "      <td>housewares</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18</td>\n",
              "      <td>7c396fd4830fd04220f754e42b4e5bff</td>\n",
              "      <td>SP</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-10-06 11:07:15</td>\n",
              "      <td>29.99</td>\n",
              "      <td>8.72</td>\n",
              "      <td>2.0</td>\n",
              "      <td>voucher</td>\n",
              "      <td>1.0</td>\n",
              "      <td>18.59</td>\n",
              "      <td>4.0</td>\n",
              "      <td>housewares</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>53cdb2fc8bc7dce0b6741e2150273451</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-07-24 20:41:37</td>\n",
              "      <td>2018-07-26 03:24:27</td>\n",
              "      <td>2018-07-26 14:31:00</td>\n",
              "      <td>2018-08-07 15:27:45</td>\n",
              "      <td>2018-08-13</td>\n",
              "      <td>af07308b275d755c9edb36a90c618231</td>\n",
              "      <td>BA</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2018-07-30 03:24:27</td>\n",
              "      <td>118.70</td>\n",
              "      <td>22.76</td>\n",
              "      <td>1.0</td>\n",
              "      <td>boleto</td>\n",
              "      <td>1.0</td>\n",
              "      <td>141.46</td>\n",
              "      <td>4.0</td>\n",
              "      <td>perfumery</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>47770eb9100c2d0c44946d9cf07ec65d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-08-08 08:38:49</td>\n",
              "      <td>2018-08-08 08:55:23</td>\n",
              "      <td>2018-08-08 13:50:00</td>\n",
              "      <td>2018-08-17 18:06:29</td>\n",
              "      <td>2018-09-04</td>\n",
              "      <td>3a653a41f6f9fc3d2a113cf8398680e8</td>\n",
              "      <td>GO</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2018-08-13 08:55:23</td>\n",
              "      <td>159.90</td>\n",
              "      <td>19.22</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>3.0</td>\n",
              "      <td>179.12</td>\n",
              "      <td>5.0</td>\n",
              "      <td>auto</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2276f8ce-7ea3-46cd-8e35-4c0440213204')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2276f8ce-7ea3-46cd-8e35-4c0440213204 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2276f8ce-7ea3-46cd-8e35-4c0440213204');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-14043cd3-1ea0-4412-8fa2-b63fe3e4ea49\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-14043cd3-1ea0-4412-8fa2-b63fe3e4ea49')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-14043cd3-1ea0-4412-8fa2-b63fe3e4ea49 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################################################################\n",
            "¿Cuáles son las últimas cinco filas del conjunto de datos?\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                order_id order_status  \\\n",
              "115016  63943bddc261676b46f01ca7ac2f7bd8    delivered   \n",
              "115017  83c1379a015df1e13d02aae0204711ab    delivered   \n",
              "115018  11c177c8e97725db2631073c19f07b62    delivered   \n",
              "115019  11c177c8e97725db2631073c19f07b62    delivered   \n",
              "115020  66dea50a8b16d9b4dee7af250b4be1a5    delivered   \n",
              "\n",
              "       order_purchase_timestamp    order_approved_at  \\\n",
              "115016      2018-02-06 12:58:58  2018-02-06 13:10:37   \n",
              "115017      2017-08-27 14:46:43  2017-08-27 15:04:16   \n",
              "115018      2018-01-08 21:28:27  2018-01-08 21:36:21   \n",
              "115019      2018-01-08 21:28:27  2018-01-08 21:36:21   \n",
              "115020      2018-03-08 20:57:30  2018-03-09 11:20:28   \n",
              "\n",
              "       order_delivered_carrier_date order_delivered_customer_date  \\\n",
              "115016          2018-02-07 23:22:42           2018-02-28 17:37:56   \n",
              "115017          2017-08-28 20:52:26           2017-09-21 11:24:17   \n",
              "115018          2018-01-12 15:35:03           2018-01-25 23:32:54   \n",
              "115019          2018-01-12 15:35:03           2018-01-25 23:32:54   \n",
              "115020          2018-03-09 22:11:59           2018-03-16 13:08:30   \n",
              "\n",
              "       order_estimated_delivery_date                customer_unique_id  \\\n",
              "115016                    2018-03-02  da62f9e57a76d978d02ab5362c509660   \n",
              "115017                    2017-09-27  737520a9aad80b3fbbdad19b66b37b30   \n",
              "115018                    2018-02-15  5097a5312c8b157bb7be58ae360ef43c   \n",
              "115019                    2018-02-15  5097a5312c8b157bb7be58ae360ef43c   \n",
              "115020                    2018-04-03  60350aa974b26ff12caad89e55993bd6   \n",
              "\n",
              "       customer_state  order_item_id  ...  shipping_limit_date   price  \\\n",
              "115016             SP              1  ...  2018-02-12 13:10:37  174.90   \n",
              "115017             BA              1  ...  2017-09-05 15:04:16  205.99   \n",
              "115018             RJ              1  ...  2018-01-12 21:36:21  179.99   \n",
              "115019             RJ              2  ...  2018-01-12 21:36:21  179.99   \n",
              "115020             PR              1  ...  2018-03-15 10:55:42   68.50   \n",
              "\n",
              "       freight_value  payment_sequential  payment_type  payment_installments  \\\n",
              "115016         20.10                 1.0   credit_card                   3.0   \n",
              "115017         65.02                 1.0   credit_card                   5.0   \n",
              "115018         40.59                 1.0   credit_card                   4.0   \n",
              "115019         40.59                 1.0   credit_card                   4.0   \n",
              "115020         18.36                 1.0    debit_card                   1.0   \n",
              "\n",
              "       payment_value  review_score  product_category_name  seller_state  \n",
              "115016        195.00           4.0                   baby            SP  \n",
              "115017        271.01           5.0      home_appliances_2            SP  \n",
              "115018        441.16           2.0  computers_accessories            MG  \n",
              "115019        441.16           2.0  computers_accessories            MG  \n",
              "115020         86.86           5.0          health_beauty            SP  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4e4a1f5c-836c-49a2-80f1-744ab232e346\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_state</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>...</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "      <th>review_score</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>seller_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>115016</th>\n",
              "      <td>63943bddc261676b46f01ca7ac2f7bd8</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-02-06 12:58:58</td>\n",
              "      <td>2018-02-06 13:10:37</td>\n",
              "      <td>2018-02-07 23:22:42</td>\n",
              "      <td>2018-02-28 17:37:56</td>\n",
              "      <td>2018-03-02</td>\n",
              "      <td>da62f9e57a76d978d02ab5362c509660</td>\n",
              "      <td>SP</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2018-02-12 13:10:37</td>\n",
              "      <td>174.90</td>\n",
              "      <td>20.10</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>3.0</td>\n",
              "      <td>195.00</td>\n",
              "      <td>4.0</td>\n",
              "      <td>baby</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115017</th>\n",
              "      <td>83c1379a015df1e13d02aae0204711ab</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-08-27 14:46:43</td>\n",
              "      <td>2017-08-27 15:04:16</td>\n",
              "      <td>2017-08-28 20:52:26</td>\n",
              "      <td>2017-09-21 11:24:17</td>\n",
              "      <td>2017-09-27</td>\n",
              "      <td>737520a9aad80b3fbbdad19b66b37b30</td>\n",
              "      <td>BA</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-09-05 15:04:16</td>\n",
              "      <td>205.99</td>\n",
              "      <td>65.02</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>5.0</td>\n",
              "      <td>271.01</td>\n",
              "      <td>5.0</td>\n",
              "      <td>home_appliances_2</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115018</th>\n",
              "      <td>11c177c8e97725db2631073c19f07b62</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-08 21:28:27</td>\n",
              "      <td>2018-01-08 21:36:21</td>\n",
              "      <td>2018-01-12 15:35:03</td>\n",
              "      <td>2018-01-25 23:32:54</td>\n",
              "      <td>2018-02-15</td>\n",
              "      <td>5097a5312c8b157bb7be58ae360ef43c</td>\n",
              "      <td>RJ</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2018-01-12 21:36:21</td>\n",
              "      <td>179.99</td>\n",
              "      <td>40.59</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>4.0</td>\n",
              "      <td>441.16</td>\n",
              "      <td>2.0</td>\n",
              "      <td>computers_accessories</td>\n",
              "      <td>MG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115019</th>\n",
              "      <td>11c177c8e97725db2631073c19f07b62</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-01-08 21:28:27</td>\n",
              "      <td>2018-01-08 21:36:21</td>\n",
              "      <td>2018-01-12 15:35:03</td>\n",
              "      <td>2018-01-25 23:32:54</td>\n",
              "      <td>2018-02-15</td>\n",
              "      <td>5097a5312c8b157bb7be58ae360ef43c</td>\n",
              "      <td>RJ</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2018-01-12 21:36:21</td>\n",
              "      <td>179.99</td>\n",
              "      <td>40.59</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>4.0</td>\n",
              "      <td>441.16</td>\n",
              "      <td>2.0</td>\n",
              "      <td>computers_accessories</td>\n",
              "      <td>MG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115020</th>\n",
              "      <td>66dea50a8b16d9b4dee7af250b4be1a5</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-03-08 20:57:30</td>\n",
              "      <td>2018-03-09 11:20:28</td>\n",
              "      <td>2018-03-09 22:11:59</td>\n",
              "      <td>2018-03-16 13:08:30</td>\n",
              "      <td>2018-04-03</td>\n",
              "      <td>60350aa974b26ff12caad89e55993bd6</td>\n",
              "      <td>PR</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2018-03-15 10:55:42</td>\n",
              "      <td>68.50</td>\n",
              "      <td>18.36</td>\n",
              "      <td>1.0</td>\n",
              "      <td>debit_card</td>\n",
              "      <td>1.0</td>\n",
              "      <td>86.86</td>\n",
              "      <td>5.0</td>\n",
              "      <td>health_beauty</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4e4a1f5c-836c-49a2-80f1-744ab232e346')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4e4a1f5c-836c-49a2-80f1-744ab232e346 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4e4a1f5c-836c-49a2-80f1-744ab232e346');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fdd128fe-215e-49cc-ac38-e6cd75447563\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fdd128fe-215e-49cc-ac38-e6cd75447563')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fdd128fe-215e-49cc-ac38-e6cd75447563 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################################################################\n",
            "¿Cómo puedes obtener una muestra aleatoria de filas del conjunto de datos?\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                               order_id order_status order_purchase_timestamp  \\\n",
              "41259  7b097f892b3cba2de93590049d8875c0    delivered      2018-04-02 09:33:05   \n",
              "11092  77b062be7c5bd21712905feb8e1cfeed    delivered      2017-06-14 18:31:54   \n",
              "78505  294a10c9e4939e8c4f1974b73970ff96    delivered      2017-07-24 22:49:08   \n",
              "77887  a0965651e1058585af3d91274b10886e    delivered      2017-07-04 17:27:56   \n",
              "75478  f86672be5bf85864e88a08f231b43c2d    delivered      2018-07-19 09:56:25   \n",
              "\n",
              "         order_approved_at order_delivered_carrier_date  \\\n",
              "41259  2018-04-03 05:28:05          2018-04-04 22:34:27   \n",
              "11092  2017-06-15 18:43:04          2017-06-22 08:11:38   \n",
              "78505  2017-07-24 23:05:47          2017-07-26 18:49:47   \n",
              "77887  2017-07-05 17:36:08          2017-07-07 12:55:35   \n",
              "75478  2018-07-21 03:15:26          2018-07-23 11:17:00   \n",
              "\n",
              "      order_delivered_customer_date order_estimated_delivery_date  \\\n",
              "41259           2018-04-07 13:29:31                    2018-04-24   \n",
              "11092           2017-07-07 20:32:47                    2017-07-07   \n",
              "78505           2017-08-02 17:34:56                    2017-08-11   \n",
              "77887           2017-07-24 18:10:12                    2017-07-28   \n",
              "75478           2018-07-30 17:04:47                    2018-08-08   \n",
              "\n",
              "                     customer_unique_id customer_state  order_item_id  ...  \\\n",
              "41259  f9df0a394fdd97a23a8bc2f088c1c03e             SP              1  ...   \n",
              "11092  e079b18794454de9d2be5c12b4392294             RJ              2  ...   \n",
              "78505  7ef0e1ff584b39827ad160bf96de270a             SP              1  ...   \n",
              "77887  700442f1551f01d60b312117c983bd4a             MG              1  ...   \n",
              "75478  cc2f4b11c79236ea5c480e6d183f8017             GO              2  ...   \n",
              "\n",
              "       shipping_limit_date   price freight_value  payment_sequential  \\\n",
              "41259  2018-04-09 05:28:05   72.00         13.62                 1.0   \n",
              "11092  2017-06-21 18:43:04   44.99         16.14                 1.0   \n",
              "78505  2017-07-30 23:05:47  174.80         14.24                 1.0   \n",
              "77887  2017-07-13 17:15:28  205.00         22.27                 1.0   \n",
              "75478  2018-07-26 03:15:26  179.00         45.89                 1.0   \n",
              "\n",
              "       payment_type  payment_installments payment_value  review_score  \\\n",
              "41259        boleto                   1.0         85.62           5.0   \n",
              "11092   credit_card                   8.0        134.25           5.0   \n",
              "78505   credit_card                   5.0        189.04           5.0   \n",
              "77887   credit_card                  10.0        227.27           3.0   \n",
              "75478        boleto                   1.0        352.63           5.0   \n",
              "\n",
              "       product_category_name  seller_state  \n",
              "41259  computers_accessories            PR  \n",
              "11092         bed_bath_table            SP  \n",
              "78505           garden_tools            SP  \n",
              "77887         bed_bath_table            SP  \n",
              "75478         bed_bath_table            SP  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-001f266d-482a-4e82-9443-4c39e6cf91fd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_state</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>...</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "      <th>review_score</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>seller_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>41259</th>\n",
              "      <td>7b097f892b3cba2de93590049d8875c0</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-04-02 09:33:05</td>\n",
              "      <td>2018-04-03 05:28:05</td>\n",
              "      <td>2018-04-04 22:34:27</td>\n",
              "      <td>2018-04-07 13:29:31</td>\n",
              "      <td>2018-04-24</td>\n",
              "      <td>f9df0a394fdd97a23a8bc2f088c1c03e</td>\n",
              "      <td>SP</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2018-04-09 05:28:05</td>\n",
              "      <td>72.00</td>\n",
              "      <td>13.62</td>\n",
              "      <td>1.0</td>\n",
              "      <td>boleto</td>\n",
              "      <td>1.0</td>\n",
              "      <td>85.62</td>\n",
              "      <td>5.0</td>\n",
              "      <td>computers_accessories</td>\n",
              "      <td>PR</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11092</th>\n",
              "      <td>77b062be7c5bd21712905feb8e1cfeed</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-06-14 18:31:54</td>\n",
              "      <td>2017-06-15 18:43:04</td>\n",
              "      <td>2017-06-22 08:11:38</td>\n",
              "      <td>2017-07-07 20:32:47</td>\n",
              "      <td>2017-07-07</td>\n",
              "      <td>e079b18794454de9d2be5c12b4392294</td>\n",
              "      <td>RJ</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-06-21 18:43:04</td>\n",
              "      <td>44.99</td>\n",
              "      <td>16.14</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>8.0</td>\n",
              "      <td>134.25</td>\n",
              "      <td>5.0</td>\n",
              "      <td>bed_bath_table</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78505</th>\n",
              "      <td>294a10c9e4939e8c4f1974b73970ff96</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-07-24 22:49:08</td>\n",
              "      <td>2017-07-24 23:05:47</td>\n",
              "      <td>2017-07-26 18:49:47</td>\n",
              "      <td>2017-08-02 17:34:56</td>\n",
              "      <td>2017-08-11</td>\n",
              "      <td>7ef0e1ff584b39827ad160bf96de270a</td>\n",
              "      <td>SP</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-07-30 23:05:47</td>\n",
              "      <td>174.80</td>\n",
              "      <td>14.24</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>5.0</td>\n",
              "      <td>189.04</td>\n",
              "      <td>5.0</td>\n",
              "      <td>garden_tools</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77887</th>\n",
              "      <td>a0965651e1058585af3d91274b10886e</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-07-04 17:27:56</td>\n",
              "      <td>2017-07-05 17:36:08</td>\n",
              "      <td>2017-07-07 12:55:35</td>\n",
              "      <td>2017-07-24 18:10:12</td>\n",
              "      <td>2017-07-28</td>\n",
              "      <td>700442f1551f01d60b312117c983bd4a</td>\n",
              "      <td>MG</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-07-13 17:15:28</td>\n",
              "      <td>205.00</td>\n",
              "      <td>22.27</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>10.0</td>\n",
              "      <td>227.27</td>\n",
              "      <td>3.0</td>\n",
              "      <td>bed_bath_table</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75478</th>\n",
              "      <td>f86672be5bf85864e88a08f231b43c2d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-07-19 09:56:25</td>\n",
              "      <td>2018-07-21 03:15:26</td>\n",
              "      <td>2018-07-23 11:17:00</td>\n",
              "      <td>2018-07-30 17:04:47</td>\n",
              "      <td>2018-08-08</td>\n",
              "      <td>cc2f4b11c79236ea5c480e6d183f8017</td>\n",
              "      <td>GO</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2018-07-26 03:15:26</td>\n",
              "      <td>179.00</td>\n",
              "      <td>45.89</td>\n",
              "      <td>1.0</td>\n",
              "      <td>boleto</td>\n",
              "      <td>1.0</td>\n",
              "      <td>352.63</td>\n",
              "      <td>5.0</td>\n",
              "      <td>bed_bath_table</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-001f266d-482a-4e82-9443-4c39e6cf91fd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-001f266d-482a-4e82-9443-4c39e6cf91fd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-001f266d-482a-4e82-9443-4c39e6cf91fd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-073a88be-02f8-4248-a4e0-c15d197ea9b1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-073a88be-02f8-4248-a4e0-c15d197ea9b1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-073a88be-02f8-4248-a4e0-c15d197ea9b1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################################################################\n",
            "¿Cuántas filas duplicadas hay?\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################################################################\n",
            "¿Cuáles son las columnas del conjunto de datos?\n",
            "\t - order_id\n",
            "\t - order_status\n",
            "\t - order_purchase_timestamp\n",
            "\t - order_approved_at\n",
            "\t - order_delivered_carrier_date\n",
            "\t - order_delivered_customer_date\n",
            "\t - order_estimated_delivery_date\n",
            "\t - customer_unique_id\n",
            "\t - customer_state\n",
            "\t - order_item_id\n",
            "\t - product_id\n",
            "\t - seller_id\n",
            "\t - shipping_limit_date\n",
            "\t - price\n",
            "\t - freight_value\n",
            "\t - payment_sequential\n",
            "\t - payment_type\n",
            "\t - payment_installments\n",
            "\t - payment_value\n",
            "\t - review_score\n",
            "\t - product_category_name\n",
            "\t - seller_state\n",
            "\n",
            "########################################################################################\n",
            "¿Cuál es el tipo de datos de cada columna?\n",
            "order_id                          object\n",
            "order_status                      object\n",
            "order_purchase_timestamp          object\n",
            "order_approved_at                 object\n",
            "order_delivered_carrier_date      object\n",
            "order_delivered_customer_date     object\n",
            "order_estimated_delivery_date     object\n",
            "customer_unique_id                object\n",
            "customer_state                    object\n",
            "order_item_id                      int64\n",
            "product_id                        object\n",
            "seller_id                         object\n",
            "shipping_limit_date               object\n",
            "price                            float64\n",
            "freight_value                    float64\n",
            "payment_sequential               float64\n",
            "payment_type                      object\n",
            "payment_installments             float64\n",
            "payment_value                    float64\n",
            "review_score                     float64\n",
            "product_category_name             object\n",
            "seller_state                      object\n",
            "dtype: object\n",
            "\n",
            "########################################################################################\n",
            "¿Cuántas columnas hay de cada tipo de datos?\n",
            "object     15\n",
            "float64     6\n",
            "int64       1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "########################################################################################\n",
            "¿Cómo podríamos obtener información más completa sobre la estructura y el contenido del DataFrame?\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 115021 entries, 0 to 115020\n",
            "Data columns (total 22 columns):\n",
            " #   Column                         Non-Null Count   Dtype  \n",
            "---  ------                         --------------   -----  \n",
            " 0   order_id                       115021 non-null  object \n",
            " 1   order_status                   115021 non-null  object \n",
            " 2   order_purchase_timestamp       115021 non-null  object \n",
            " 3   order_approved_at              115021 non-null  object \n",
            " 4   order_delivered_carrier_date   115021 non-null  object \n",
            " 5   order_delivered_customer_date  115021 non-null  object \n",
            " 6   order_estimated_delivery_date  115021 non-null  object \n",
            " 7   customer_unique_id             115021 non-null  object \n",
            " 8   customer_state                 115021 non-null  object \n",
            " 9   order_item_id                  115021 non-null  int64  \n",
            " 10  product_id                     115021 non-null  object \n",
            " 11  seller_id                      115021 non-null  object \n",
            " 12  shipping_limit_date            115021 non-null  object \n",
            " 13  price                          115021 non-null  float64\n",
            " 14  freight_value                  115021 non-null  float64\n",
            " 15  payment_sequential             115018 non-null  float64\n",
            " 16  payment_type                   115018 non-null  object \n",
            " 17  payment_installments           115018 non-null  float64\n",
            " 18  payment_value                  115018 non-null  float64\n",
            " 19  review_score                   114160 non-null  float64\n",
            " 20  product_category_name          115021 non-null  object \n",
            " 21  seller_state                   115021 non-null  object \n",
            "dtypes: float64(6), int64(1), object(15)\n",
            "memory usage: 19.3+ MB\n",
            "None\n",
            "\n",
            "########################################################################################\n",
            "¿Cuántos valores únicos tiene cada columna?\n",
            "order_id                         96461\n",
            "order_status                         2\n",
            "order_purchase_timestamp         95939\n",
            "order_approved_at                88272\n",
            "order_delivered_carrier_date     80100\n",
            "order_delivered_customer_date    95649\n",
            "order_estimated_delivery_date      445\n",
            "customer_unique_id               93342\n",
            "customer_state                      27\n",
            "order_item_id                       21\n",
            "product_id                       32210\n",
            "seller_id                         2970\n",
            "shipping_limit_date              91327\n",
            "price                             5859\n",
            "freight_value                     6924\n",
            "payment_sequential                  26\n",
            "payment_type                         4\n",
            "payment_installments                24\n",
            "payment_value                    28543\n",
            "review_score                         5\n",
            "product_category_name               74\n",
            "seller_state                        22\n",
            "dtype: int64\n",
            "\n",
            "########################################################################################\n",
            "¿Cuáles son las estadísticas descriptivas básicas de todas las columnas?\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                order_id order_status  \\\n",
              "count                             115021       115021   \n",
              "unique                             96461            2   \n",
              "top     895ab968e7bb0d5659d16cd74cd1650c    delivered   \n",
              "freq                                  63       115014   \n",
              "mean                                                    \n",
              "std                                                     \n",
              "min                                                     \n",
              "25%                                                     \n",
              "50%                                                     \n",
              "75%                                                     \n",
              "max                                                     \n",
              "\n",
              "       order_purchase_timestamp    order_approved_at  \\\n",
              "count                    115021               115021   \n",
              "unique                    95939                88272   \n",
              "top         2017-08-08 20:26:31  2017-08-08 20:43:31   \n",
              "freq                         63                   63   \n",
              "mean                                                   \n",
              "std                                                    \n",
              "min                                                    \n",
              "25%                                                    \n",
              "50%                                                    \n",
              "75%                                                    \n",
              "max                                                    \n",
              "\n",
              "       order_delivered_carrier_date order_delivered_customer_date  \\\n",
              "count                        115021                        115021   \n",
              "unique                        80100                         95649   \n",
              "top             2017-08-10 11:58:14           2017-08-14 12:46:18   \n",
              "freq                             63                            63   \n",
              "mean                                                                \n",
              "std                                                                 \n",
              "min                                                                 \n",
              "25%                                                                 \n",
              "50%                                                                 \n",
              "75%                                                                 \n",
              "max                                                                 \n",
              "\n",
              "       order_estimated_delivery_date                customer_unique_id  \\\n",
              "count                         115021                            115021   \n",
              "unique                           445                             93342   \n",
              "top                       2017-12-20  9a736b248f67d166d2fbb006bcb877c3   \n",
              "freq                             640                                75   \n",
              "mean                                                                     \n",
              "std                                                                      \n",
              "min                                                                      \n",
              "25%                                                                      \n",
              "50%                                                                      \n",
              "75%                                                                      \n",
              "max                                                                      \n",
              "\n",
              "       customer_state order_item_id  ...  shipping_limit_date       price  \\\n",
              "count          115021      115021.0  ...               115021    115021.0   \n",
              "unique             27                ...                91327               \n",
              "top                SP                ...  2017-08-14 20:43:31               \n",
              "freq            48514                ...                   63               \n",
              "mean                       1.196425  ...                       120.078171   \n",
              "std                        0.699425  ...                       183.036937   \n",
              "min                             1.0  ...                             0.85   \n",
              "25%                             1.0  ...                             39.9   \n",
              "50%                             1.0  ...                             74.9   \n",
              "75%                             1.0  ...                            133.0   \n",
              "max                            21.0  ...                           6735.0   \n",
              "\n",
              "       freight_value payment_sequential payment_type payment_installments  \\\n",
              "count       115021.0           115018.0       115018             115018.0   \n",
              "unique                                             4                        \n",
              "top                                      credit_card                        \n",
              "freq                                           84895                        \n",
              "mean       19.995239           1.090699                          2.936958   \n",
              "std         15.74441           0.684409                          2.772466   \n",
              "min              0.0                1.0                               0.0   \n",
              "25%            13.08                1.0                               1.0   \n",
              "50%            16.28                1.0                               2.0   \n",
              "75%            21.18                1.0                               4.0   \n",
              "max           409.68               26.0                              24.0   \n",
              "\n",
              "       payment_value review_score product_category_name seller_state  \n",
              "count       115018.0     114160.0                115021       115021  \n",
              "unique                                               74           22  \n",
              "top                                      bed_bath_table           SP  \n",
              "freq                                              11649        82044  \n",
              "mean      171.915654     4.080869                                     \n",
              "std        266.12573     1.347073                                     \n",
              "min              0.0          1.0                                     \n",
              "25%            60.85          4.0                                     \n",
              "50%           108.19          5.0                                     \n",
              "75%           188.94          5.0                                     \n",
              "max         13664.08          5.0                                     \n",
              "\n",
              "[11 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b813d43e-d99d-4c3c-8a4e-433dd614e3ef\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_state</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>...</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "      <th>review_score</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>seller_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021.0</td>\n",
              "      <td>...</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021.0</td>\n",
              "      <td>115021.0</td>\n",
              "      <td>115018.0</td>\n",
              "      <td>115018</td>\n",
              "      <td>115018.0</td>\n",
              "      <td>115018.0</td>\n",
              "      <td>114160.0</td>\n",
              "      <td>115021</td>\n",
              "      <td>115021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>96461</td>\n",
              "      <td>2</td>\n",
              "      <td>95939</td>\n",
              "      <td>88272</td>\n",
              "      <td>80100</td>\n",
              "      <td>95649</td>\n",
              "      <td>445</td>\n",
              "      <td>93342</td>\n",
              "      <td>27</td>\n",
              "      <td></td>\n",
              "      <td>...</td>\n",
              "      <td>91327</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>4</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>74</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>895ab968e7bb0d5659d16cd74cd1650c</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-08-08 20:26:31</td>\n",
              "      <td>2017-08-08 20:43:31</td>\n",
              "      <td>2017-08-10 11:58:14</td>\n",
              "      <td>2017-08-14 12:46:18</td>\n",
              "      <td>2017-12-20</td>\n",
              "      <td>9a736b248f67d166d2fbb006bcb877c3</td>\n",
              "      <td>SP</td>\n",
              "      <td></td>\n",
              "      <td>...</td>\n",
              "      <td>2017-08-14 20:43:31</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>credit_card</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>bed_bath_table</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>63</td>\n",
              "      <td>115014</td>\n",
              "      <td>63</td>\n",
              "      <td>63</td>\n",
              "      <td>63</td>\n",
              "      <td>63</td>\n",
              "      <td>640</td>\n",
              "      <td>75</td>\n",
              "      <td>48514</td>\n",
              "      <td></td>\n",
              "      <td>...</td>\n",
              "      <td>63</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>84895</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>11649</td>\n",
              "      <td>82044</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>1.196425</td>\n",
              "      <td>...</td>\n",
              "      <td></td>\n",
              "      <td>120.078171</td>\n",
              "      <td>19.995239</td>\n",
              "      <td>1.090699</td>\n",
              "      <td></td>\n",
              "      <td>2.936958</td>\n",
              "      <td>171.915654</td>\n",
              "      <td>4.080869</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>0.699425</td>\n",
              "      <td>...</td>\n",
              "      <td></td>\n",
              "      <td>183.036937</td>\n",
              "      <td>15.74441</td>\n",
              "      <td>0.684409</td>\n",
              "      <td></td>\n",
              "      <td>2.772466</td>\n",
              "      <td>266.12573</td>\n",
              "      <td>1.347073</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td></td>\n",
              "      <td>0.85</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td></td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td></td>\n",
              "      <td>39.9</td>\n",
              "      <td>13.08</td>\n",
              "      <td>1.0</td>\n",
              "      <td></td>\n",
              "      <td>1.0</td>\n",
              "      <td>60.85</td>\n",
              "      <td>4.0</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td></td>\n",
              "      <td>74.9</td>\n",
              "      <td>16.28</td>\n",
              "      <td>1.0</td>\n",
              "      <td></td>\n",
              "      <td>2.0</td>\n",
              "      <td>108.19</td>\n",
              "      <td>5.0</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td></td>\n",
              "      <td>133.0</td>\n",
              "      <td>21.18</td>\n",
              "      <td>1.0</td>\n",
              "      <td></td>\n",
              "      <td>4.0</td>\n",
              "      <td>188.94</td>\n",
              "      <td>5.0</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>21.0</td>\n",
              "      <td>...</td>\n",
              "      <td></td>\n",
              "      <td>6735.0</td>\n",
              "      <td>409.68</td>\n",
              "      <td>26.0</td>\n",
              "      <td></td>\n",
              "      <td>24.0</td>\n",
              "      <td>13664.08</td>\n",
              "      <td>5.0</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>11 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b813d43e-d99d-4c3c-8a4e-433dd614e3ef')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b813d43e-d99d-4c3c-8a4e-433dd614e3ef button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b813d43e-d99d-4c3c-8a4e-433dd614e3ef');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-981b3202-adeb-4c2a-8957-346e898404ba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-981b3202-adeb-4c2a-8957-346e898404ba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-981b3202-adeb-4c2a-8957-346e898404ba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################################################################\n",
            "¿Hay valores nulos en el conjunto de datos?\n",
            "review_score                     861\n",
            "payment_value                      3\n",
            "payment_installments               3\n",
            "payment_type                       3\n",
            "payment_sequential                 3\n",
            "order_id                           0\n",
            "order_status                       0\n",
            "product_category_name              0\n",
            "freight_value                      0\n",
            "price                              0\n",
            "shipping_limit_date                0\n",
            "seller_id                          0\n",
            "product_id                         0\n",
            "order_item_id                      0\n",
            "customer_state                     0\n",
            "customer_unique_id                 0\n",
            "order_estimated_delivery_date      0\n",
            "order_delivered_customer_date      0\n",
            "order_delivered_carrier_date       0\n",
            "order_approved_at                  0\n",
            "order_purchase_timestamp           0\n",
            "seller_state                       0\n",
            "dtype: int64\n",
            "\n",
            "########################################################################################\n",
            "¿Cuál es el porcentaje de valores nulos en cada columna?\n",
            "review_score                     0.75\n",
            "order_id                         0.00\n",
            "order_status                     0.00\n",
            "product_category_name            0.00\n",
            "payment_value                    0.00\n",
            "payment_installments             0.00\n",
            "payment_type                     0.00\n",
            "payment_sequential               0.00\n",
            "freight_value                    0.00\n",
            "price                            0.00\n",
            "shipping_limit_date              0.00\n",
            "seller_id                        0.00\n",
            "product_id                       0.00\n",
            "order_item_id                    0.00\n",
            "customer_state                   0.00\n",
            "customer_unique_id               0.00\n",
            "order_estimated_delivery_date    0.00\n",
            "order_delivered_customer_date    0.00\n",
            "order_delivered_carrier_date     0.00\n",
            "order_approved_at                0.00\n",
            "order_purchase_timestamp         0.00\n",
            "seller_state                     0.00\n",
            "dtype: float64\n",
            "\n",
            "########################################################################################\n"
          ]
        }
      ],
      "source": [
        "exploracion_inicial(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hi9dBsdGFmw9",
        "outputId": "280ee1c3-eded-4c4e-b723-ea6445989d92"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Las columnas que no voy a usar son {23} :\n",
            " {'customer_city', 'product_description_lenght', 'product_height_cm', 'seller_lng', 'seller_zip_code_prefix', 'customer_lng', 'customer_zip_code_prefix', 'product_length_cm', 'customer_lat', 'product_name_lenght', 'seller_lat', 'product_photos_qty', 'seller_city', 'review_comment_message', 'review_answer_timestamp', 'review_creation_date', 'customer_city_procesada', 'product_weight_g', 'seller_city_procesada', 'product_width_cm', 'customer_id', 'review_comment_title', 'review_id'}\n"
          ]
        }
      ],
      "source": [
        "print('Las columnas que no voy a usar son' , {len(set(df_olist_actualizado.columns) - set(df.columns))} ,':\\n',set(df_olist_actualizado.columns) - set(df.columns))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4_AeLOjm7Z2-",
        "outputId": "0f92c3af-a154-40b6-8377-ed4a86a7f17a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(115021, 45)\n",
            "(115021, 22)\n",
            "0\n"
          ]
        }
      ],
      "source": [
        "print(df_olist_actualizado.shape)  # Total de filas antes\n",
        "print(df.shape)  # Total de filas después\n",
        "print(df.duplicated().sum())  # Cuántas filas duplicadas hay en df\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 99
        },
        "id": "DAGV0FM67Z2-",
        "outputId": "9162f341-a0c1-4b4f-9a77-9a95f5c05caf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [order_id, order_status, order_purchase_timestamp, order_approved_at, order_delivered_carrier_date, order_delivered_customer_date, order_estimated_delivery_date, customer_unique_id, customer_state, order_item_id, product_id, seller_id, shipping_limit_date, price, freight_value, payment_sequential, payment_type, payment_installments, payment_value, review_score, product_category_name, seller_state]\n",
              "Index: []\n",
              "\n",
              "[0 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9c0a32ce-b1ec-419a-8b90-fd946930cf86\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_state</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>...</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "      <th>review_score</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>seller_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>0 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9c0a32ce-b1ec-419a-8b90-fd946930cf86')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9c0a32ce-b1ec-419a-8b90-fd946930cf86 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9c0a32ce-b1ec-419a-8b90-fd946930cf86');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "df[df.duplicated()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 264
        },
        "id": "S5Az2RVF7Z2-",
        "outputId": "c88d053e-d85f-4fbd-ad10-fa10e0b0d13b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                             order_id                       customer_id order_status order_purchase_timestamp    order_approved_at order_delivered_carrier_date order_delivered_customer_date order_estimated_delivery_date                customer_unique_id  customer_zip_code_prefix customer_city customer_state customer_city_procesada  customer_lat  customer_lng  order_item_id                        product_id                         seller_id  shipping_limit_date  price  freight_value  payment_sequential payment_type  payment_installments  payment_value                         review_id  review_score review_comment_title review_comment_message review_creation_date review_answer_timestamp product_category_name  product_name_lenght  product_description_lenght  product_photos_qty  product_weight_g  product_length_cm  product_height_cm  product_width_cm  seller_zip_code_prefix seller_city seller_state seller_city_procesada  seller_lat  seller_lng\n",
              "775  acbe07f22f29ad7e5a78f30008cc6ec7  b4afeb58ac51bc903c5362286c6a5cfe    delivered      2017-11-18 14:33:04  2017-11-18 19:06:16          2017-11-27 18:34:31           2017-11-29 17:58:43                    2017-12-05  6457b2cb5462c1217e8e6d36b0ff39d2                      5842     sao paulo             SP               sao paulo    -23.810859    -46.736919              1  c0e452663c284f3f8e578f390dc3ab21  65a7c0788e4d632ccb5e1b594b87f0bb  2017-11-27 19:06:16   19.3          11.73                 1.0  credit_card                   2.0         124.12  ea1fbd19c48a016b08c92aa1daf658de           5.0                  NaN                    NaN           2017-11-30     2017-12-01 10:27:29                drinks                 38.0                       790.0                 1.0            1300.0               25.0               25.0              25.0                    5782   sao paulo           SP             sao paulo  -23.810859  -46.736919\n",
              "776  acbe07f22f29ad7e5a78f30008cc6ec7  b4afeb58ac51bc903c5362286c6a5cfe    delivered      2017-11-18 14:33:04  2017-11-18 19:06:16          2017-11-27 18:34:31           2017-11-29 17:58:43                    2017-12-05  6457b2cb5462c1217e8e6d36b0ff39d2                      5842     sao paulo             SP               sao paulo    -23.810859    -46.736919              2  c0a0b5aa4507363e601eb90082c9c008  65a7c0788e4d632ccb5e1b594b87f0bb  2017-11-27 19:06:16   19.3          11.73                 1.0  credit_card                   2.0         124.12  ea1fbd19c48a016b08c92aa1daf658de           5.0                  NaN                    NaN           2017-11-30     2017-12-01 10:27:29                drinks                 31.0                       895.0                 1.0            1700.0               25.0               25.0              25.0                    5782   sao paulo           SP             sao paulo  -23.810859  -46.736919\n",
              "777  acbe07f22f29ad7e5a78f30008cc6ec7  b4afeb58ac51bc903c5362286c6a5cfe    delivered      2017-11-18 14:33:04  2017-11-18 19:06:16          2017-11-27 18:34:31           2017-11-29 17:58:43                    2017-12-05  6457b2cb5462c1217e8e6d36b0ff39d2                      5842     sao paulo             SP               sao paulo    -23.810859    -46.736919              3  262855d4dd5b0d39f786a3c86c285c6a  65a7c0788e4d632ccb5e1b594b87f0bb  2017-11-27 19:06:16   19.3          11.73                 1.0  credit_card                   2.0         124.12  ea1fbd19c48a016b08c92aa1daf658de           5.0                  NaN                    NaN           2017-11-30     2017-12-01 10:27:29                drinks                 28.0                       808.0                 1.0            1700.0               25.0               25.0              25.0                    5782   sao paulo           SP             sao paulo  -23.810859  -46.736919\n",
              "778  acbe07f22f29ad7e5a78f30008cc6ec7  b4afeb58ac51bc903c5362286c6a5cfe    delivered      2017-11-18 14:33:04  2017-11-18 19:06:16          2017-11-27 18:34:31           2017-11-29 17:58:43                    2017-12-05  6457b2cb5462c1217e8e6d36b0ff39d2                      5842     sao paulo             SP               sao paulo    -23.810859    -46.736919              4  7d873ae7ba4e637167c1a8d544bd6af8  65a7c0788e4d632ccb5e1b594b87f0bb  2017-11-27 19:06:16   19.3          11.73                 1.0  credit_card                   2.0         124.12  ea1fbd19c48a016b08c92aa1daf658de           5.0                  NaN                    NaN           2017-11-30     2017-12-01 10:27:29                drinks                 26.0                       742.0                 1.0            1700.0               25.0               25.0              25.0                    5782   sao paulo           SP             sao paulo  -23.810859  -46.736919"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3cbbe175-111b-42b5-9dee-2e802a87cd95\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>customer_city</th>\n",
              "      <th>customer_state</th>\n",
              "      <th>customer_city_procesada</th>\n",
              "      <th>customer_lat</th>\n",
              "      <th>customer_lng</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>product_id</th>\n",
              "      <th>seller_id</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "      <th>review_id</th>\n",
              "      <th>review_score</th>\n",
              "      <th>review_comment_title</th>\n",
              "      <th>review_comment_message</th>\n",
              "      <th>review_creation_date</th>\n",
              "      <th>review_answer_timestamp</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>product_name_lenght</th>\n",
              "      <th>product_description_lenght</th>\n",
              "      <th>product_photos_qty</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>seller_zip_code_prefix</th>\n",
              "      <th>seller_city</th>\n",
              "      <th>seller_state</th>\n",
              "      <th>seller_city_procesada</th>\n",
              "      <th>seller_lat</th>\n",
              "      <th>seller_lng</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>775</th>\n",
              "      <td>acbe07f22f29ad7e5a78f30008cc6ec7</td>\n",
              "      <td>b4afeb58ac51bc903c5362286c6a5cfe</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-11-18 14:33:04</td>\n",
              "      <td>2017-11-18 19:06:16</td>\n",
              "      <td>2017-11-27 18:34:31</td>\n",
              "      <td>2017-11-29 17:58:43</td>\n",
              "      <td>2017-12-05</td>\n",
              "      <td>6457b2cb5462c1217e8e6d36b0ff39d2</td>\n",
              "      <td>5842</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "      <td>1</td>\n",
              "      <td>c0e452663c284f3f8e578f390dc3ab21</td>\n",
              "      <td>65a7c0788e4d632ccb5e1b594b87f0bb</td>\n",
              "      <td>2017-11-27 19:06:16</td>\n",
              "      <td>19.3</td>\n",
              "      <td>11.73</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>2.0</td>\n",
              "      <td>124.12</td>\n",
              "      <td>ea1fbd19c48a016b08c92aa1daf658de</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-11-30</td>\n",
              "      <td>2017-12-01 10:27:29</td>\n",
              "      <td>drinks</td>\n",
              "      <td>38.0</td>\n",
              "      <td>790.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1300.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>5782</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>776</th>\n",
              "      <td>acbe07f22f29ad7e5a78f30008cc6ec7</td>\n",
              "      <td>b4afeb58ac51bc903c5362286c6a5cfe</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-11-18 14:33:04</td>\n",
              "      <td>2017-11-18 19:06:16</td>\n",
              "      <td>2017-11-27 18:34:31</td>\n",
              "      <td>2017-11-29 17:58:43</td>\n",
              "      <td>2017-12-05</td>\n",
              "      <td>6457b2cb5462c1217e8e6d36b0ff39d2</td>\n",
              "      <td>5842</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "      <td>2</td>\n",
              "      <td>c0a0b5aa4507363e601eb90082c9c008</td>\n",
              "      <td>65a7c0788e4d632ccb5e1b594b87f0bb</td>\n",
              "      <td>2017-11-27 19:06:16</td>\n",
              "      <td>19.3</td>\n",
              "      <td>11.73</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>2.0</td>\n",
              "      <td>124.12</td>\n",
              "      <td>ea1fbd19c48a016b08c92aa1daf658de</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-11-30</td>\n",
              "      <td>2017-12-01 10:27:29</td>\n",
              "      <td>drinks</td>\n",
              "      <td>31.0</td>\n",
              "      <td>895.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1700.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>5782</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>777</th>\n",
              "      <td>acbe07f22f29ad7e5a78f30008cc6ec7</td>\n",
              "      <td>b4afeb58ac51bc903c5362286c6a5cfe</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-11-18 14:33:04</td>\n",
              "      <td>2017-11-18 19:06:16</td>\n",
              "      <td>2017-11-27 18:34:31</td>\n",
              "      <td>2017-11-29 17:58:43</td>\n",
              "      <td>2017-12-05</td>\n",
              "      <td>6457b2cb5462c1217e8e6d36b0ff39d2</td>\n",
              "      <td>5842</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "      <td>3</td>\n",
              "      <td>262855d4dd5b0d39f786a3c86c285c6a</td>\n",
              "      <td>65a7c0788e4d632ccb5e1b594b87f0bb</td>\n",
              "      <td>2017-11-27 19:06:16</td>\n",
              "      <td>19.3</td>\n",
              "      <td>11.73</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>2.0</td>\n",
              "      <td>124.12</td>\n",
              "      <td>ea1fbd19c48a016b08c92aa1daf658de</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-11-30</td>\n",
              "      <td>2017-12-01 10:27:29</td>\n",
              "      <td>drinks</td>\n",
              "      <td>28.0</td>\n",
              "      <td>808.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1700.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>5782</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>778</th>\n",
              "      <td>acbe07f22f29ad7e5a78f30008cc6ec7</td>\n",
              "      <td>b4afeb58ac51bc903c5362286c6a5cfe</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-11-18 14:33:04</td>\n",
              "      <td>2017-11-18 19:06:16</td>\n",
              "      <td>2017-11-27 18:34:31</td>\n",
              "      <td>2017-11-29 17:58:43</td>\n",
              "      <td>2017-12-05</td>\n",
              "      <td>6457b2cb5462c1217e8e6d36b0ff39d2</td>\n",
              "      <td>5842</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "      <td>4</td>\n",
              "      <td>7d873ae7ba4e637167c1a8d544bd6af8</td>\n",
              "      <td>65a7c0788e4d632ccb5e1b594b87f0bb</td>\n",
              "      <td>2017-11-27 19:06:16</td>\n",
              "      <td>19.3</td>\n",
              "      <td>11.73</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>2.0</td>\n",
              "      <td>124.12</td>\n",
              "      <td>ea1fbd19c48a016b08c92aa1daf658de</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-11-30</td>\n",
              "      <td>2017-12-01 10:27:29</td>\n",
              "      <td>drinks</td>\n",
              "      <td>26.0</td>\n",
              "      <td>742.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1700.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>5782</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3cbbe175-111b-42b5-9dee-2e802a87cd95')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3cbbe175-111b-42b5-9dee-2e802a87cd95 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3cbbe175-111b-42b5-9dee-2e802a87cd95');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8dbb5366-ccd0-4ec7-a076-25dbdd736d10\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8dbb5366-ccd0-4ec7-a076-25dbdd736d10')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8dbb5366-ccd0-4ec7-a076-25dbdd736d10 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "pd.set_option('display.max_columns', None)  # Muestra todas las columnas\n",
        "pd.set_option('display.width', 1000)  # Ajusta el ancho para evitar cortes\n",
        "\n",
        "df_olist_actualizado[df_olist_actualizado['order_id'] == 'acbe07f22f29ad7e5a78f30008cc6ec7']\n",
        "# Hay más de una review por pedido, por lo que en df_olist_actualizado se duplican los pedidos, pero no los detecta como duplicados. Lo elimino de la tabla original"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "TYupsloy7Z2_"
      },
      "outputs": [],
      "source": [
        "df_limpio = nuevo_dict['df_olist_actualizado']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "JIonbHW-hoPz",
        "outputId": "308ad985-8b73-42f0-ace4-b6565db9e096",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           order_id                       customer_id order_status order_purchase_timestamp    order_approved_at order_delivered_carrier_date order_delivered_customer_date order_estimated_delivery_date                customer_unique_id  customer_zip_code_prefix customer_city customer_state customer_city_procesada  customer_lat  customer_lng  order_item_id                        product_id                         seller_id  shipping_limit_date   price  freight_value  payment_sequential payment_type  payment_installments  payment_value                         review_id  review_score review_comment_title                             review_comment_message review_creation_date review_answer_timestamp product_category_name  product_name_lenght  product_description_lenght  product_photos_qty  product_weight_g  product_length_cm  product_height_cm  product_width_cm  seller_zip_code_prefix     seller_city seller_state seller_city_procesada  seller_lat  seller_lng\n",
              "0  e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d    delivered      2017-10-02 10:56:33  2017-10-02 11:07:15          2017-10-04 19:55:00           2017-10-10 21:25:13                    2017-10-18  7c396fd4830fd04220f754e42b4e5bff                      3149     sao paulo             SP               sao paulo    -23.810859    -46.736919              1  87285b34884572647811a353c7ac498a  3504c0cb71d7fa48d967e0e4c94d59d9  2017-10-06 11:07:15   29.99           8.72                 1.0  credit_card                   1.0          18.12  a54f0611adc9ed256b57ede6b6eb5114           4.0                  NaN  Não testei o produto ainda, mas ele veio corre...           2017-10-11     2017-10-12 03:43:48            housewares                 40.0                       268.0                 4.0             500.0               19.0                8.0              13.0                    9350            maua           SP                  maua  -23.659614  -46.475785\n",
              "1  e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d    delivered      2017-10-02 10:56:33  2017-10-02 11:07:15          2017-10-04 19:55:00           2017-10-10 21:25:13                    2017-10-18  7c396fd4830fd04220f754e42b4e5bff                      3149     sao paulo             SP               sao paulo    -23.810859    -46.736919              1  87285b34884572647811a353c7ac498a  3504c0cb71d7fa48d967e0e4c94d59d9  2017-10-06 11:07:15   29.99           8.72                 3.0      voucher                   1.0           2.00  a54f0611adc9ed256b57ede6b6eb5114           4.0                  NaN  Não testei o produto ainda, mas ele veio corre...           2017-10-11     2017-10-12 03:43:48            housewares                 40.0                       268.0                 4.0             500.0               19.0                8.0              13.0                    9350            maua           SP                  maua  -23.659614  -46.475785\n",
              "2  e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d    delivered      2017-10-02 10:56:33  2017-10-02 11:07:15          2017-10-04 19:55:00           2017-10-10 21:25:13                    2017-10-18  7c396fd4830fd04220f754e42b4e5bff                      3149     sao paulo             SP               sao paulo    -23.810859    -46.736919              1  87285b34884572647811a353c7ac498a  3504c0cb71d7fa48d967e0e4c94d59d9  2017-10-06 11:07:15   29.99           8.72                 2.0      voucher                   1.0          18.59  a54f0611adc9ed256b57ede6b6eb5114           4.0                  NaN  Não testei o produto ainda, mas ele veio corre...           2017-10-11     2017-10-12 03:43:48            housewares                 40.0                       268.0                 4.0             500.0               19.0                8.0              13.0                    9350            maua           SP                  maua  -23.659614  -46.475785\n",
              "3  53cdb2fc8bc7dce0b6741e2150273451  b0830fb4747a6c6d20dea0b8c802d7ef    delivered      2018-07-24 20:41:37  2018-07-26 03:24:27          2018-07-26 14:31:00           2018-08-07 15:27:45                    2018-08-13  af07308b275d755c9edb36a90c618231                     47813     barreiras             BA               barreiras    -12.150239    -45.008793              1  595fac2a385ac33a80bd5114aec74eb8  289cdb325fb7e7f891c38608bf9e0962  2018-07-30 03:24:27  118.70          22.76                 1.0       boleto                   1.0         141.46  8d5266042046a06655c8db133d120ba5           4.0     Muito boa a loja                               Muito bom o produto.           2018-08-08     2018-08-08 18:37:50             perfumery                 29.0                       178.0                 1.0             400.0               19.0               13.0              19.0                   31570  belo horizonte           SP        belo horizonte  -19.946666  -44.032371\n",
              "4  47770eb9100c2d0c44946d9cf07ec65d  41ce2a54c0b03bf3443c3d931a367089    delivered      2018-08-08 08:38:49  2018-08-08 08:55:23          2018-08-08 13:50:00           2018-08-17 18:06:29                    2018-09-04  3a653a41f6f9fc3d2a113cf8398680e8                     75265    vianopolis             GO              vianopolis    -16.746337    -48.518861              1  aa4383b373c6aca5d8797843e5594415  4869f7a5dfa277a7dca6462dcf3b52b2  2018-08-13 08:55:23  159.90          19.22                 1.0  credit_card                   3.0         179.12  e73b67b67587f7644d5bd1a52deb1b01           5.0                  NaN                                                NaN           2018-08-18     2018-08-22 19:07:58                  auto                 46.0                       232.0                 1.0             420.0               24.0               19.0              21.0                   14840         guariba           SP               guariba  -21.396342  -48.245580"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5b0d2d04-9cad-4e83-9928-b58f9a8b99a1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>customer_city</th>\n",
              "      <th>customer_state</th>\n",
              "      <th>customer_city_procesada</th>\n",
              "      <th>customer_lat</th>\n",
              "      <th>customer_lng</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>product_id</th>\n",
              "      <th>seller_id</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "      <th>review_id</th>\n",
              "      <th>review_score</th>\n",
              "      <th>review_comment_title</th>\n",
              "      <th>review_comment_message</th>\n",
              "      <th>review_creation_date</th>\n",
              "      <th>review_answer_timestamp</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>product_name_lenght</th>\n",
              "      <th>product_description_lenght</th>\n",
              "      <th>product_photos_qty</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>seller_zip_code_prefix</th>\n",
              "      <th>seller_city</th>\n",
              "      <th>seller_state</th>\n",
              "      <th>seller_city_procesada</th>\n",
              "      <th>seller_lat</th>\n",
              "      <th>seller_lng</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>9ef432eb6251297304e76186b10a928d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18</td>\n",
              "      <td>7c396fd4830fd04220f754e42b4e5bff</td>\n",
              "      <td>3149</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "      <td>1</td>\n",
              "      <td>87285b34884572647811a353c7ac498a</td>\n",
              "      <td>3504c0cb71d7fa48d967e0e4c94d59d9</td>\n",
              "      <td>2017-10-06 11:07:15</td>\n",
              "      <td>29.99</td>\n",
              "      <td>8.72</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1.0</td>\n",
              "      <td>18.12</td>\n",
              "      <td>a54f0611adc9ed256b57ede6b6eb5114</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Não testei o produto ainda, mas ele veio corre...</td>\n",
              "      <td>2017-10-11</td>\n",
              "      <td>2017-10-12 03:43:48</td>\n",
              "      <td>housewares</td>\n",
              "      <td>40.0</td>\n",
              "      <td>268.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>500.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>9350</td>\n",
              "      <td>maua</td>\n",
              "      <td>SP</td>\n",
              "      <td>maua</td>\n",
              "      <td>-23.659614</td>\n",
              "      <td>-46.475785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>9ef432eb6251297304e76186b10a928d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18</td>\n",
              "      <td>7c396fd4830fd04220f754e42b4e5bff</td>\n",
              "      <td>3149</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "      <td>1</td>\n",
              "      <td>87285b34884572647811a353c7ac498a</td>\n",
              "      <td>3504c0cb71d7fa48d967e0e4c94d59d9</td>\n",
              "      <td>2017-10-06 11:07:15</td>\n",
              "      <td>29.99</td>\n",
              "      <td>8.72</td>\n",
              "      <td>3.0</td>\n",
              "      <td>voucher</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>a54f0611adc9ed256b57ede6b6eb5114</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Não testei o produto ainda, mas ele veio corre...</td>\n",
              "      <td>2017-10-11</td>\n",
              "      <td>2017-10-12 03:43:48</td>\n",
              "      <td>housewares</td>\n",
              "      <td>40.0</td>\n",
              "      <td>268.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>500.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>9350</td>\n",
              "      <td>maua</td>\n",
              "      <td>SP</td>\n",
              "      <td>maua</td>\n",
              "      <td>-23.659614</td>\n",
              "      <td>-46.475785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>9ef432eb6251297304e76186b10a928d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18</td>\n",
              "      <td>7c396fd4830fd04220f754e42b4e5bff</td>\n",
              "      <td>3149</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>-23.810859</td>\n",
              "      <td>-46.736919</td>\n",
              "      <td>1</td>\n",
              "      <td>87285b34884572647811a353c7ac498a</td>\n",
              "      <td>3504c0cb71d7fa48d967e0e4c94d59d9</td>\n",
              "      <td>2017-10-06 11:07:15</td>\n",
              "      <td>29.99</td>\n",
              "      <td>8.72</td>\n",
              "      <td>2.0</td>\n",
              "      <td>voucher</td>\n",
              "      <td>1.0</td>\n",
              "      <td>18.59</td>\n",
              "      <td>a54f0611adc9ed256b57ede6b6eb5114</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Não testei o produto ainda, mas ele veio corre...</td>\n",
              "      <td>2017-10-11</td>\n",
              "      <td>2017-10-12 03:43:48</td>\n",
              "      <td>housewares</td>\n",
              "      <td>40.0</td>\n",
              "      <td>268.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>500.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>9350</td>\n",
              "      <td>maua</td>\n",
              "      <td>SP</td>\n",
              "      <td>maua</td>\n",
              "      <td>-23.659614</td>\n",
              "      <td>-46.475785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>53cdb2fc8bc7dce0b6741e2150273451</td>\n",
              "      <td>b0830fb4747a6c6d20dea0b8c802d7ef</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-07-24 20:41:37</td>\n",
              "      <td>2018-07-26 03:24:27</td>\n",
              "      <td>2018-07-26 14:31:00</td>\n",
              "      <td>2018-08-07 15:27:45</td>\n",
              "      <td>2018-08-13</td>\n",
              "      <td>af07308b275d755c9edb36a90c618231</td>\n",
              "      <td>47813</td>\n",
              "      <td>barreiras</td>\n",
              "      <td>BA</td>\n",
              "      <td>barreiras</td>\n",
              "      <td>-12.150239</td>\n",
              "      <td>-45.008793</td>\n",
              "      <td>1</td>\n",
              "      <td>595fac2a385ac33a80bd5114aec74eb8</td>\n",
              "      <td>289cdb325fb7e7f891c38608bf9e0962</td>\n",
              "      <td>2018-07-30 03:24:27</td>\n",
              "      <td>118.70</td>\n",
              "      <td>22.76</td>\n",
              "      <td>1.0</td>\n",
              "      <td>boleto</td>\n",
              "      <td>1.0</td>\n",
              "      <td>141.46</td>\n",
              "      <td>8d5266042046a06655c8db133d120ba5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Muito boa a loja</td>\n",
              "      <td>Muito bom o produto.</td>\n",
              "      <td>2018-08-08</td>\n",
              "      <td>2018-08-08 18:37:50</td>\n",
              "      <td>perfumery</td>\n",
              "      <td>29.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>400.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>31570</td>\n",
              "      <td>belo horizonte</td>\n",
              "      <td>SP</td>\n",
              "      <td>belo horizonte</td>\n",
              "      <td>-19.946666</td>\n",
              "      <td>-44.032371</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>47770eb9100c2d0c44946d9cf07ec65d</td>\n",
              "      <td>41ce2a54c0b03bf3443c3d931a367089</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-08-08 08:38:49</td>\n",
              "      <td>2018-08-08 08:55:23</td>\n",
              "      <td>2018-08-08 13:50:00</td>\n",
              "      <td>2018-08-17 18:06:29</td>\n",
              "      <td>2018-09-04</td>\n",
              "      <td>3a653a41f6f9fc3d2a113cf8398680e8</td>\n",
              "      <td>75265</td>\n",
              "      <td>vianopolis</td>\n",
              "      <td>GO</td>\n",
              "      <td>vianopolis</td>\n",
              "      <td>-16.746337</td>\n",
              "      <td>-48.518861</td>\n",
              "      <td>1</td>\n",
              "      <td>aa4383b373c6aca5d8797843e5594415</td>\n",
              "      <td>4869f7a5dfa277a7dca6462dcf3b52b2</td>\n",
              "      <td>2018-08-13 08:55:23</td>\n",
              "      <td>159.90</td>\n",
              "      <td>19.22</td>\n",
              "      <td>1.0</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>3.0</td>\n",
              "      <td>179.12</td>\n",
              "      <td>e73b67b67587f7644d5bd1a52deb1b01</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018-08-18</td>\n",
              "      <td>2018-08-22 19:07:58</td>\n",
              "      <td>auto</td>\n",
              "      <td>46.0</td>\n",
              "      <td>232.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>14840</td>\n",
              "      <td>guariba</td>\n",
              "      <td>SP</td>\n",
              "      <td>guariba</td>\n",
              "      <td>-21.396342</td>\n",
              "      <td>-48.245580</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b0d2d04-9cad-4e83-9928-b58f9a8b99a1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5b0d2d04-9cad-4e83-9928-b58f9a8b99a1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5b0d2d04-9cad-4e83-9928-b58f9a8b99a1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-49c66e28-a6da-46d9-96bd-12da3f3d7798\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-49c66e28-a6da-46d9-96bd-12da3f3d7798')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-49c66e28-a6da-46d9-96bd-12da3f3d7798 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_limpio"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "df_limpio.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7aUAC-Sv7Z2_",
        "outputId": "cdbdabce-9562-4644-d9e9-b508a007b311"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Número de valores nulos en 'order_purchase_timestamp_procesada': 0\n",
            "Número de valores nulos en 'order_approved_at_procesada': 0\n",
            "Número de valores nulos en 'order_delivered_carrier_date_procesada': 0\n",
            "Número de valores nulos en 'order_delivered_customer_date_procesada': 0\n",
            "Número de valores nulos en 'order_estimated_delivery_date_procesada': 0\n",
            "Número de valores nulos en 'shipping_limit_date_procesada': 0\n"
          ]
        }
      ],
      "source": [
        "fecha_procesada_purchase = fecha_procesada(df, variable_analisis= 'order_purchase_timestamp')\n",
        "fecha_procesada_approved_at = fecha_procesada(df, variable_analisis= 'order_approved_at')\n",
        "fecha_procesada_delivered_carrier_date= fecha_procesada(df, variable_analisis= 'order_delivered_carrier_date')\n",
        "fecha_procesada_delivered_customer_date= fecha_procesada(df, variable_analisis= 'order_delivered_customer_date')\n",
        "fecha_procesada_order_estimated_delivery_date = fecha_procesada(df, variable_analisis= 'order_estimated_delivery_date')\n",
        "fecha_procesada_shipping_limit_date = fecha_procesada(df, variable_analisis= 'shipping_limit_date')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hiN7MmhqIt_m"
      },
      "source": [
        "# Nuevas columnas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "8HtTlSJ2Ir5Z"
      },
      "outputs": [],
      "source": [
        "region_map = {\n",
        "\"SP\": \"Sudeste\", \"RJ\": \"Sudeste\", \"MG\": \"Sudeste\", \"ES\": \"Sudeste\",\n",
        "\"PR\": \"Sur\", \"SC\": \"Sur\", \"RS\": \"Sur\",\n",
        "\"DF\": \"Centro-Oeste\", \"GO\": \"Centro-Oeste\", \"MS\": \"Centro-Oeste\", \"MT\": \"Centro-Oeste\",\n",
        "\"BA\": \"Nordeste\", \"PE\": \"Nordeste\", \"CE\": \"Nordeste\", \"MA\": \"Nordeste\",\n",
        "\"PB\": \"Nordeste\", \"RN\": \"Nordeste\", \"AL\": \"Nordeste\", \"SE\": \"Nordeste\", \"PI\": \"Nordeste\",\n",
        "\"AM\": \"Norte\", \"PA\": \"Norte\", \"TO\": \"Norte\", \"RO\": \"Norte\", \"RR\": \"Norte\",\n",
        "\"AP\": \"Norte\", \"AC\": \"Norte\"\n",
        "}\n",
        "\n",
        "df[\"customer_region\"] = df[\"customer_state\"].map(region_map)\n",
        "df[\"seller_region\"] = df[\"seller_state\"].map(region_map)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "state_fullname_map = {\n",
        "    \"AC\": \"Acre\", \"AL\": \"Alagoas\", \"AP\": \"Amapá\", \"AM\": \"Amazonas\", \"BA\": \"Bahía\",\n",
        "    \"CE\": \"Ceará\", \"DF\": \"Distrito Federal\", \"ES\": \"Espírito Santo\", \"GO\": \"Goiás\",\n",
        "    \"MA\": \"Maranhão\", \"MT\": \"Mato Grosso\", \"MS\": \"Mato Grosso do Sul\", \"MG\": \"Minas Gerais\",\n",
        "    \"PA\": \"Pará\", \"PB\": \"Paraíba\", \"PR\": \"Paraná\", \"PE\": \"Pernambuco\", \"PI\": \"Piauí\",\n",
        "    \"RJ\": \"Río de Janeiro\", \"RN\": \"Río Grande del Norte\", \"RS\": \"Río Grande del Sur\",\n",
        "    \"RO\": \"Rondônia\", \"RR\": \"Roraima\", \"SC\": \"Santa Catarina\", \"SP\": \"São Paulo\",\n",
        "    \"SE\": \"Sergipe\", \"TO\": \"Tocantins\"\n",
        "}\n"
      ],
      "metadata": {
        "id": "bRRdIjI6LNfm"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"customer_state_full\"] = df[\"customer_state\"].map(state_fullname_map)\n",
        "df[\"seller_state_full\"] = df[\"seller_state\"].map(state_fullname_map)\n"
      ],
      "metadata": {
        "id": "MN9d4HCcLPTj"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "xvTFWp8jI1Vx"
      },
      "outputs": [],
      "source": [
        "df[\"max_order_item_id\"] = df.groupby(\"order_id\")[\"order_item_id\"].transform(\"max\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "2ReL2rmII5F2"
      },
      "outputs": [],
      "source": [
        "df[\"max_payment_sequential\"] = df.groupby(\"order_id\")[\"payment_sequential\"].transform(\"max\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "l_yWJc6xI7b_"
      },
      "outputs": [],
      "source": [
        "df[\"most_frequent_payment_type\"] = df.groupby(\"order_id\")[\"payment_type\"].transform(lambda x: x.mode().iloc[0] if not x.mode().empty else None)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "scgcNVWO7Z2_"
      },
      "source": [
        "# ¿Cuáles son las categorías más populares?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "myvu8Yil7Z2_",
        "outputId": "d234e409-780c-46b5-ce29-01cb18e9e945"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "74"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "df_limpio['product_category_name'].nunique()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QMx6awWnhoRf"
      },
      "source": [
        "Hemos cambiado la manera de limpiar el merge de los DF originales. De tal manera que aunque no tuvieran su traducción en la plantilla en inglés mantenemos el nombre en portugués y en la limpieza creamos 'otros' para los que no tenían nombre."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4txVXu_N7Z2_",
        "outputId": "97085650-c204-4b08-a74b-c24f388242df"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "df.loc[~df[\"product_category_name\"].isin(df_limpio[\"product_category_name\"]), \"product_category_name\"].unique()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K8pfF6ll7Z3A",
        "outputId": "26770701-076b-45ac-cc01-8c8d585f274f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['housewares', 'perfumery', 'auto', 'pet_shop', 'stationery',\n",
              "       'furniture_decor', 'office_furniture', 'garden_tools',\n",
              "       'computers_accessories', 'bed_bath_table', 'toys',\n",
              "       'construction_tools_construction', 'telephony', 'health_beauty',\n",
              "       'electronics', 'baby', 'cool_stuff', 'watches_gifts',\n",
              "       'air_conditioning', 'sports_leisure', 'books_general_interest',\n",
              "       'small_appliances', 'food', 'luggage_accessories',\n",
              "       'fashion_underwear_beach', 'other', 'fashion_bags_accessories',\n",
              "       'musical_instruments', 'construction_tools_lights',\n",
              "       'books_technical', 'costruction_tools_garden', 'home_appliances',\n",
              "       'market_place', 'agro_industry_and_commerce', 'party_supplies',\n",
              "       'home_confort', 'cds_dvds_musicals',\n",
              "       'industry_commerce_and_business', 'consoles_games',\n",
              "       'furniture_bedroom', 'construction_tools_safety',\n",
              "       'fixed_telephony', 'drinks',\n",
              "       'kitchen_dining_laundry_garden_furniture', 'fashion_shoes',\n",
              "       'home_construction', 'audio', 'home_appliances_2', 'cine_photo',\n",
              "       'furniture_living_room', 'art', 'fashion_male_clothing',\n",
              "       'christmas_supplies', 'food_drink', 'tablets_printing_image',\n",
              "       'fashion_sport', 'portateis_cozinha_e_preparadores_de_alimentos',\n",
              "       'la_cuisine', 'flowers', 'computers', 'home_comfort_2',\n",
              "       'small_appliances_home_oven_and_coffee', 'dvds_blu_ray',\n",
              "       'pc_gamer', 'costruction_tools_tools',\n",
              "       'furniture_mattress_and_upholstery', 'signaling_and_security',\n",
              "       'fashion_female_clothing', 'diapers_and_hygiene', 'books_imported',\n",
              "       'music', 'arts_and_craftmanship', 'fashion_childrens_clothes',\n",
              "       'security_and_services'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "df['product_category_name'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "HeJc7uiq7Z3A",
        "outputId": "179fe6e0-e757-4de0-b6bd-f810d93b209e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [order_id, order_status, order_purchase_timestamp, order_approved_at, order_delivered_carrier_date, order_delivered_customer_date, order_estimated_delivery_date, customer_unique_id, customer_state, order_item_id, product_id, seller_id, shipping_limit_date, price, freight_value, payment_sequential, payment_type, payment_installments, payment_value, review_score, product_category_name, seller_state, customer_region, seller_region, customer_state_full, seller_state_full, max_order_item_id, max_payment_sequential, most_frequent_payment_type]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4745be4b-6bf0-4ac5-a5b5-7901cb89967f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_state</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>product_id</th>\n",
              "      <th>seller_id</th>\n",
              "      <th>shipping_limit_date</th>\n",
              "      <th>price</th>\n",
              "      <th>freight_value</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "      <th>review_score</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>seller_state</th>\n",
              "      <th>customer_region</th>\n",
              "      <th>seller_region</th>\n",
              "      <th>customer_state_full</th>\n",
              "      <th>seller_state_full</th>\n",
              "      <th>max_order_item_id</th>\n",
              "      <th>max_payment_sequential</th>\n",
              "      <th>most_frequent_payment_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4745be4b-6bf0-4ac5-a5b5-7901cb89967f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4745be4b-6bf0-4ac5-a5b5-7901cb89967f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4745be4b-6bf0-4ac5-a5b5-7901cb89967f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "df[df['product_category_name'] == 'otros']"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "faltantes_translation_dict = {\n",
        "    # Hogar y decoración\n",
        "    'home_confort': 'Hogar y Confort',\n",
        "    'home_comfort_2': 'Hogar y Confort',\n",
        "    'furniture_living_room': 'Muebles para Living',\n",
        "    'furniture_bedroom': 'Muebles para Dormitorio',\n",
        "    'furniture_mattress_and_upholstery': 'Sillones, Colchones y Tapicería',\n",
        "    'furniture_decor': 'Muebles de Decoración',\n",
        "    'office_furniture': 'Muebles de Oficina',\n",
        "    'kitchen_dining_laundry_garden_furniture': 'Muebles para el Hogar',\n",
        "\n",
        "    # Electrónica e informática\n",
        "    'computers_accessories': 'Accesorios de Informática',\n",
        "    'computers': 'PCs',\n",
        "    'electronics': 'Electrónica',\n",
        "    'cine_photo': 'Cine y Fotografía',\n",
        "    'tablets_printing_image': 'Tablets, Impresión e Imagen',\n",
        "    'fixed_telephony': 'Telefonía Fija',\n",
        "    'telephony': 'Telefonía',\n",
        "\n",
        "    # Moda y accesorios\n",
        "    'fashion_male_clothing': 'Ropa Masculina',\n",
        "    'fashion_female_clothing': 'Ropa Femenina',\n",
        "    'fashion_childrens_clothes': 'Ropa para Niños',\n",
        "    'fashion_underwear_beach': 'Ropa Interior y Moda de Playa',\n",
        "    'fashion_sport': 'Moda Deportiva',\n",
        "    'fashion_shoes': 'Calzado de Moda',\n",
        "    'fashion_bags_accessories': 'Bolsos y Accesorios de Moda',\n",
        "\n",
        "    # Electrodomésticos y cocina\n",
        "    'home_appliances': 'Electrodomésticos',\n",
        "    'home_appliances_2': 'Electrodomésticos',\n",
        "    'small_appliances': 'Electrodomésticos Portátiles',\n",
        "    'small_appliances_home_oven_and_coffee': 'Accesorios para Horno y Café',\n",
        "    'bed_bath_table': 'Blanquería para el Hogar',\n",
        "\n",
        "    # Construcción, herramientas y seguridad\n",
        "    'construction_tools_construction': 'Herramientas de Construcción',\n",
        "    'costruction_tools_garden': 'Herramientas para Construcción y Jardinería',\n",
        "    'construction_tools_lights': 'Luminarias para el Hogar',\n",
        "    'construction_tools_safety': 'Herramientas de Seguridad para Construcción',\n",
        "    'costruction_tools_tools': 'Herramientas de Construcción',\n",
        "    'signaling_and_security': 'Señalización y Seguridad',\n",
        "    'garden_tools': 'Herramientas para Jardín',\n",
        "    'home_construction': 'Materiales de Construcción',\n",
        "\n",
        "    # Automotriz\n",
        "    'auto': 'Accesorios Automotrices',\n",
        "\n",
        "    # Entretenimiento y cultura\n",
        "    'books_general_interest': 'Libros de Interés General',\n",
        "    'books_technical': 'Libros Técnicos',\n",
        "    'books_imported': 'Libros Importados',\n",
        "    'music': 'Música',\n",
        "    'cds_dvds_musicals': 'CDs, DVDs y Música',\n",
        "    'musical_instruments': 'Instrumentos Musicales',\n",
        "    'art': 'Artes',\n",
        "    'arts_and_craftmanship': 'Artes y Artesanías',\n",
        "\n",
        "    # Salud y belleza\n",
        "    'health_beauty': 'Belleza y Salud',\n",
        "    'perfumery': 'Perfumería y Fragancias',\n",
        "    'diapers_and_hygiene': 'Pañales e Higiene',\n",
        "\n",
        "    # Deportes y ocio\n",
        "    'sports_leisure': 'Deportes y Ocio',\n",
        "\n",
        "    # Bebés y niños\n",
        "    'baby': 'Bebés',\n",
        "    'toys': 'Juguetes',\n",
        "\n",
        "    # Alimentos y bebidas\n",
        "    'food': 'Alimentos',\n",
        "    'drinks': 'Bebidas',\n",
        "    'food_drink': 'Alimentos y Bebidas',\n",
        "\n",
        "    # Otros\n",
        "    'stationery': 'Papelería',\n",
        "    'luggage_accessories': 'Maletas y Accesorios',\n",
        "    'watches_gifts': 'Relojes y Regalos',\n",
        "    'security_and_services': 'Seguros y Servicios',\n",
        "    'agro_industry_and_commerce': 'Agroindustria y Comercio',\n",
        "    'industry_commerce_and_business': 'Industria, Comercio y Negocios',\n",
        "    'party_supplies': 'Artículos para Fiestas',\n",
        "    'christmas_supplies': 'Artículos de Navidad',\n",
        "    'flowers': 'Flores',\n",
        "    'air_conditioning': 'Climatización',\n",
        "    'housewares': 'Accesorios para el Hogar'\n",
        "}\n",
        "\n",
        "# Unificamos con el diccionario original\n",
        "translation_dict.update(faltantes_translation_dict)\n",
        "\n",
        "# Aplicamos la actualización al DataFrame\n",
        "df['product_category_name_es'] = df['product_category_name'].map(translation_dict).fillna('Sin Categoría')\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "Rm5ZSfsW6_ku",
        "outputId": "5950b907-2ad1-41c5-90ec-95019e4325b8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        }
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'translation_dict' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-36-646968f62520>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m \u001b[0;31m# Unificamos con el diccionario original\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 92\u001b[0;31m \u001b[0mtranslation_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfaltantes_translation_dict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     93\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m \u001b[0;31m# Aplicamos la actualización al DataFrame\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'translation_dict' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_categorias = len(set(translation_dict.values()))\n",
        "print(f\"🔹 Total de categorías únicas en español: {num_categorias}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "id": "VM754Ll8AGrf",
        "outputId": "1c9e678a-fa65-4820-e640-5c1642725324"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'translation_dict' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-41-3c5129db1025>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnum_categorias\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtranslation_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"🔹 Total de categorías únicas en español: {num_categorias}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'translation_dict' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['product_category_name'].nunique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q5ky4Y5fAtOv",
        "outputId": "08095dd7-6b6a-4ab4-b0e2-e70247f5dfbf"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "74"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1️⃣ Obtener todas las categorías en portugués\n",
        "categorias_portugues = set(df['product_category_name'].unique())\n",
        "\n",
        "# 2️⃣ Obtener todas las categorías ya traducidas en español\n",
        "categorias_traducidas = set(translation_dict.keys())\n",
        "\n",
        "# 3️⃣ Encontrar categorías que están en portugués pero no en el diccionario\n",
        "categorias_faltantes = categorias_portugues - categorias_traducidas\n",
        "\n",
        "# Mostrar el resultado\n",
        "print(f\"🚨 Categorías sin traducción ({len(categorias_faltantes)} faltantes):\")\n",
        "for cat in sorted(categorias_faltantes):\n",
        "    print(f\"🔹 {cat}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        },
        "id": "66zF1KlUB4ZV",
        "outputId": "0db8fb0b-c377-4125-9cce-540c44b016ee"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'translation_dict' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-42-9f201d0776ca>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# 2️⃣ Obtener todas las categorías ya traducidas en español\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mcategorias_traducidas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtranslation_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# 3️⃣ Encontrar categorías que están en portugués pero no en el diccionario\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'translation_dict' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"🔍 Categorías en portugués únicas: {len(categorias_portugues)}\")\n",
        "print(f\"📖 Categorías traducidas en español únicas: {len(set(translation_dict.values()))}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 182
        },
        "id": "5hQA4wbQCMYt",
        "outputId": "3aaaeab3-9cf6-4009-d61c-8c06784cbf09"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔍 Categorías en portugués únicas: 74\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'translation_dict' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-43-f9e577233867>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"🔍 Categorías en portugués únicas: {len(categorias_portugues)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"📖 Categorías traducidas en español únicas: {len(set(translation_dict.values()))}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'translation_dict' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "\n",
        "# Contamos cuántas veces aparece cada categoría traducida\n",
        "conteo_traducciones = Counter(translation_dict.values())\n",
        "\n",
        "# Filtramos las que están repetidas\n",
        "categorias_repetidas = {k: v for k, v in conteo_traducciones.items() if v > 1}\n",
        "\n",
        "# Mostramos el resultado\n",
        "print(f\"🔄 Categorías en español con nombres repetidos:\")\n",
        "for categoria, cantidad in categorias_repetidas.items():\n",
        "    print(f\" - {categoria}: {cantidad} veces\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        },
        "id": "X6BB0qcyCQml",
        "outputId": "384a9dcf-ddac-4858-c986-c30051cc2b3d"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'translation_dict' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-44-8009313e7789>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Contamos cuántas veces aparece cada categoría traducida\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mconteo_traducciones\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtranslation_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Filtramos las que están repetidas\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'translation_dict' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import defaultdict\n",
        "\n",
        "# Crear un diccionario inverso para ver qué categorías en portugués se traducen igual\n",
        "inverted_translation = defaultdict(list)\n",
        "for key, value in translation_dict.items():\n",
        "    inverted_translation[value].append(key)\n",
        "\n",
        "# Filtrar solo las que están repetidas\n",
        "duplicated_categories = {k: v for k, v in inverted_translation.items() if len(v) > 1}\n",
        "\n",
        "# Mostrar resultados\n",
        "print(\"🔄 Categorías en español que agrupan múltiples nombres en portugués:\")\n",
        "for esp, port_list in duplicated_categories.items():\n",
        "    print(f\" - {esp}: {port_list}\")\n"
      ],
      "metadata": {
        "id": "4JOLQmGHCwMP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 🔹 Corregimos nombres repetidos en español\n",
        "translation_dict.update({\n",
        "    # Muebles y Hogar\n",
        "    'moveis_quarto': 'Muebles para Dormitorio - A',\n",
        "    'furniture_bedroom': 'Muebles para Dormitorio - B',\n",
        "    'moveis_sala': 'Muebles para Living - A',\n",
        "    'furniture_living_room': 'Muebles para Living - B',\n",
        "    'moveis_colchao_e_estofado': 'Sillones y Colchones - A',\n",
        "    'furniture_mattress_and_upholstery': 'Sillones y Colchones - B',\n",
        "    'moveis_cozinha_area_de_servico_jantar_e_jardim': 'Muebles para el Hogar - A',\n",
        "    'kitchen_dining_laundry_garden_furniture': 'Muebles para el Hogar - B',\n",
        "\n",
        "    # Tecnología\n",
        "    'informatica_acessorios': 'Accesorios de Informática - A',\n",
        "    'computers_accessories': 'Accesorios de Informática - B',\n",
        "    'eletronicos': 'Electrónica - A',\n",
        "    'electronics': 'Electrónica - B',\n",
        "    'telefonia': 'Telefonía - A',\n",
        "    'telephony': 'Telefonía - B',\n",
        "\n",
        "    # Electrodomésticos\n",
        "    'eletrodomesticos': 'Electrodomésticos - A',\n",
        "    'eletrodomesticos_2': 'Electrodomésticos - B',\n",
        "    'home_appliances': 'Electrodomésticos - C',\n",
        "    'home_appliances_2': 'Electrodomésticos - D',\n",
        "\n",
        "    # Construcción\n",
        "    'construcao_ferramentas_construcao': 'Herramientas de Construcción - A',\n",
        "    'construcao_ferramentas_ferramentas': 'Herramientas de Construcción - B',\n",
        "    'construction_tools_construction': 'Herramientas de Construcción - C',\n",
        "    'costruction_tools_tools': 'Herramientas de Construcción - D',\n",
        "\n",
        "    # Libros y Cultura\n",
        "    'livros_interesse_geral': 'Libros de Interés General - A',\n",
        "    'books_general_interest': 'Libros de Interés General - B',\n",
        "    'livros_tecnicos': 'Libros Técnicos - A',\n",
        "    'books_technical': 'Libros Técnicos - B',\n",
        "\n",
        "    # Otros\n",
        "    'casa_conforto': 'Hogar y Confort - A',\n",
        "    'casa_conforto_2': 'Hogar y Confort - B',\n",
        "    'home_confort': 'Hogar y Confort - C',\n",
        "    'home_comfort_2': 'Hogar y Confort - D',\n",
        "})\n",
        "\n",
        "# 🔹 Volvemos a mapear en el DataFrame\n",
        "df['product_category_name_es'] = df['product_category_name'].map(translation_dict).fillna('Sin Categoría')\n",
        "\n",
        "# 🔹 Verificamos nuevamente la cantidad de categorías únicas\n",
        "print(f\"✅ Categorías únicas en español: {df['product_category_name_es'].nunique()}\")\n"
      ],
      "metadata": {
        "id": "EKbVsVP7DWJN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Extraer todas las categorías únicas del DataFrame\n",
        "categorias_en_df = set(df['product_category_name'].unique())\n",
        "\n",
        "# 2. Extraer todas las claves del diccionario\n",
        "categorias_en_dict = set(translation_dict.keys())\n",
        "\n",
        "# 3. Ver qué categorías del DataFrame no se encuentran en el diccionario\n",
        "categorias_faltantes = categorias_en_df - categorias_en_dict\n",
        "\n",
        "# 4. Imprimir las categorías faltantes\n",
        "print(categorias_faltantes)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        },
        "id": "exAykUJWFNnR",
        "outputId": "2652ee76-5b5b-4b6b-f0d7-8224304aa149"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'translation_dict' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-40-5068e6f09de8>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# 2. Extraer todas las claves del diccionario\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mcategorias_en_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtranslation_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# 3. Ver qué categorías del DataFrame no se encuentran en el diccionario\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'translation_dict' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['product_category_name_es'].nunique()"
      ],
      "metadata": {
        "id": "YHcHfF30_RW3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mY27Ir2AhoRg"
      },
      "source": [
        "Calculamos el número de productos que tiene cada categoría:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4zMwXdfP7Z3C"
      },
      "outputs": [],
      "source": [
        "productos_por_categoria = df.groupby('product_category_name_es')['product_id'].nunique().reset_index()\n",
        "productos_por_categoria.rename(columns={'product_id': 'count_product_id'}, inplace=True)\n",
        "productos_por_categoria = productos_por_categoria.sort_values(by='count_product_id', ascending=False)\n",
        "\n",
        "productos_por_categoria.head(20)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jJ6Xw16b7Z3D"
      },
      "outputs": [],
      "source": [
        "productos_mas_vendidos = df.groupby(['product_id', 'product_category_name_es'])['order_item_id'].count().reset_index()\n",
        "productos_mas_vendidos.rename(columns={'order_item_id': 'total_vendidos'}, inplace=True)\n",
        "productos_mas_vendidos = productos_mas_vendidos.sort_values(by='total_vendidos', ascending=False)\n",
        "productos_mas_vendidos.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IBr6rD0X7Z3E"
      },
      "outputs": [],
      "source": [
        "df_categorias_agg = df.groupby('product_category_name_es').agg(\n",
        "    #customer_count=('customer_unique_id', 'nunique'),\n",
        "    order_count=('order_id', 'count'),\n",
        "    total_payment_value=('payment_value', 'sum')\n",
        ")\n",
        "\n",
        "#df_categorias_agg['customer_count_pct'] = (df_categorias_agg['customer_count'] / df_categorias_agg['customer_count'].sum() * 100).round(2).astype(str) + '%'\n",
        "df_categorias_agg['order_count_pct'] = (df_categorias_agg['order_count'] / df_categorias_agg['order_count'].sum() * 100).round(2).astype(str) + '%'\n",
        "df_categorias_agg['total_payment_value_pct'] = (df_categorias_agg['total_payment_value'] / df_categorias_agg['total_payment_value'].sum() * 100).round(2).astype(str) + '%'\n",
        "\n",
        "df_categorias_agg = df_categorias_agg.sort_values(by=['total_payment_value'], ascending=False).head(10)\n",
        "df_categorias_agg\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "SWMtEm5vhoRq",
        "outputId": "c8ec7cda-66ba-415e-a0c5-9db2662d169e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        }
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'df_categorias_agg' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-39-e9596837f465>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# 🔹 Seleccionar las 10 categorías principales por número de pedidos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mtop_10_categories\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_categorias_agg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlargest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"order_count\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# 🔹 Ordenar las categorías por número de pedidos (de mayor a menor)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'df_categorias_agg' is not defined"
          ]
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import matplotlib.ticker as mtick\n",
        "\n",
        "# 🔹 Seleccionar las 10 categorías principales por número de pedidos\n",
        "top_10_categories = df_categorias_agg.nlargest(10, \"order_count\")\n",
        "\n",
        "# 🔹 Ordenar las categorías por número de pedidos (de mayor a menor)\n",
        "top_10_categories = top_10_categories.sort_values(\"order_count\", ascending=True)\n",
        "\n",
        "# 🔹 Convertir los valores monetarios a millones\n",
        "top_10_categories[\"total_payment_value_millions\"] = top_10_categories[\"total_payment_value\"] / 1_000_000\n",
        "\n",
        "# 🔹 Configurar la figura y subgráficos\n",
        "fig, axes = plt.subplots(1, 2, figsize=(18, 6))\n",
        "\n",
        "# 📊 **Gráfico 1: Número de pedidos**\n",
        "sns.barplot(\n",
        "    ax=axes[0],\n",
        "    x=\"order_count\",\n",
        "    y=\"product_category_name_es\",\n",
        "    data=top_10_categories,\n",
        "    color=\"#001647\"\n",
        ")\n",
        "axes[0].set_title(\"Top 10: Número de Pedidos por Categoría de Producto\", fontsize=14)\n",
        "axes[0].set_xlabel(\"Número de Pedidos\", fontsize=12)\n",
        "axes[0].set_ylabel(\"Categoría de Producto\", fontsize=12)\n",
        "\n",
        "# 📊 **Gráfico 2: Valor total de pagos en millones (también ordenado)**\n",
        "top_10_categories = top_10_categories.sort_values(\"total_payment_value_millions\", ascending=True)\n",
        "sns.barplot(\n",
        "    ax=axes[1],\n",
        "    x=\"total_payment_value_millions\",\n",
        "    y=\"product_category_name_es\",\n",
        "    data=top_10_categories,\n",
        "    color=\"#E64E36\"\n",
        ")\n",
        "axes[1].set_title(\"Top 10: Valor Total de Pagos por Categoría de Producto\", fontsize=14)\n",
        "axes[1].set_xlabel(\"Valor Total de Pagos (Millones)\", fontsize=12)\n",
        "axes[1].set_ylabel(\"\")  # 🔹 Ocultar etiquetas duplicadas\n",
        "\n",
        "# 🔹 Formato en millones\n",
        "axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(lambda x, _: f\"{x:,.1f}M\"))\n",
        "\n",
        "# 🔹 Ajustar el espacio entre gráficos\n",
        "plt.tight_layout()\n",
        "\n",
        "# 🔹 Mostrar gráfico\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SymLIWtshoRr"
      },
      "outputs": [],
      "source": [
        "# # Tomamos el top 10 de categorías más populares\n",
        "# top_categories = df.groupby('product_category_name').agg(\n",
        "#     order_count=('order_id', 'count'),\n",
        "#     total_payment_value=('payment_value', 'sum')\n",
        "# ).sort_values(by=['order_count', 'total_payment_value'], ascending=False).head(10)\n",
        "\n",
        "# Configuración del gráfico\n",
        "fig, ax1 = plt.subplots(figsize=(12, 6))\n",
        "\n",
        "# Colores según lo solicitado\n",
        "color_pedidos = '#001647'\n",
        "color_ingresos = '#E64E36'\n",
        "\n",
        "# Eje primario (barras)\n",
        "ax1.bar(top_10_categories.index, top_10_categories['order_count'], color=color_pedidos, alpha=0.8, label='Pedidos')\n",
        "\n",
        "ax1.set_ylabel('Cantidad de Pedidos', color=color_pedidos)\n",
        "ax1.tick_params(axis='y', labelcolor=color_pedidos)\n",
        "ax1.set_xticklabels(top_10_categories.index, rotation=45, ha='right')\n",
        "\n",
        "# Eje secundario (línea)\n",
        "ax2 = ax1.twinx()\n",
        "ax2.plot(top_10_categories.index, top_10_categories['total_payment_value'], color=color_ingresos, marker='o', linewidth=2, markersize=6, label='Ingresos Totales')\n",
        "\n",
        "ax2.set_ylabel('Ingresos Totales ($)', color=color_ingresos)\n",
        "ax2.tick_params(axis='y', labelcolor=color_ingresos)\n",
        "\n",
        "# Leyenda bien posicionada\n",
        "lines, labels = ax1.get_legend_handles_labels()\n",
        "lines2, labels2 = ax2.get_legend_handles_labels()\n",
        "ax1.legend(lines + lines2, labels + labels2, loc='upper right', bbox_to_anchor=(1, 1))\n",
        "\n",
        "# Título\n",
        "fig.suptitle('Top 10 Categorías por Pedidos e Ingresos', fontsize=14)\n",
        "\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xGIRfuBj7Z3G"
      },
      "source": [
        "## ¿Cuáles son las categorías que dan más beneficio?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "krh2haMXhoRs"
      },
      "source": [
        "Creo la columna precio_ticket que es la suma del payment_value por cada payment_sequential de cada order_id.\n",
        "\n",
        "Creo la columna beneficio que resta al precio ticket la suma del price y freight_value por cada order_item_id de cada order_id."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V8fzA8PM7Z3G"
      },
      "outputs": [],
      "source": [
        "df[\"precio_ticket\"] = df.groupby([\"order_id\", \"payment_sequential\"])[\"payment_value\"].transform(\"first\")\n",
        "df[\"precio_ticket\"] = df.groupby(\"order_id\")[\"precio_ticket\"].transform(\"sum\")\n",
        "\n",
        "payment_sum = df.drop_duplicates(subset=[\"order_id\", \"payment_sequential\"]).groupby(\"order_id\")[\"payment_value\"].sum()\n",
        "price_sum = df.drop_duplicates(subset=[\"order_id\", \"order_item_id\"]).groupby(\"order_id\")[\"price\"].sum()\n",
        "freight_sum = df.drop_duplicates(subset=[\"order_id\", \"order_item_id\"]).groupby(\"order_id\")[\"freight_value\"].sum()\n",
        "\n",
        "df[\"beneficio_ticket\"] = df[\"order_id\"].map((payment_sum - price_sum - freight_sum).round(8))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g14e0kit7Z3G"
      },
      "outputs": [],
      "source": [
        "df_categorias_agg = df.groupby('product_category_name_es').agg(\n",
        "    order_count=('order_id', 'count'),\n",
        "    total_payment_value=('payment_value', 'sum'),\n",
        "    beneficio_total=('beneficio_ticket', 'sum')\n",
        ").sort_values(by=['beneficio_total', 'total_payment_value', 'order_count'], ascending=False)\n",
        "df_categorias_agg.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cljS4U2lhoRt"
      },
      "outputs": [],
      "source": [
        "df.head(3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "s0mbC_ax7Z3H"
      },
      "outputs": [],
      "source": [
        "# Tomamos las 10 categorías con mayor beneficio\n",
        "top_10_categories = df_categorias_agg.sort_values('beneficio_total', ascending=False).head(10)\n",
        "\n",
        "# Ajustamos el estilo\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.figure(figsize=(14, 6))\n",
        "\n",
        "# Gráfico de barras del beneficio total por categoría\n",
        "ax = sns.barplot(\n",
        "    x=top_10_categories.index,\n",
        "    y=top_10_categories['beneficio_total'],\n",
        "    palette=\"Blues_r\"\n",
        ")\n",
        "\n",
        "# Agregar etiquetas de valores sobre las barras\n",
        "for p in ax.patches:\n",
        "    ax.annotate(\n",
        "        f'{p.get_height():,.0f}',  # Formatear número con separador de miles\n",
        "        (p.get_x() + p.get_width() / 2., p.get_height()),\n",
        "        ha='center', va='bottom', fontsize=10, fontweight='bold', color='black'\n",
        "    )\n",
        "\n",
        "# Ajustar títulos y etiquetas\n",
        "plt.title('Top 10: Beneficio por Categoría de Producto', fontsize=14)\n",
        "plt.xlabel('Categoría de Producto', fontsize=12)\n",
        "plt.ylabel('Beneficio Total', fontsize=12)\n",
        "plt.xticks(rotation=45, ha='right')  # Rotamos y alineamos los nombres para mejor visibilidad\n",
        "\n",
        "# Ajuste de diseño\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TFWnCnNC7Z3H"
      },
      "source": [
        "# ¿Cuáles son los estados en los que más se compra?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tSI6Ap8T7Z3M"
      },
      "outputs": [],
      "source": [
        "\n",
        "\n",
        "# Agrupamos los datos por estado del vendedor\n",
        "state_summary = df.groupby('seller_state_full').agg(\n",
        "    order_count=('order_id', 'count'),\n",
        "    total_payment_value=('payment_value', 'sum')\n",
        ").sort_values(by='total_payment_value', ascending=False).head(10)\n",
        "\n",
        "# Convertimos los valores de pago a miles para una mejor visualización\n",
        "state_summary['total_payment_value'] /= 1_000\n",
        "state_summary.reset_index(inplace=True)\n",
        "\n",
        "# Ajustes generales de estilo\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.figure(figsize=(16, 6))\n",
        "\n",
        "### 🔹 Gráfico 1: Número de pedidos por estado\n",
        "plt.subplot(1, 2, 1)\n",
        "ax1 = sns.barplot(\n",
        "    x='seller_state_full',\n",
        "    y='order_count',\n",
        "    data=state_summary,\n",
        "    palette=\"Blues_r\"\n",
        ")\n",
        "\n",
        "# Agregar etiquetas de valores sobre las barras\n",
        "for p in ax1.patches:\n",
        "    ax1.annotate(\n",
        "        f'{int(p.get_height())}',\n",
        "        (p.get_x() + p.get_width() / 2., p.get_height()),\n",
        "        ha='center', va='bottom', fontsize=10, fontweight='bold', color='black'\n",
        "    )\n",
        "\n",
        "plt.title('Top 10: Número de Pedidos por Estado', fontsize=14)\n",
        "plt.xlabel('Estado', fontsize=12)\n",
        "plt.ylabel('Número de Pedidos', fontsize=12)\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "\n",
        "### 🔹 Gráfico 2: Valor total de pagos por estado (en miles)\n",
        "plt.subplot(1, 2, 2)\n",
        "ax2 = sns.barplot(\n",
        "    x='seller_state_full',\n",
        "    y='total_payment_value',\n",
        "    data=state_summary,\n",
        "    palette=\"Reds_r\"\n",
        ")\n",
        "\n",
        "# Agregar etiquetas de valores sobre las barras\n",
        "for p in ax2.patches:\n",
        "    ax2.annotate(\n",
        "        f'{p.get_height():,.0f}K',\n",
        "        (p.get_x() + p.get_width() / 2., p.get_height()),\n",
        "        ha='center', va='bottom', fontsize=10, fontweight='bold', color='black'\n",
        "    )\n",
        "\n",
        "plt.title('Top 10: Valor Total de Pagos por Estado', fontsize=14)\n",
        "plt.xlabel('Estado', fontsize=12)\n",
        "plt.ylabel('Valor Total de Pagos (miles)', fontsize=12)\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "\n",
        "# Ajustamos los espacios para que los gráficos no se solapen\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5F-Ut2Em7Z3N"
      },
      "source": [
        "## ¿Cuáles son las categorías más vendidas por Estado?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ka5sgEQM7Z3N"
      },
      "outputs": [],
      "source": [
        "ventas_por_estado_categoria = df.groupby(['seller_state_full', 'product_category_name']).size().reset_index(name='total_vendidos')\n",
        "ventas_por_estado_categoria = ventas_por_estado_categoria.sort_values(by=['seller_state_full', 'total_vendidos'], ascending=[True, False])\n",
        "\n",
        "top_por_estado = ventas_por_estado_categoria.groupby('seller_state_full').head(5)\n",
        "top_por_estado.sort_values(by='total_vendidos', ascending=False).head(20)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WsoSK4LThoRx"
      },
      "outputs": [],
      "source": [
        "import plotly.express as px\n",
        "\n",
        "# Ordenamos los estados por total de vendidos\n",
        "df_top5_sorted = top_por_estado.groupby('seller_state').agg(\n",
        "    {'total_vendidos': 'sum'}\n",
        ").sort_values('total_vendidos', ascending=False).reset_index()\n",
        "\n",
        "# Dividimos en tres grupos (9 estados por gráfico)\n",
        "df_1 = df_top5_sorted.head(9)  # Top 9\n",
        "df_2 = df_top5_sorted.iloc[9:18]  # Del 10 al 18\n",
        "df_3 = df_top5_sorted.iloc[18:]  # Del 19 al 27\n",
        "\n",
        "# Función para graficar\n",
        "def plot_bar(df_part, title):\n",
        "    df_filtered = top_por_estado[top_por_estado['seller_state'].isin(df_part['seller_state'])]\n",
        "\n",
        "    df_pivot = df_filtered.pivot_table(\n",
        "        index='seller_state',\n",
        "        columns='product_category_name',\n",
        "        values='total_vendidos',\n",
        "        aggfunc='sum',\n",
        "        fill_value=0\n",
        "    ).reset_index()\n",
        "\n",
        "    # Asegurar que hay datos para graficar\n",
        "    if df_pivot.empty:\n",
        "        print(f\"No hay datos para {title}\")\n",
        "        return None\n",
        "\n",
        "    df_pivot['total_compras'] = df_pivot.drop('seller_state', axis=1).sum(axis=1)\n",
        "    df_pivot = df_pivot.sort_values('total_compras', ascending=False)\n",
        "\n",
        "    # Definimos colores personalizados para mejor diferenciación\n",
        "    color_palette = px.colors.qualitative.Set3  # Paleta más variada\n",
        "\n",
        "    fig = px.bar(df_pivot,\n",
        "                 x='seller_state',\n",
        "                 y=df_pivot.columns[1:-1],\n",
        "                 title=title,\n",
        "                 labels={'seller_state': 'Estado', 'value': 'Número de Compras'},\n",
        "                 color_discrete_sequence=color_palette)\n",
        "\n",
        "    fig.update_layout(\n",
        "        barmode='stack',\n",
        "        xaxis_title='Estado',\n",
        "        yaxis_title='Número de Compras',\n",
        "        xaxis_tickangle=-45,\n",
        "        legend_title='Categorías de Producto',\n",
        "    )\n",
        "    return fig\n",
        "\n",
        "# Generar y mostrar gráficos solo si hay datos\n",
        "fig1 = plot_bar(df_1, 'Top 9 Estados con Más Ventas')\n",
        "fig2 = plot_bar(df_2, 'Estados del 10 al 18 con Más Ventas')\n",
        "fig3 = plot_bar(df_3, 'Estados del 19 al 27 con Más Ventas')\n",
        "\n",
        "if fig1: fig1.show()\n",
        "if fig2: fig2.show()\n",
        "if fig3: fig3.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Aseguramos que `seller_state_full` esté presente en `top_por_estado`\n",
        "if 'seller_state_full' not in top_por_estado.columns:\n",
        "    top_por_estado['seller_state_full'] = top_por_estado['seller_state'].map(state_fullname_map)\n",
        "\n",
        "# Agrupamos los datos por estado completo del vendedor\n",
        "df_top5_sorted = top_por_estado.groupby('seller_state_full').agg(\n",
        "    {'total_vendidos': 'sum'}\n",
        ").sort_values('total_vendidos', ascending=False).reset_index()\n",
        "\n",
        "# Dividimos los datos en tres grupos de 9 estados cada uno\n",
        "df_1 = df_top5_sorted.head(9)  # Top 9 estados\n",
        "df_2 = df_top5_sorted.iloc[9:18]  # Del 10 al 18\n",
        "df_3 = df_top5_sorted.iloc[18:]  # Del 19 al 27\n",
        "\n",
        "# Función para graficar con nombres completos de estados\n",
        "def plot_bar(df_part, title):\n",
        "    df_filtered = top_por_estado[top_por_estado['seller_state_full'].isin(df_part['seller_state_full'])]\n",
        "\n",
        "    df_pivot = df_filtered.pivot_table(\n",
        "        index='seller_state_full',\n",
        "        columns='product_category_name',\n",
        "        values='total_vendidos',\n",
        "        aggfunc='sum',\n",
        "        fill_value=0\n",
        "    ).reset_index()\n",
        "\n",
        "    # Verificamos si hay datos antes de graficar\n",
        "    if df_pivot.empty:\n",
        "        print(f\"No hay datos para {title}\")\n",
        "        return None\n",
        "\n",
        "    df_pivot['total_compras'] = df_pivot.drop('seller_state_full', axis=1).sum(axis=1)\n",
        "    df_pivot = df_pivot.sort_values('total_compras', ascending=False)\n",
        "\n",
        "    # Usamos una paleta de colores variada para mejor visualización\n",
        "    color_palette = px.colors.qualitative.Set3\n",
        "\n",
        "    fig = px.bar(df_pivot,\n",
        "                 x='seller_state_full',\n",
        "                 y=df_pivot.columns[1:-1],\n",
        "                 title=title,\n",
        "                 labels={'seller_state_full': 'Estado', 'value': 'Número de Compras'},\n",
        "                 color_discrete_sequence=color_palette)\n",
        "\n",
        "    fig.update_layout(\n",
        "        barmode='stack',\n",
        "        xaxis_title='Estado',\n",
        "        yaxis_title='Número de Compras',\n",
        "        xaxis_tickangle=-45,  # Rotamos etiquetas para evitar solapamientos\n",
        "        legend_title='Categorías de Producto',\n",
        "    )\n",
        "    return fig\n",
        "\n",
        "# Generar y mostrar gráficos solo si hay datos\n",
        "fig1 = plot_bar(df_1, 'Top 9 Estados con Más Ventas')\n",
        "fig2 = plot_bar(df_2, 'Estados del 10 al 18 con Más Ventas')\n",
        "fig3 = plot_bar(df_3, 'Estados del 19 al 27 con Más Ventas')\n",
        "\n",
        "if fig1: fig1.show()\n",
        "if fig2: fig2.show()\n",
        "if fig3: fig3.show()\n"
      ],
      "metadata": {
        "id": "TbjzY3F-OKK6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Asegurar que `product_category_name_es` no tenga NaN\n",
        "top_por_estado['product_category_name_es'].fillna('Sin Categoría', inplace=True)\n",
        "\n",
        "# Seleccionamos los 10 estados con más ventas\n",
        "top_states = top_por_estado.groupby('seller_state_full').agg({'total_vendidos': 'sum'}).nlargest(10, 'total_vendidos').reset_index()\n",
        "\n",
        "# Filtramos el dataset original para incluir solo estos estados\n",
        "df_filtered = top_por_estado[top_por_estado['seller_state_full'].isin(top_states['seller_state_full'])]\n",
        "\n",
        "# 🔹 Determinar las 3 categorías más vendidas por estado y agrupar el resto en \"Otras categorías\" (excepto São Paulo)\n",
        "df_filtered['rank'] = df_filtered.groupby('seller_state_full')['total_vendidos'].rank(method='first', ascending=False)\n",
        "\n",
        "# São Paulo muestra TODAS sus categorías, los demás solo 3 + \"Otras categorías\"\n",
        "df_filtered['product_category_grouped'] = df_filtered.apply(\n",
        "    lambda row: row['product_category_name_es']\n",
        "    if (row['seller_state_full'] == 'São Paulo' or row['rank'] <= 3) else 'Otras categorías',\n",
        "    axis=1\n",
        ")\n",
        "\n",
        "# 🔹 Volvemos a agrupar con la nueva columna \"product_category_grouped\"\n",
        "df_grouped = df_filtered.groupby(['seller_state_full', 'product_category_grouped']).agg({'total_vendidos': 'sum'}).reset_index()\n",
        "\n",
        "# 🔹 Creamos la tabla pivote\n",
        "df_pivot = df_grouped.pivot_table(\n",
        "    index='seller_state_full',\n",
        "    columns='product_category_grouped',\n",
        "    values='total_vendidos',\n",
        "    aggfunc='sum',\n",
        "    fill_value=0\n",
        ").reset_index()\n",
        "\n",
        "# Ordenamos los estados de mayor a menor total de ventas\n",
        "df_pivot['total_compras'] = df_pivot.drop('seller_state_full', axis=1).sum(axis=1)\n",
        "df_pivot = df_pivot.sort_values('total_compras', ascending=False)\n",
        "\n",
        "# 🔹 Definir una paleta de colores única para cada categoría\n",
        "unique_categories = df_pivot.columns[1:-1]  # Excluir 'seller_state_full' y 'total_compras'\n",
        "category_colors = {\n",
        "    'Otras categorías': '#B0BEC5',  # Gris para destacar que es un grupo\n",
        "    'Accesorios Automotrices': '#FF5733',\n",
        "    'Accesorios de Informática': '#4285F4',\n",
        "    'Accesorios para el Hogar': '#34A853',\n",
        "    'Alimentos y Bebidas': '#FBBC05',\n",
        "    'Belleza y Salud': '#A52A2A',\n",
        "    'Consolas y Videojuegos': '#8E44AD',\n",
        "    'Deportes y Ocio': '#FF8C00',\n",
        "    'Electrónica': '#1E90FF',\n",
        "    'Herramientas para Jardín': '#228B22',\n",
        "    'Juguetes': '#FF1493',\n",
        "    'Muebles de Decoración': '#D2691E',\n",
        "    'PCs': '#20B2AA',\n",
        "    'Perfumería y Fragancias': '#FF69B4',\n",
        "    'Productos Innovadores': '#9932CC',\n",
        "    'Relojes y Regalos': '#808000',\n",
        "    'Telefonía': '#FF4500'\n",
        "}\n",
        "\n",
        "# Asignar colores solo a las categorías presentes en el dataset\n",
        "color_palette = [category_colors[cat] if cat in category_colors else '#000000' for cat in unique_categories]\n",
        "\n",
        "# 🔹 Separar São Paulo en un gráfico aparte (muestra todas sus categorías)\n",
        "df_pivot_sp = df_pivot[df_pivot['seller_state_full'] == 'São Paulo']\n",
        "df_pivot_rest = df_pivot[df_pivot['seller_state_full'] != 'São Paulo']\n",
        "\n",
        "# 🔹 Gráfico de São Paulo (todas las categorías)\n",
        "fig_sp = px.bar(\n",
        "    df_pivot_sp,\n",
        "    x='seller_state_full',\n",
        "    y=df_pivot_sp.columns[1:-1],  # Excluimos la columna de estados y la de total_compras\n",
        "    title='São Paulo: Categorías con Más Ventas',\n",
        "    labels={'seller_state_full': 'Estado', 'value': 'Total de Ventas'},\n",
        "    color_discrete_sequence=color_palette\n",
        ")\n",
        "\n",
        "# 🔹 Mejoramos la visualización de São Paulo\n",
        "fig_sp.update_layout(\n",
        "    barmode='stack',\n",
        "    xaxis_title='Estado',\n",
        "    yaxis_title='Total de Ventas',\n",
        "    xaxis_tickangle=0,  # Enderezamos etiquetas\n",
        "    legend_title='Categorías de Producto',\n",
        ")\n",
        "\n",
        "# 🔹 Gráfico del resto de los estados (solo 3 categorías + \"Otras categorías\")\n",
        "fig_rest = px.bar(\n",
        "    df_pivot_rest,\n",
        "    x='seller_state_full',\n",
        "    y=df_pivot_rest.columns[1:-1],\n",
        "    title='Top 9 Estados (excluyendo São Paulo): Categorías con Más Ventas',\n",
        "    labels={'seller_state_full': 'Estado', 'value': 'Total de Ventas'},\n",
        "    color_discrete_sequence=color_palette\n",
        ")\n",
        "\n",
        "# 🔹 Mejoramos la visualización de los demás estados\n",
        "fig_rest.update_layout(\n",
        "    barmode='stack',\n",
        "    xaxis_title='Estado',\n",
        "    yaxis_title='Total de Ventas',\n",
        "    xaxis_tickangle=0,  # Enderezamos etiquetas\n",
        "    legend_title='Categorías de Producto',\n",
        ")\n",
        "\n",
        "# 🔹 Mostrar gráficos\n",
        "fig_sp.show()\n",
        "fig_rest.show()\n"
      ],
      "metadata": {
        "id": "8-MUJD0ROiFR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PXudmWwS7Z3O"
      },
      "source": [
        "# ¿Cuál es el medio de pago predominante?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mfGPiYLu7Z3O"
      },
      "outputs": [],
      "source": [
        "# Diccionario de traducción de métodos de pago\n",
        "payment_translation = {\n",
        "    'credit_card': 'Tarjeta de Crédito',\n",
        "    'boleto': 'Boleto Bancario',\n",
        "    'voucher': 'Voucher',\n",
        "    'debit_card': 'Tarjeta de Débito',\n",
        "}\n",
        "\n",
        "# Contar la cantidad de cada método de pago\n",
        "metodos_pago = df[\"payment_type\"].value_counts()\n",
        "\n",
        "# Aplicar la traducción a los nombres\n",
        "metodos_pago.index = metodos_pago.index.map(payment_translation)\n",
        "\n",
        "# Convertir los valores a miles\n",
        "metodos_pago = metodos_pago / 1_000\n",
        "\n",
        "# Mostrar los métodos de pago en la consola\n",
        "print(\"\\nMétodos de pago más utilizados (en miles):\")\n",
        "print(metodos_pago)\n",
        "\n",
        "# Graficar\n",
        "plt.figure(figsize=(8,5))\n",
        "ax = sns.barplot(x=metodos_pago.index, y=metodos_pago.values, palette=['#001647'])\n",
        "\n",
        "# Agregar etiquetas en las barras con formato en miles\n",
        "for p in ax.patches:\n",
        "    ax.annotate(f\"{p.get_height():,.1f}K\",\n",
        "                (p.get_x() + p.get_width() / 2., p.get_height()),\n",
        "                ha='center', va='bottom', fontsize=10, fontweight='bold', color='black')\n",
        "\n",
        "# Personalizar el gráfico\n",
        "plt.title(\"Métodos de Pago Más Utilizados\")\n",
        "plt.xlabel(\"Método de Pago\")\n",
        "plt.ylabel(\"Cantidad de Transacciones (en miles)\")\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IkrXggHD7Z3P"
      },
      "source": [
        "## ¿Cuál es el gasto promedio atendiendo al número de cuotas?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E55dYEU0Wu-i"
      },
      "source": [
        "## !!! ¿Habría que usar payment_value o precio_ticket?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vWP60cGGWVQs"
      },
      "outputs": [],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df[['payment_value', 'precio_ticket']].describe())\n"
      ],
      "metadata": {
        "id": "KVEGqMYXWJ5I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px\n",
        "\n",
        "# Calcular la suma total de compras según el número de cuotas\n",
        "facturacion_cuotas = df.groupby(\"payment_installments\")[\"precio_ticket\"].sum().reset_index()\n",
        "\n",
        "# Ordenar por número de cuotas\n",
        "facturacion_cuotas = facturacion_cuotas.sort_values(\"payment_installments\")\n",
        "\n",
        "# Usar un solo color para todas las barras\n",
        "color_unico = \"#4285F4\"  # Azul corporativo para mejor presentación\n",
        "\n",
        "# Crear el gráfico de barras con la suma total de compras\n",
        "fig = px.bar(\n",
        "    facturacion_cuotas,\n",
        "    x=\"payment_installments\",\n",
        "    y=\"precio_ticket\",\n",
        "    text=\"precio_ticket\",  # Agregar etiquetas en las barras\n",
        "    color_discrete_sequence= ['#001647']  # Color único para todo el gráfico\n",
        ")\n",
        "\n",
        "# Personalizar el diseño\n",
        "fig.update_layout(\n",
        "    title=\"Total de Compras según Número de Cuotas\",\n",
        "    xaxis_title=\"Número de Cuotas\",\n",
        "    yaxis_title=\"Total de Compras\",\n",
        "    showlegend=False,  # Ocultamos la leyenda porque todas las barras son del mismo color\n",
        "    height=500,  # Ajustamos el tamaño del gráfico\n",
        "    width=1000  # Mejor para presentación\n",
        ")\n",
        "\n",
        "# Mostrar todas las etiquetas en el eje X\n",
        "fig.update_xaxes(tickmode=\"linear\", dtick=1)\n",
        "\n",
        "# Mejorar el formato de los valores en las barras (mostrar en miles o millones según el tamaño de los datos)\n",
        "fig.update_traces(texttemplate=\"%{text:,.0f}\", textposition=\"outside\")\n",
        "\n",
        "# Mostrar el gráfico\n",
        "fig.show()\n"
      ],
      "metadata": {
        "id": "mfCE0D89Xss6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MNowx0kh7Z3P"
      },
      "outputs": [],
      "source": [
        "pd.set_option('display.max_columns', None)\n",
        "df[df['payment_installments'] <1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L_UcJ3lV7Z3P"
      },
      "source": [
        "# ¿Cuál es la distribución de las calificaciones de los clientes en las reseñas?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p6_tiQMm7Z3Q"
      },
      "outputs": [],
      "source": [
        "import plotly.express as px\n",
        "\n",
        "# Contar la cantidad de cada review score\n",
        "review_counts = df['review_score'].value_counts().sort_index().reset_index()\n",
        "review_counts.columns = ['Review Score', 'Cantidad']\n",
        "review_counts[\"Review Score\"] = review_counts[\"Review Score\"].astype(int).astype(str)\n",
        "\n",
        "# Definir color único\n",
        "color_unico = '#001647'  # Azul oscuro\n",
        "\n",
        "# Crear el gráfico de barras con un solo color\n",
        "fig = px.bar(\n",
        "    review_counts,\n",
        "    x=\"Review Score\",\n",
        "    y=\"Cantidad\",\n",
        "    text=\"Cantidad\",  # Mostrar valores en las barras\n",
        "    color_discrete_sequence=[color_unico]  # Color único para todo el gráfico\n",
        ")\n",
        "\n",
        "# Personalizar el diseño\n",
        "fig.update_traces(textposition='outside', hoverinfo='x+y', hovertemplate='Score: %{x}<br>Cantidad: %{y}')\n",
        "fig.update_layout(\n",
        "    title=\"Distribución de Review Scores\",\n",
        "    xaxis_title=\"Review Score\",\n",
        "    yaxis_title=\"Cantidad\",\n",
        "    template=\"plotly_white\",\n",
        "    showlegend=False  # Ocultar la leyenda porque es un solo color\n",
        ")\n",
        "\n",
        "# Mostrar el gráfico\n",
        "fig.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rYo7DZKH7Z3Q"
      },
      "source": [
        "## ¿Qué categorías de productos tienen las mejores y peores calificaciones?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a5I4HG8o7Z3Q"
      },
      "outputs": [],
      "source": [
        "calificaciones_categoria = df.groupby('product_category_name_es')['review_score'].mean().sort_values()\n",
        "print(f\"El top 5 de las categorías con mejor calificación: {calificaciones_categoria.round(2).sort_values(ascending = False).head()}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HtYN1PZR7Z3Q"
      },
      "outputs": [],
      "source": [
        "print(f\"El top 5 de las categorías con peor calificación: {calificaciones_categoria.round(2).head()}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3vpYxsQn7Z3V"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Calcular la calificación promedio por categoría y ordenarlas\n",
        "calificaciones_categoria = df.groupby('product_category_name_es')['review_score'].mean().sort_values()\n",
        "\n",
        "# Definir un solo color azul oscuro\n",
        "color_unico = '#001647'\n",
        "\n",
        "# Crear el gráfico de barras con un solo color\n",
        "plt.figure(figsize=(16, 8))\n",
        "calificaciones_categoria.plot(kind='bar', color=color_unico)\n",
        "plt.title('Calificación Promedio por Categoría de Producto')\n",
        "plt.xlabel('Categoría de Producto')\n",
        "plt.ylabel('Calificación Promedio')\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q5u5GXVa7Z3W"
      },
      "source": [
        "## ¿Cómo se distribuyen las calificaciones por Estado?"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Agrupar y calcular la distribución porcentual de calificaciones por estado\n",
        "df_review_state = df.groupby('seller_state_full')['review_score'].value_counts().unstack().fillna(0)\n",
        "df_review_state_pct = df_review_state.div(df_review_state.sum(axis=1), axis=0) * 100\n",
        "df_review_state_pct = df_review_state_pct.round(2)\n",
        "\n",
        "# **Ordenar las columnas de menor a mayor para que 1 esté abajo y 5 arriba en la gráfica**\n",
        "df_review_state_pct = df_review_state_pct[[1, 2, 3, 4, 5]]\n",
        "\n",
        "# Definir los colores: Rojo para calificaciones ≤ 3, Azul para > 3\n",
        "color_map = {\n",
        "    1: '#e64e36',  # Rojo\n",
        "    2: '#e64e36',  # Rojo\n",
        "    3: '#e64e36',  # Rojo\n",
        "    4: '#001647',  # Azul\n",
        "    5: '#001647'   # Azul\n",
        "}\n",
        "\n",
        "# Obtener los colores en el orden correcto (para que 5 quede arriba)\n",
        "colores = [color_map[score] for score in df_review_state_pct.columns]\n",
        "\n",
        "# Crear el gráfico de barras apiladas con los colores asignados\n",
        "df_review_state_pct.plot(\n",
        "    kind='bar',\n",
        "    stacked=True,\n",
        "    color=colores,\n",
        "    figsize=(12,6)\n",
        ")\n",
        "\n",
        "# Personalizar el diseño del gráfico\n",
        "plt.title('Distribución porcentual de las Calificaciones por Estado')\n",
        "plt.xlabel('Estado')\n",
        "plt.ylabel('Porcentaje (%)')\n",
        "\n",
        "# **Corregir el orden de la leyenda (de 5 a 1)**\n",
        "handles, labels = plt.gca().get_legend_handles_labels()\n",
        "plt.legend(list(reversed(handles)), list(reversed(labels)), title=\"Review Score\", loc=\"upper right\", bbox_to_anchor=(1.2,1))\n",
        "\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "ieQzxrjpZk2O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qE40QmOE7Z3W"
      },
      "source": [
        "## ¿Los clientes que dejan comentarios negativos tienen patrones de compra distintos a los que dejan comentarios positivos?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NnKwovtI7Z3X"
      },
      "outputs": [],
      "source": [
        "reseñas_positivas = df[df['review_score'] >= 4]\n",
        "reseñas_neutras = df[df['review_score'] ==3]\n",
        "reseñas_negativas = df[df['review_score'] <= 2]\n",
        "sin_reseña = df[df['review_score'].isnull()]\n",
        "\n",
        "print(\"Promedio de valor de pago en reseñas positivas:\", reseñas_positivas['payment_value'].mean().round(2))\n",
        "print(\"Promedio de valor de pago en reseñas neutras:\", reseñas_neutras['payment_value'].mean().round(2))\n",
        "print(\"Promedio de valor de pago en reseñas negativas:\", reseñas_negativas['payment_value'].mean().round(2))\n",
        "print(\"Promedio de valor de pago sin reseña:\", sin_reseña['payment_value'].mean().round(2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FtuMrBPF7Z3X"
      },
      "source": [
        "## ¿Cómo impacta el tiempo de entrega en la calificación del pedido?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A4cplRbdhoR_"
      },
      "source": [
        "Creo columna delivery_delay, indica la diferencia entre la fecha estimada de entrega y la fecha real de entrega.\n",
        "Creo las columnas on_time, late_delivery que de manera independiente informan si la entrega se hizo a tiempo o tarde"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ID1llvmB7Z3X"
      },
      "outputs": [],
      "source": [
        "df['delivery_delay'] = (df['order_delivered_customer_date'] - df['order_estimated_delivery_date']).dt.days\n",
        "df['on_time'] = df['delivery_delay'] <= 0\n",
        "df['late_delivery'] = df['delivery_delay'] > 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ku6mV_-m7Z3X"
      },
      "outputs": [],
      "source": [
        "df['late_delivery'] = df['late_delivery'].map({False: \"on_time\", True: \"late_delivery\"})\n",
        "# Agrupar por review_score y estado de entrega\n",
        "df_delivery_review = df.groupby(['late_delivery', 'review_score']).size().unstack().fillna(0)\n",
        "\n",
        "# Convertir a porcentaje\n",
        "df_delivery_review = df_delivery_review.div(df_delivery_review.sum(axis=1), axis=0) * 100\n",
        "\n",
        "# Graficar\n",
        "fig = px.bar(\n",
        "    df_delivery_review.T,\n",
        "    barmode=\"stack\",\n",
        "    color_discrete_sequence=['#e64e36', '#001647', '#c8906d', '#779e3d', '#0a4ee4']\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\"Impacto de los pedidos tardíos y en tiempo en las Reseñas\",\n",
        "    xaxis_title=\"Calificación de la Reseña\",\n",
        "    yaxis_title=\"Porcentaje (%)\",\n",
        "    xaxis=dict(type=\"category\"),\n",
        "    legend_title=\"Entrega a Tiempo\",\n",
        ")\n",
        "\n",
        "fig.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CUXd2_k47Z3Y"
      },
      "source": [
        "# ¿Cuáles son los plazos en las distintas fases de envío?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DxREQH5V7Z3Y"
      },
      "outputs": [],
      "source": [
        "\n",
        "print('\\033[1mTiempo total de procesamiento del pedido: medir la eficiencia de todo el proceso logístico, desde la compra hasta la entrega final.\\033[0m')\n",
        "df['processing_time'] = (df['order_delivered_customer_date'] - df['order_purchase_timestamp']).dt.days\n",
        "max_processing_time = df.sort_values(by='processing_time', ascending=False).iloc[0]['processing_time']\n",
        "min_processing_time = df.sort_values(by='processing_time', ascending=False).iloc[-1]['processing_time']\n",
        "mean_processing_time = df['processing_time'].mean().round(2)\n",
        "print(f\"Tiempo total de procesamiento del pedido máximo: {max_processing_time}\")\n",
        "print(f\"Tiempo total de procesamiento del pedido mínimo: {min_processing_time}\")\n",
        "print(f\"Tiempo total de procesamiento del pedido medio: {mean_processing_time}\")\n",
        "print(\"_\" * 20)\n",
        "\n",
        "print('\\033[1mTiempo de aprobación del pedido:Identificar si hay un retraso en la aprobación de pedidos que podría estar afectando los tiempos generales.\\033[0m')\n",
        "df['approval_time'] = (df['order_approved_at'] - df['order_purchase_timestamp']).dt.days\n",
        "max_approval_time = df.sort_values(by='approval_time', ascending=False).iloc[0]['approval_time']\n",
        "min_approval_time = df.sort_values(by='approval_time', ascending=False).iloc[-1]['approval_time']\n",
        "mean_approval_time = df['approval_time'].mean().round(2)\n",
        "print(f\"Tiempo total de aprobación del pedido máximo: {max_approval_time}\")\n",
        "print(f\"Tiempo total de aprobación del pedido mínimo: {min_approval_time}\")\n",
        "print(f\"Tiempo total de aprobación del pedido medio: {mean_approval_time}\")\n",
        "print(\"_\" * 20)\n",
        "\n",
        "print('\\033[1mTiempo de preparación antes de la entrega al transportista:Un retraso en esta fase puede indicar problemas en la preparación de los productos o en la gestión de inventario.\\033[0m')\n",
        "df['prep_time'] = (df['order_delivered_carrier_date'] - df['order_approved_at']).dt.days\n",
        "max_prep_time = df.sort_values(by='prep_time', ascending=False).iloc[0]['prep_time']\n",
        "min_prep_time = df.sort_values(by='prep_time', ascending=False).iloc[-1]['prep_time']\n",
        "mean_prep_time = df['prep_time'].mean().round(2)\n",
        "print(f\"Tiempo total de preparación antes de la entrega al transportista máximo: {max_prep_time}\")\n",
        "print(f\"Tiempo total de preparación antes de la entrega al transportista mínimo: {min_prep_time}\")\n",
        "print(f\"Tiempo total de preparación antes de la entrega al transportista medio: {mean_prep_time}\")\n",
        "print(\"_\" * 20)\n",
        "\n",
        "print('\\033[1mCumplimiento con la fecha límite de envío:  Identificar si hay retrasos en la fase de envío que podrían afectar la capacidad de cumplir con las fechas de entrega estimadas.\\033[0m')\n",
        "df['shipping_late_days'] = (df['order_delivered_carrier_date'] - df['shipping_limit_date']).dt.days\n",
        "max_shipping_late_days = df.sort_values(by='shipping_late_days', ascending=False).iloc[0]['shipping_late_days']\n",
        "min_shipping_late_days = df.sort_values(by='shipping_late_days', ascending=False).iloc[-1]['shipping_late_days']\n",
        "mean_shipping_late_days = df['shipping_late_days'].mean().round(2)\n",
        "print(f\"Retraso en la dase de envío máximo: {max_shipping_late_days}\")\n",
        "print(f\"Retraso en la dase de envío máximo mínimo: {min_shipping_late_days}\")\n",
        "print(f\"Retraso en la dase de envío máximo medio: {mean_shipping_late_days}\")\n",
        "print(\"_\" * 20)\n",
        "\n",
        "print('\\033[1mCumplimiento con la fecha estimada de entrega: permite ver si los pedidos llegaron dentro de los tiempos estimados, lo cual es fundamental para la satisfacción del cliente.\\033[0m')\n",
        "df['delivery_delay'] = (df['order_delivered_customer_date'] - df['order_estimated_delivery_date']).dt.days\n",
        "max_delivery_delay = df.sort_values(by='delivery_delay', ascending=False).iloc[0]['delivery_delay']\n",
        "min_delivery_delay = df.sort_values(by='delivery_delay', ascending=False).iloc[-1]['delivery_delay']\n",
        "mean_delivery_delay = df['delivery_delay'].mean().round(2)\n",
        "print(f\"Mayor retraso en la fecha estimada de entrega : {max_delivery_delay}\")\n",
        "print(f\"Mayor adelanto en la fecha estimada de entrega: {min_delivery_delay}\")\n",
        "print(f\"Cumplimiento con la fecha estimada de entrega medio: {mean_delivery_delay}\")\n",
        "print(\"_\" * 20)\n",
        "print('\\033[1mTiempo de entrega real frente a estimada: Es útil para mejorar las estimaciones de tiempo y detectar problemas recurrentes en la cadena de suministro.\\033[0m')\n",
        "df['on_time'] = df['delivery_delay'] <= 0\n",
        "a_tiempo =  df['on_time'].sum()\n",
        "print(f\"El número de entregas en plazo es de: {a_tiempo}\")\n",
        "print(\"_\" * 20)\n",
        "print('\\033[1mAnálisis de pedidos tardíos:Determinar qué porcentaje de pedidos llegan tarde, lo cual es crucial para mejorar el servicio al cliente y la logística.\\033[0m')\n",
        "df['late_delivery'] = df['delivery_delay'] > 0\n",
        "retrasos = df['late_delivery'].sum()\n",
        "print(f\"El número de entregas fuera de plazo es de: {retrasos}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Xj7fuPoyhoSF"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "def plot_all(df):\n",
        "    fig, axes = plt.subplots(3, 3, figsize=(18, 14))\n",
        "\n",
        "    # 🔹 1. Violin Plot: Distribución del Tiempo de Procesamiento\n",
        "    sns.violinplot(x=df['processing_time'], inner='quartile', color='#E64E36', ax=axes[0, 0])\n",
        "    axes[0, 0].set_title('Distribución del Tiempo de Procesamiento', fontsize=12)\n",
        "    axes[0, 0].set_xlabel('Tiempo de Procesamiento (días)', fontsize=10)\n",
        "    axes[0, 0].grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "    # 🔹 2. Boxplot: Tiempo de Aprobación\n",
        "    sns.boxplot(x=df['approval_time'], color='#779E3D', ax=axes[0, 1])\n",
        "    mean_approval = df['approval_time'].mean()\n",
        "    axes[0, 1].axvline(mean_approval, color='black', linestyle='--', label=f'Media: {mean_approval:.2f} días')\n",
        "    axes[0, 1].legend()\n",
        "    axes[0, 1].set_title('Distribución del Tiempo de Aprobación', fontsize=12)\n",
        "    axes[0, 1].grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "    # 🔹 3. Boxplot: Tiempo de Preparación\n",
        "    sns.boxplot(x=df['prep_time'], color='#C8906D', ax=axes[0, 2])\n",
        "    axes[0, 2].set_title('Distribución del Tiempo de Preparación', fontsize=12)\n",
        "    axes[0, 2].grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "    # 🔹 4. Histograma: Tiempo de Preparación\n",
        "    sns.histplot(df['prep_time'], kde=True, bins=30, color='#C8906D', ax=axes[1, 0])\n",
        "    axes[1, 0].set_title('Histograma del Tiempo de Preparación', fontsize=12)\n",
        "    axes[1, 0].grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "    # 🔹 5. Boxplot: Retrasos en Envío\n",
        "    sns.boxplot(x=df['shipping_late_days'], color='#E64E36', ax=axes[1, 1])\n",
        "    axes[1, 1].set_title('Distribución de Retrasos en Envío', fontsize=12)\n",
        "    axes[1, 1].set_xscale('log')  # 🔹 Escala logarítmica para mayor claridad\n",
        "    axes[1, 1].grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "    # 🔹 6. Histograma: Retrasos en Envío\n",
        "    sns.histplot(df['shipping_late_days'], kde=True, bins=30, color='#E64E36', ax=axes[1, 2])\n",
        "    axes[1, 2].set_title('Histograma de Retrasos en Envío', fontsize=12)\n",
        "    axes[1, 2].set_xscale('log')  # 🔹 Escala logarítmica\n",
        "    axes[1, 2].grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "    # 🔹 7. Boxplot: Retrasos/Adelantos en Entregas\n",
        "    sns.boxplot(x=df['delivery_delay'], color='#87C7AD', ax=axes[2, 0])\n",
        "    axes[2, 0].set_title('Distribución de Retrasos/Adelantos', fontsize=12)\n",
        "    axes[2, 0].grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "    # 🔹 8. Histograma: Retrasos/Adelantos\n",
        "    sns.histplot(df['delivery_delay'], kde=True, bins=30, color='#87C7AD', ax=axes[2, 1])\n",
        "    axes[2, 1].set_title('Histograma de Retrasos/Adelantos', fontsize=12)\n",
        "    axes[2, 1].grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "    # 🔹 9. Gráfico de Barras: Entregas a Tiempo vs. Tardías\n",
        "    on_time = df['on_time'].sum()\n",
        "    late = df['late_delivery'].sum()\n",
        "    total = on_time + late\n",
        "    bars = axes[2, 2].bar(['A Tiempo', 'Tardío'], [on_time, late], color=['#0A4EE4', '#E64E36'])\n",
        "\n",
        "    # 🔹 Mejorar visualización\n",
        "    axes[2, 2].set_title('Entregas a Tiempo vs. Tardías', fontsize=12)\n",
        "    axes[2, 2].set_ylim(0, total * 1.1)  # Espacio para etiquetas\n",
        "    axes[2, 2].grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "    # 🔹 Agregar porcentajes en las barras\n",
        "    for bar, value in zip(bars, [on_time, late]):\n",
        "        axes[2, 2].text(\n",
        "            bar.get_x() + bar.get_width() / 2,\n",
        "            bar.get_height() + (total * 0.02),  # Posición más clara\n",
        "            f'{(value / total * 100):.2f}%',\n",
        "            ha='center', color='black', fontweight='bold', fontsize=10\n",
        "        )\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4bA6Tm3JhoSG"
      },
      "outputs": [],
      "source": [
        "plot_all(df)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 📊 Datos\n",
        "on_time = df['on_time'].sum()\n",
        "late = df['late_delivery'].sum()\n",
        "total = on_time + late\n",
        "\n",
        "# 📍 Configurar el gráfico\n",
        "fig, ax = plt.subplots(figsize=(6, 5))\n",
        "\n",
        "# 📊 Gráfico de barras con colores mejorados\n",
        "bars = ax.bar(\n",
        "    ['A Tiempo', 'Tardío'],\n",
        "    [on_time, late],\n",
        "    color=['#4A90E2', '#E64E36'],  # Azul para a tiempo, rojo para tardío\n",
        "    edgecolor='black',\n",
        "    linewidth=1\n",
        ")\n",
        "\n",
        "# 📍 Etiquetas sobre las barras con número total y porcentaje\n",
        "for bar, value in zip(bars, [on_time, late]):\n",
        "    percentage = (value / total) * 100\n",
        "    ax.text(\n",
        "        bar.get_x() + bar.get_width() / 2,\n",
        "        bar.get_height() + (total * 0.01),  # Ajustar la altura\n",
        "        f'{value:,} ({percentage:.2f}%)',\n",
        "        ha='center', color='black', fontweight='bold', fontsize=10\n",
        "    )\n",
        "\n",
        "# 🎨 Personalización del gráfico\n",
        "ax.set_title('Entregas a Tiempo vs. Tardías', fontsize=12, fontweight='bold')\n",
        "ax.set_ylabel('Cantidad de Entregas', fontsize=10)\n",
        "ax.set_ylim(0, total * 1.1)  # Ajuste de escala para mejor visualización\n",
        "ax.grid(axis='y', linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "# 🔹 Eliminar bordes no necesarios\n",
        "for spine in [\"top\", \"right\"]:\n",
        "    ax.spines[spine].set_visible(False)\n",
        "\n",
        "# 📌 Mostrar el gráfico\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "9AcBFN_B40M8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ✅ Asegurar que las fechas sean tipo datetime\n",
        "df['order_delivered_customer_date'] = pd.to_datetime(df['order_delivered_customer_date'])\n",
        "df['order_estimated_delivery_date'] = pd.to_datetime(df['order_estimated_delivery_date'])\n",
        "\n",
        "# ✅ Calcular retraso en días\n",
        "df['delivery_delay_days'] = (df['order_delivered_customer_date'] - df['order_estimated_delivery_date']).dt.days\n",
        "\n",
        "# ✅ Agrupar por día y calcular promedio de retraso\n",
        "delay_per_day = df.groupby('order_delivered_customer_date')['delivery_delay_days'].mean().reset_index()\n",
        "\n",
        "# ✅ Aplicar un promedio móvil para suavizar\n",
        "delay_per_day['rolling_avg'] = delay_per_day['delivery_delay_days'].rolling(window=7).mean()\n",
        "\n",
        "# ✅ Configurar gráfico\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(delay_per_day['order_delivered_customer_date'], delay_per_day['rolling_avg'], linestyle='-', color='#E64E36', label=\"Retraso (Promedio Móvil 7 días)\")\n",
        "\n",
        "# 🎨 Mejorar visualización\n",
        "plt.title('Retraso Promedio de Pedidos por Día', fontsize=14, fontweight='bold')\n",
        "plt.xlabel('Fecha de Entrega', fontsize=12)\n",
        "plt.ylabel('Días de Retraso', fontsize=12)\n",
        "plt.axhline(0, color='black', linestyle='--', linewidth=1, label=\"Entrega a Tiempo\")\n",
        "plt.legend()\n",
        "plt.xticks(rotation=45)\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "# 📌 Mostrar gráfico\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "xWDuMuO79qhq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iuK0LLAe-UXg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wz3dGKBM7Z3Z"
      },
      "source": [
        "# ¿Cuáles son las tendencias de compras a lo largo del año?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sj1lz6aN7Z3a"
      },
      "outputs": [],
      "source": [
        "pedidos_diarios = df.groupby(df['order_purchase_timestamp'].dt.date).size().reset_index()\n",
        "pedidos_diarios.columns = ['Fecha', 'Número de pedidos']\n",
        "\n",
        "fig = px.line(\n",
        "    pedidos_diarios,\n",
        "    x='Fecha',\n",
        "    y='Número de pedidos',\n",
        "    title=\"Tendencia diaria de pedidos\"\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    xaxis_tickangle=-45,\n",
        "    xaxis_title=\"Fecha\",\n",
        "    yaxis_title=\"Número de pedidos\",\n",
        "    template=\"plotly_white\"\n",
        ")\n",
        "\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "89UYfIvBhoSI"
      },
      "source": [
        "Creamos la columna mes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DMdIpXeQ7Z3a"
      },
      "outputs": [],
      "source": [
        "df['mes'] = df['order_purchase_timestamp'].dt.to_period('M')\n",
        "pedidos_mensuales = df.groupby(\"mes\")[\"order_id\"].count()\n",
        "\n",
        "fig = px.line(\n",
        "    x=pedidos_mensuales.index.astype(str),\n",
        "    y=pedidos_mensuales.values,\n",
        "    labels={'x': 'Fecha', 'y': 'Número de pedidos'},\n",
        "    title=\"Tendencia mensual de pedidos\"\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    xaxis_tickangle=-45,\n",
        "    xaxis_title=\"Fecha\",\n",
        "    yaxis_title=\"Número de pedidos\",\n",
        "    template=\"plotly_white\"\n",
        ")\n",
        "\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fERWQssW7Z3a"
      },
      "outputs": [],
      "source": [
        "import plotly.express as px\n",
        "\n",
        "# Asegurar que la columna de categorías esté en español (si ya ha sido traducida)\n",
        "categoria_col = 'product_category_name_es' if 'product_category_name_es' in df.columns else 'product_category_name'\n",
        "\n",
        "# Agrupar por mes y categoría, contando los pedidos\n",
        "df_ventas_mensuales = df.groupby(['mes', categoria_col]).size().reset_index(name='Pedidos')\n",
        "\n",
        "# Asegurar que la columna \"mes\" sea string para evitar problemas con el eje X\n",
        "df_ventas_mensuales['mes'] = df_ventas_mensuales['mes'].astype(str)\n",
        "\n",
        "# Seleccionar el **Top 3 categorías** más vendidas en cada mes\n",
        "df_top3 = df_ventas_mensuales.groupby('mes', group_keys=False).apply(lambda x: x.nlargest(3, 'Pedidos')).reset_index(drop=True)\n",
        "\n",
        "# **Definir una paleta de colores personalizada**\n",
        "colores_personalizados = [\n",
        "    \"#0A4EE4\",  # Azul intenso\n",
        "    \"#E64E36\",  # Rojo vibrante\n",
        "    \"#F09F29\",  # Naranja\n",
        "    \"#779E3D\",  # Verde\n",
        "    \"#001647\",  # Azul oscuro\n",
        "    \"#C8906D\",  # Marrón\n",
        "    \"#87C7AD\",  # Verde agua\n",
        "    \"#DF9FC7\",  # Rosa pastel\n",
        "    \"#5D3A9B\",  # Púrpura\n",
        "    \"#A41623\",  # Rojo oscuro\n",
        "    \"#FFB400\",  # Amarillo fuerte\n",
        "    \"#3F7CAC\",  # Azul cielo\n",
        "]\n",
        "\n",
        "# Obtener las categorías únicas y asignarles un color único\n",
        "categorias_unicas = df_top3[categoria_col].unique()\n",
        "color_map = {categoria: color for categoria, color in zip(categorias_unicas, colores_personalizados)}\n",
        "\n",
        "# Crear el gráfico de barras apiladas con colores personalizados\n",
        "fig = px.bar(\n",
        "    df_top3,\n",
        "    x='mes',\n",
        "    y='Pedidos',\n",
        "    color=categoria_col,\n",
        "    title='Top 3 Categorías Más Vendidas por Mes',\n",
        "    labels={'mes': 'Mes', 'Pedidos': 'Número de Pedidos', categoria_col: 'Categoría de Producto'},\n",
        "    color_discrete_map=color_map  # Asignar colores personalizados\n",
        ")\n",
        "\n",
        "# Mejorar la visualización del gráfico\n",
        "fig.update_layout(\n",
        "    xaxis_tickangle=45,  # Inclinar etiquetas del eje X\n",
        "    barmode='stack',  # Apilar las barras\n",
        "    legend_title='Categoría de Producto',\n",
        "    height=600,  # Ajustar altura para mejor visibilidad\n",
        "    width=1000  # Hacerlo más ancho para evitar superposición\n",
        ")\n",
        "\n",
        "# Mostrar el gráfico\n",
        "fig.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2jHOTSpT7Z3a"
      },
      "source": [
        "# Aumento de clientes por meses"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4lvrevlH7Z3a"
      },
      "outputs": [],
      "source": [
        "# Agrupar por mes y contar clientes únicos\n",
        "clientes_por_mes = df.groupby('mes')['customer_unique_id'].nunique().reset_index(name='clientes_unicos')\n",
        "\n",
        "# Convertir la columna \"mes\" a tipo datetime para ordenar correctamente\n",
        "clientes_por_mes['mes_dt'] = clientes_por_mes['mes'].dt.to_timestamp()\n",
        "clientes_por_mes = clientes_por_mes.sort_values('mes_dt')\n",
        "\n",
        "# Definir el color único (azul oscuro)\n",
        "color_unico = '#001647'\n",
        "\n",
        "# Crear el gráfico de barras con un solo color\n",
        "fig = px.bar(\n",
        "    clientes_por_mes,\n",
        "    x=clientes_por_mes['mes'].astype(str),\n",
        "    y='clientes_unicos',\n",
        "    text='clientes_unicos',  # Agregar etiquetas en las barras\n",
        "    color_discrete_sequence=[color_unico]  # Color único para todas las barras\n",
        ")\n",
        "\n",
        "# Mejorar la visualización del gráfico\n",
        "fig.update_traces(textposition='outside')\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\"Clientes Únicos por Mes\",\n",
        "    xaxis_title=\"Mes y Año\",\n",
        "    yaxis_title=\"Clientes Únicos\",\n",
        "    xaxis=dict(\n",
        "        categoryorder='array',\n",
        "        categoryarray=clientes_por_mes['mes'].astype(str),\n",
        "        tickmode='array',\n",
        "        tickvals=clientes_por_mes['mes'].astype(str),\n",
        "        ticktext=clientes_por_mes['mes'].astype(str)\n",
        "    ),\n",
        "    showlegend=False  # Ocultar leyenda ya que solo hay un color\n",
        ")\n",
        "\n",
        "# Mostrar el gráfico\n",
        "fig.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9DPUUNDf7Z3b"
      },
      "source": [
        "# Aumento de clientes nuevos por meses"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3KadR6u77Z3b"
      },
      "outputs": [],
      "source": [
        "clientes_nuevos_por_mes = []\n",
        "meses_ordenados = sorted(df['mes'].unique())\n",
        "\n",
        "for mes_actual in meses_ordenados:\n",
        "    clientes_mes = df[df['mes'] == mes_actual]['customer_unique_id'].unique()\n",
        "    clientes_anteriores = df[df['mes'] < mes_actual]['customer_unique_id'].unique()\n",
        "\n",
        "    nuevos = set(clientes_mes) - set(clientes_anteriores)\n",
        "    clientes_nuevos_por_mes.append({'mes': mes_actual, 'clientes_nuevos': len(nuevos)})\n",
        "\n",
        "df_clientes_nuevos = pd.DataFrame(clientes_nuevos_por_mes)\n",
        "df_clientes_nuevos['mes_dt'] = df_clientes_nuevos['mes'].dt.to_timestamp()\n",
        "df_clientes_nuevos = df_clientes_nuevos.sort_values('mes_dt')\n",
        "\n",
        "import plotly.express as px\n",
        "\n",
        "# Crear el gráfico de barras con un solo color azul oscuro\n",
        "fig = px.bar(\n",
        "    df_clientes_nuevos,\n",
        "    x=df_clientes_nuevos['mes'].astype(str),\n",
        "    y='clientes_nuevos',\n",
        "    text='clientes_nuevos',  # Mostrar valores en las barras\n",
        "    color_discrete_sequence=['#001647']  # Azul oscuro para todas las barras\n",
        ")\n",
        "\n",
        "# Mejorar la visualización del gráfico\n",
        "fig.update_traces(textposition='outside')\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\"Incremento de Clientes Nuevos por Mes\",\n",
        "    xaxis_title=\"Mes y Año\",\n",
        "    yaxis_title=\"Número de Clientes Nuevos\",\n",
        "    xaxis=dict(\n",
        "        categoryorder='array',\n",
        "        categoryarray=df_clientes_nuevos['mes'].astype(str),\n",
        "        tickmode='array',\n",
        "        tickvals=df_clientes_nuevos['mes'].astype(str),\n",
        "        ticktext=df_clientes_nuevos['mes'].astype(str)\n",
        "    ),\n",
        "    showlegend=False  # Ocultar la leyenda ya que solo hay un color\n",
        ")\n",
        "\n",
        "# Mostrar el gráfico\n",
        "fig.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bVZ-248s7Z3b"
      },
      "source": [
        "## Black Friday como fecha estratégica en el aumento de ventas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WtCGyj687Z3b"
      },
      "outputs": [],
      "source": [
        "ventas_diarias = df.groupby(df['order_purchase_timestamp'].dt.date).agg(\n",
        "    total_pedidos = ('order_id', 'nunique'),\n",
        "    total_ventas=('price', 'sum'),\n",
        "    total_beneficio=('beneficio_ticket', 'sum')\n",
        ").reset_index()\n",
        "\n",
        "top_10_dias = ventas_diarias.sort_values(by='total_ventas', ascending=False).head(10)\n",
        "top_10_dias['categoria_mas_vendida'] = top_10_dias['order_purchase_timestamp'].apply(\n",
        "    lambda x: df[df['order_purchase_timestamp'].dt.date == x]['product_category_name'].mode()[0]\n",
        ")\n",
        "\n",
        "top_10_dias[['order_purchase_timestamp', 'total_ventas', 'total_beneficio','total_pedidos', 'categoria_mas_vendida']]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "n-cJmcwv7Z3b"
      },
      "outputs": [],
      "source": [
        "df_black_friday = df[(df['order_purchase_timestamp'] >= pd.to_datetime('2017-11-24 00:00:00')) & (df['order_purchase_timestamp'] <= pd.to_datetime('2017-11-24 23:59:59'))]\n",
        "df_black_friday.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "F33vpToM7Z3c"
      },
      "outputs": [],
      "source": [
        "clientes_black_friday = df_black_friday['customer_unique_id'].unique()\n",
        "\n",
        "compras_clientes_bf = df[df['customer_unique_id'].isin(clientes_black_friday)].copy()\n",
        "\n",
        "primeras_compras = compras_clientes_bf.groupby('customer_unique_id')['order_purchase_timestamp'].min()\n",
        "\n",
        "compras_clientes_bf['compra_antes'] = compras_clientes_bf['order_purchase_timestamp'] < '2017-11-24'\n",
        "compras_clientes_bf['compra_despues'] = compras_clientes_bf['order_purchase_timestamp'] >= '2017-11-25'\n",
        "\n",
        "clientes_nuevos_bf = ((primeras_compras >= '2017-11-24 00:00:00') &\n",
        "                       (primeras_compras <= '2017-11-24 23:59:59')).sum()\n",
        "clientes_antes_bf = compras_clientes_bf.groupby('customer_unique_id')['compra_antes'].any().sum()\n",
        "clientes_despues_bf = compras_clientes_bf.groupby('customer_unique_id')['compra_despues'].any().sum()\n",
        "\n",
        "compras_despues = df[df['order_purchase_timestamp'] > '2017-11-24'][['customer_unique_id', 'order_purchase_timestamp']]\n",
        "\n",
        "tiempo_recompra = df_black_friday.merge(compras_despues, on='customer_unique_id', suffixes=('_blackfriday', '_despues'))\n",
        "tiempo_recompra['dias_para_recompra'] = (tiempo_recompra['order_purchase_timestamp_despues'] -\n",
        "                                         tiempo_recompra['order_purchase_timestamp_blackfriday']).dt.days\n",
        "dias_promedio_recompra = tiempo_recompra['dias_para_recompra'].mean()\n",
        "\n",
        "clientes_antes_y_despues_bf = set(compras_clientes_bf[compras_clientes_bf['compra_antes']]['customer_unique_id']) & \\\n",
        "                              set(compras_clientes_bf[compras_clientes_bf['compra_despues']]['customer_unique_id'])\n",
        "\n",
        "print(f\"Clientes cuya primera compra fue en Black Friday: {clientes_nuevos_bf}\")\n",
        "print(f\"Compradores en Black Friday que habían comprado antes: {clientes_antes_bf}\")\n",
        "print(f\"Compradores en Black Friday que compraron después: {clientes_despues_bf}\")\n",
        "print(f\"Clientes que ya habían comprado, compraron en  Black Friday y volvieron a comprar después: {len(clientes_antes_y_despues_bf)}\")\n",
        "print(f\"Tiempo promedio para la recompra después de Black Friday: {dias_promedio_recompra:.2f} días\")\n",
        "print(f\"Porcentaje de compradores en Black Friday que compraron antes y después: {len(clientes_antes_y_despues_bf) / clientes_despues_bf * 100:.2f}%\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1lIdk2tR7Z3c"
      },
      "outputs": [],
      "source": [
        "productos_black_friday = df_black_friday['product_id'].unique()\n",
        "\n",
        "ventas_dias_antes_bf = df[(df['product_id'].isin(productos_black_friday)) & (df['order_purchase_timestamp'] < '2017-11-24')]\n",
        "ventas_dias_despues_bf = df[(df['product_id'].isin(productos_black_friday)) & (df['order_purchase_timestamp'] >= '2017-11-25')]\n",
        "ventas_otros_dias_bf = df[(df['product_id'].isin(productos_black_friday)) & (df['order_purchase_timestamp'] != '2017-11-24')]\n",
        "\n",
        "precio_medio_black_friday = df_black_friday['price'].mean()\n",
        "precio_medio_dias_antes = ventas_dias_antes_bf['price'].mean()\n",
        "precio_medio_dias_despues = ventas_dias_despues_bf['price'].mean()\n",
        "precio_medio_otros_dias = ventas_otros_dias_bf['price'].mean()\n",
        "\n",
        "print(f\"Precio medio de estos productos en Black Friday: {precio_medio_black_friday:.2f}\")\n",
        "print(f\"Precio medio de estos productos en días anteriores: {precio_medio_dias_antes:.2f}\")\n",
        "print(f\"Precio medio de estos productos en días posteriores: {precio_medio_dias_despues:.2f}\")\n",
        "\n",
        "if precio_medio_black_friday < precio_medio_otros_dias:\n",
        "    print(\"\\nEstos productos se costaron más baratos en Black Friday.\")\n",
        "else:\n",
        "    print(\"\\nEstos productos NO costaron más baratos en Black Friday.\")\n",
        "\n",
        "print('-'*50)\n",
        "\n",
        "pago_medio_black_friday = df_black_friday['payment_value'].mean()\n",
        "pago_medio_dias_antes = ventas_dias_antes_bf['payment_value'].mean()\n",
        "pago_medio_dias_despues = ventas_dias_despues_bf['payment_value'].mean()\n",
        "pago_medio_otros_dias = ventas_otros_dias_bf['payment_value'].mean()\n",
        "\n",
        "print(f\"Los clientes pagaron de media por estos productos en Black Friday: {pago_medio_black_friday:.2f}\")\n",
        "print(f\"Los clientes pagaron de media por estos productos en días anteriores: {pago_medio_dias_antes:.2f}\")\n",
        "print(f\"Los clientes pagaron de media por estos productos en días posteriores: {pago_medio_dias_despues:.2f}\")\n",
        "\n",
        "if pago_medio_black_friday < pago_medio_otros_dias:\n",
        "    print(\"\\nEstos productos se vendieron más baratos en Black Friday.\")\n",
        "else:\n",
        "    print(\"\\nEstos productos NO se vendieron más baratos en Black Friday.\")\n",
        "\n",
        "print('-'*50)\n",
        "\n",
        "coste_entrega_medio_black_friday = df_black_friday['freight_value'].mean()\n",
        "coste_entrega_medio_dias_antes = ventas_dias_antes_bf['freight_value'].mean()\n",
        "coste_entrega_medio_dias_despues = ventas_dias_despues_bf['freight_value'].mean()\n",
        "coste_entrega_medio_otros_dias = ventas_otros_dias_bf['freight_value'].mean()\n",
        "\n",
        "print(f\"El coste de entrega medio de estos productos en Black Friday: {coste_entrega_medio_black_friday:.2f}\")\n",
        "print(f\"El coste de entrega medio de estos productos en días anteriores: {coste_entrega_medio_dias_antes:.2f}\")\n",
        "print(f\"El coste de entrega medio de estos productos en días posteriores: {coste_entrega_medio_dias_despues:.2f}\")\n",
        "\n",
        "if coste_entrega_medio_black_friday < coste_entrega_medio_otros_dias:\n",
        "    print(\"\\nEl coste de entrega en Black Friday fue más barato.\")\n",
        "else:\n",
        "    print(\"\\nEl coste de entrega en Black Friday  NO fue más barato.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wWUobUb57Z3c"
      },
      "outputs": [],
      "source": [
        "categorias_mas_vendidas_bf = df_black_friday['product_category_name'].value_counts()\n",
        "print(categorias_mas_vendidas_bf.head(10))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8qWQh9247Z3c"
      },
      "outputs": [],
      "source": [
        "clientes_antes_bf_lista = compras_clientes_bf.loc[\n",
        "    compras_clientes_bf['compra_antes'], 'customer_unique_id'\n",
        "].unique().tolist()\n",
        "df[df['customer_unique_id'].isin(clientes_antes_bf_lista)].groupby(['customer_unique_id', 'order_purchase_timestamp']).size()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wEoOmOyF7Z3d"
      },
      "outputs": [],
      "source": [
        "clientes_despues_bf_lista = compras_clientes_bf.loc[compras_clientes_bf['compra_despues'], 'customer_unique_id'].unique().tolist()\n",
        "df[df['customer_unique_id'].isin(clientes_despues_bf_lista)].groupby(['customer_unique_id', 'order_purchase_timestamp']).size().head(20)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tc4VOUgH7Z3d"
      },
      "source": [
        "## Fin de semana de Black Friday hasta Cyber Monday"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "w1Led4fh7Z3d"
      },
      "outputs": [],
      "source": [
        "df_bf_weekend = df[(df['order_purchase_timestamp'] >= pd.to_datetime('2017-11-24 00:00:00')) & (df['order_purchase_timestamp'] <= pd.to_datetime('2017-11-27 23:59:59'))]\n",
        "df_bf_weekend.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-C53c_fr7Z3d"
      },
      "outputs": [],
      "source": [
        "clientes_bf_weekend = df_bf_weekend['customer_unique_id'].unique()\n",
        "\n",
        "compras_clientes_bf_weekend = df[df['customer_unique_id'].isin(clientes_bf_weekend)].copy()\n",
        "primeras_compras_bf_weekend = compras_clientes_bf_weekend.groupby('customer_unique_id')['order_purchase_timestamp'].min()\n",
        "\n",
        "compras_clientes_bf_weekend['compra_antes_bf_weekend'] = compras_clientes_bf_weekend['order_purchase_timestamp'] < '2017-11-24'\n",
        "compras_clientes_bf_weekend['compra_despues_bf_weekend'] = compras_clientes_bf_weekend['order_purchase_timestamp'] >= '2017-11-28'\n",
        "\n",
        "clientes_antes_bf_weekend = compras_clientes_bf_weekend.groupby('customer_unique_id')['compra_antes_bf_weekend'].any().sum()\n",
        "clientes_despues_bf_weekend = compras_clientes_bf_weekend.groupby('customer_unique_id')['compra_despues_bf_weekend'].any().sum()\n",
        "clientes_nuevos_bf_weekend = ((primeras_compras_bf_weekend >= '2017-11-24 00:00:00') &\n",
        "                    (primeras_compras_bf_weekend <= '2017-11-27 23:59:59')).sum()\n",
        "\n",
        "compras_despues_bf_weekend = df[(df['customer_unique_id'].isin(clientes_bf_weekend)) &\n",
        "                      (df['order_purchase_timestamp'] >= '2017-11-28')][['customer_unique_id', 'order_purchase_timestamp']]\n",
        "\n",
        "tiempo_recompra_bf_weekend = df_bf_weekend.merge(compras_despues_bf_weekend, on='customer_unique_id', suffixes=('_bf_weekend', '_despues'))\n",
        "tiempo_recompra_bf_weekend['dias_para_recompra_bf_weekend'] = (tiempo_recompra_bf_weekend['order_purchase_timestamp_despues'] -\n",
        "                                         tiempo_recompra_bf_weekend['order_purchase_timestamp_bf_weekend']).dt.days\n",
        "\n",
        "dias_promedio_recompra_bf_weekend = tiempo_recompra_bf_weekend['dias_para_recompra_bf_weekend'].mean()\n",
        "\n",
        "total_clientes_despues_bf_weekend = compras_despues_bf_weekend['customer_unique_id'].nunique()\n",
        "clientes_antes_y_despues_bf_weekend = len(set(compras_despues_bf_weekend['customer_unique_id']) & set(compras_clientes_bf_weekend[compras_clientes_bf_weekend['compra_antes_bf_weekend']]['customer_unique_id']))\n",
        "\n",
        "print(f\"Clientes cuya primera compra fue entre Black Friday y Cyber Monday: {clientes_nuevos_bf_weekend}\")\n",
        "print(f\"Compradores durante el fin de semana del Black Friday que habían comprado antes: {clientes_antes_bf_weekend}\")\n",
        "print(f\"Compradores durante el fin de semana del Black Friday que compraron después: {clientes_despues_bf_weekend}\")\n",
        "print(f\"Clientes que ya habían comprado, compraron durante el fin de semana del Black Friday y volvieron a comprar después: {clientes_antes_y_despues_bf_weekend}\")\n",
        "print(f\"Tiempo promedio para la recompra después del fin de semana del Black Friday: {dias_promedio_recompra_bf_weekend:.2f} días\")\n",
        "print(f\"Porcentaje de compradores durante el fin de semana del Black Friday que compraron antes y después: {clientes_antes_y_despues_bf_weekend / total_clientes_despues_bf_weekend * 100:.2f}%\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BnNIsxTs7Z3e"
      },
      "outputs": [],
      "source": [
        "productos_black_friday_w = df_bf_weekend['product_id'].unique()\n",
        "\n",
        "ventas_dias_anteriores = df[(df['product_id'].isin(productos_black_friday_w)) & (df['order_purchase_timestamp'] < '2017-11-24')]\n",
        "ventas_dias_posteriores = df[(df['product_id'].isin(productos_black_friday_w)) & (df['order_purchase_timestamp'] >= '2017-11-28')]\n",
        "ventas_dias_no_bf = df[(df['product_id'].isin(productos_black_friday)) &\n",
        "                        ((df['order_purchase_timestamp'] < '2017-11-24') | (df['order_purchase_timestamp'] >= '2017-11-28'))]\n",
        "\n",
        "precio_medio_black_friday = df_bf_weekend['price'].mean()\n",
        "precio_medio_dias_antes = ventas_dias_anteriores['price'].mean()\n",
        "precio_medio_dias_despues = ventas_dias_posteriores['price'].mean()\n",
        "precio_medio_otros_dias = ventas_dias_no_bf['price'].mean()\n",
        "\n",
        "print(f\"Precio medio de estos productos el fin de semana del Black Friday: {precio_medio_black_friday:.2f}\")\n",
        "print(f\"Precio medio de estos productos en días anteriores: {precio_medio_dias_antes:.2f}\")\n",
        "print(f\"Precio medio de estos productos en días posteriores: {precio_medio_dias_despues:.2f}\")\n",
        "\n",
        "if precio_medio_black_friday < precio_medio_otros_dias:\n",
        "    print(\"\\nEstos productos costaron más baratos el fin de semana del Black Friday.\")\n",
        "else:\n",
        "    print(\"\\nEstos productos NO costaron más baratos el fin de semana del Black Friday.\")\n",
        "\n",
        "print('-'*50)\n",
        "\n",
        "pago_medio_black_friday = df_bf_weekend['payment_value'].mean()\n",
        "pago_medio_dias_antes = ventas_dias_anteriores['payment_value'].mean()\n",
        "pago_medio_dias_despues = ventas_dias_posteriores['payment_value'].mean()\n",
        "pago_medio_otros_dias = ventas_dias_no_bf['payment_value'].mean()\n",
        "\n",
        "print(f\"Los clientes pagaron de media por estos productos el fin de semana del Black Friday: {pago_medio_black_friday:.2f}\")\n",
        "print(f\"Los clientes pagaron de media por productos en días anteriores: {pago_medio_dias_antes:.2f}\")\n",
        "print(f\"Los clientes pagaron de media por productos en días posteriores: {pago_medio_dias_despues:.2f}\")\n",
        "\n",
        "if pago_medio_black_friday < pago_medio_otros_dias:\n",
        "    print(\"\\nLos clientes pagaron estos productos más baratos el fin de semana del Black Friday.\")\n",
        "else:\n",
        "    print(\"\\nLos clientes NO pagaron estos productosn más baratos el fin de semana del Black Friday.\")\n",
        "\n",
        "print('-'*50)\n",
        "\n",
        "coste_entrega_medio_black_friday = df_bf_weekend['freight_value'].mean()\n",
        "coste_entrega_medio_dias_antes = ventas_dias_anteriores['freight_value'].mean()\n",
        "coste_entrega_medio_dias_despues = ventas_dias_posteriores['freight_value'].mean()\n",
        "coste_entrega_medio_otros_dias = ventas_dias_no_bf['freight_value'].mean()\n",
        "\n",
        "print(f\"El coste de entrega medio de estos productos en Black Friday: {coste_entrega_medio_black_friday:.2f}\")\n",
        "print(f\"El coste de entrega medio de estos productos en días anteriores: {coste_entrega_medio_dias_antes:.2f}\")\n",
        "print(f\"El coste de entrega medio de estos productos en días posteriores: {coste_entrega_medio_dias_despues:.2f}\")\n",
        "\n",
        "if coste_entrega_medio_black_friday < coste_entrega_medio_otros_dias:\n",
        "    print(\"\\nEl coste de entrega el fin de semana del Black Friday fue más barato.\")\n",
        "else:\n",
        "    print(\"\\nEl coste de entrega el fin de semana del Black Friday NO fue más barato.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PWuxFgZ-7Z3e"
      },
      "outputs": [],
      "source": [
        "categorias_mas_vendidas_bf = df_bf_weekend['product_category_name'].value_counts()\n",
        "print(categorias_mas_vendidas_bf.head(10))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CdRTH51R7Z3e"
      },
      "source": [
        "# Clientes recurrentes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QrUbRksj7Z3e"
      },
      "outputs": [],
      "source": [
        "# 1. ¿Cuántos pedidos realiza en promedio un cliente único?\n",
        "pedidos_por_cliente = df.groupby(\"customer_unique_id\")[\"order_id\"].nunique()\n",
        "pedidos_promedio = pedidos_por_cliente.mean()\n",
        "ticket_promedio = df[\"payment_value\"].mean()\n",
        "print(f\"Cada cliente realiza en promedio {pedidos_promedio:.2f} pedidos.\")\n",
        "print(f\"El ticket promedio de compra es de {ticket_promedio:.2f}.\")\n",
        "\n",
        "# 2. ¿Cuál es el tiempo promedio entre compras de un mismo cliente?\n",
        "df_sorted = df.sort_values(by=[\"customer_unique_id\", \"order_purchase_timestamp\"])\n",
        "df_sorted[\"tiempo_entre_compras\"] = df_sorted.groupby(\"customer_unique_id\")[\"order_purchase_timestamp\"].diff()\n",
        "tiempo_promedio = df_sorted[\"tiempo_entre_compras\"].mean()\n",
        "print(f\"El tiempo promedio entre compras de un mismo cliente es {tiempo_promedio} días.\")\n",
        "\n",
        "# 3. ¿Cuáles son los clientes más valiosos (por volumen de compra o ticket promedio)?\n",
        "ventas_por_cliente = df.groupby(\"customer_unique_id\")[\"payment_value\"].sum()\n",
        "clientes_top = ventas_por_cliente.sort_values(ascending=False).head(10)\n",
        "top_clientes_df = df[df[\"customer_unique_id\"].isin(clientes_top.index)]\n",
        "categorias_por_cliente = top_clientes_df.groupby([\"customer_unique_id\", \"product_category_name\"])\\\n",
        "    [\"order_item_id\"].count().reset_index().rename(columns={\"order_item_id\": \"cantidad_productos\"})\n",
        "\n",
        "print(\"\\nTabla: Categorías y cantidad de productos comprados por los clientes más valiosos\")\n",
        "categorias_por_cliente.sort_values(by='cantidad_productos',ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rI_vW27e7Z3f"
      },
      "outputs": [],
      "source": [
        "compras_por_cliente = df.groupby('customer_unique_id')['order_id'].nunique()\n",
        "\n",
        "clientes_recurrentes = compras_por_cliente[compras_por_cliente > 1].count()\n",
        "tasa_recompra = (clientes_recurrentes / compras_por_cliente.count()) * 100\n",
        "\n",
        "print(f\"Porcentaje de clientes que compran más de una vez: {tasa_recompra:.2f}%\")\n",
        "\n",
        "clientes_una_compra = compras_por_cliente[compras_por_cliente == 1]\n",
        "porcentaje_una_compra = (len(clientes_una_compra) / len(compras_por_cliente)) * 100\n",
        "\n",
        "print(f\"Porcentaje de clientes que compran solo una vez: {porcentaje_una_compra:.2f}%\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SzB8U1Ur7Z3f"
      },
      "source": [
        "# ¡¡¡¡¡Faltan añadir los sellers y logística las ciudades!!!!!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fdbHkThe7Z3f"
      },
      "source": [
        "# Segmentación clientes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gsIFZfyQ7Z3f"
      },
      "source": [
        "## Frecuencia: cliente recurrente"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vjnrt4mE7Z3f"
      },
      "outputs": [],
      "source": [
        "# Paso 1: Agrupar por cliente y contar los pedidos únicos\n",
        "compras_por_cliente = df.groupby('customer_unique_id')['order_id'].nunique().reset_index()\n",
        "\n",
        "# Paso 2: Crear la columna de segmentación\n",
        "def assign_cluster(compras):\n",
        "    if compras == 1:\n",
        "        return 'Compra Única'\n",
        "    elif 2 <= compras <= 3:\n",
        "        return '2-3 Compras'\n",
        "    elif 4 <= compras <= 5:\n",
        "        return '4-5 Compras'\n",
        "    elif 6 <= compras <= 7:\n",
        "        return '6-7 Compras'\n",
        "    else:\n",
        "        return '9 o más Compras'\n",
        "\n",
        "# Crear una nueva columna 'frecuencia_compra' con la frecuencia de cada cliente\n",
        "compras_por_cliente['frecuencia_compra'] = compras_por_cliente['order_id'].apply(assign_cluster)\n",
        "\n",
        "# Paso 3: Crear nueva columna en el df original\n",
        "df = df.merge(compras_por_cliente[['customer_unique_id', 'frecuencia_compra']], on='customer_unique_id', how='left')\n",
        "\n",
        "print(df[['customer_unique_id', 'frecuencia_compra']].head())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lpwWvW0H7Z3f"
      },
      "source": [
        "## Ticket Medio"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DS5Bo-IQ7Z3g"
      },
      "outputs": [],
      "source": [
        "#Hemos creado la columna para hallar el beneficio\n",
        "# df[\"precio_ticket\"] = df.groupby([\"order_id\", \"payment_sequential\"])[\"payment_value\"].transform(\"first\")\n",
        "# df[\"precio_ticket\"] = df.groupby(\"order_id\")[\"precio_ticket\"].transform(\"sum\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5MJv8ib77Z3g"
      },
      "outputs": [],
      "source": [
        "df['precio_ticket'].head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PJF6fjP57Z3g"
      },
      "outputs": [],
      "source": [
        "df['precio_ticket'].describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gFvfBsQU7Z3g"
      },
      "outputs": [],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zY8LowgF7Z3g"
      },
      "outputs": [],
      "source": [
        "# Paso 1: Asignar el rango del ticket\n",
        "def assign_cluster(ticket):\n",
        "    if ticket <= 75:\n",
        "        return 'Ticket < 75'\n",
        "    elif 75 < ticket <= 150:\n",
        "        return 'Ticket 75-150'\n",
        "    elif 150 < ticket <= 350:\n",
        "        return 'Ticket 150-350'\n",
        "    elif 350 < ticket <= 500:\n",
        "        return 'Ticket 350-500'\n",
        "    else:\n",
        "        return 'Ticket > 500'\n",
        "\n",
        "# Paso 2: Crer columna rango_ticket\n",
        "df['rango_ticket'] = df['precio_ticket'].apply(assign_cluster)\n",
        "\n",
        "print(df[['order_id', 'rango_ticket']].head(10))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GaazBpRK7Z3g"
      },
      "outputs": [],
      "source": [
        "df[df['order_id'] == 'e481f51cbdc54678b7cc49136f2d6af7' ]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p0NQYc597Z3h"
      },
      "outputs": [],
      "source": [
        "df[['order_id','customer_unique_id', 'order_item_id', 'price', 'payment_value', 'precio_ticket', 'rango_ticket', 'frecuencia_compra']].head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JM3VgDHA7Z3h"
      },
      "source": [
        "## Categorías"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RYCNQYyE7Z3h"
      },
      "outputs": [],
      "source": [
        "df['product_category_name_es'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8JtFil9t7Z3h"
      },
      "outputs": [],
      "source": [
        "def categorize_product(category):\n",
        "    category_groups = {\n",
        "        \"Hogar y Decoración\": [\n",
        "            \"Accesorios para el Hogar\", \"Muebles de Decoración\", \"Blanquería para el Hogar\",\n",
        "            \"Materiales de Construcción\", \"Muebles para el Hogar\", \"Hogar y Confort\",\n",
        "            \"Muebles para Living\", \"Muebles para Dormitorio\", \"Sillones, Colchones y Tapicería\",\n",
        "            \"Luminarias para el Hogar\", \"Herramientas para Jardín\"\n",
        "        ],\n",
        "        \"Electrodomésticos y Tecnología\": [\n",
        "            \"Electrodomésticos\", \"Pequeños Electrodomésticos de Cocina\", \"Accesorios de Informática\",\n",
        "            \"Electrónica\", \"Audio\", \"Cine y Fotografía\", \"Telefonía\", \"Telefonía Fija\",\n",
        "            \"PCs\", \"PC Gamer\", \"Tablets, Impresión e Imagen\", \"Climatización\", \"Accesorios para Horno y Café\"\n",
        "        ],\n",
        "        \"Moda y Accesorios\": [\n",
        "            \"Ropa Masculina\", \"Ropa Femenina\", \"Ropa para Niños\", \"Moda Deportiva\",\n",
        "            \"Calzado de Moda\", \"Ropa Interior y Moda de Playa\", \"Bolsos y Accesorios de Moda\"\n",
        "        ],\n",
        "        \"Belleza y Cuidado Personal\": [\n",
        "            \"Belleza y Salud\", \"Perfumería y Fragancias\", \"Pañales e Higiene\"\n",
        "        ],\n",
        "        \"Entretenimiento y Cultura\": [\n",
        "            \"Juguetes\", \"Consolas y Videojuegos\", \"Productos Innovadores\", \"CDs, DVDs y Música\",\n",
        "            \"DVDs y Blu-ray\", \"Música\", \"Libros de Interés General\", \"Libros Importados\",\n",
        "            \"Libros Técnicos\", \"Artes y Artesanías\", \"Artes\", \"Instrumentos Musicales\", \"Gastronomía\"\n",
        "        ],\n",
        "        \"Deportes y Aire Libre\": [\"Deportes y Ocio\"],\n",
        "        \"Herramientas y Construcción\": [\n",
        "            \"Herramientas de Construcción\", \"Herramientas para Construcción y Jardinería\",\n",
        "            \"Herramientas de Seguridad para Construcción\", \"Señalización y Seguridad\"\n",
        "        ],\n",
        "        \"Mascotas\": [\"Tienda de Mascotas\"],\n",
        "        \"Industria y Comercio\": [\n",
        "            \"Industria, Comercio y Negocios\", \"Agroindustria y Comercio\", \"Seguros y Servicios\"\n",
        "        ],\n",
        "        \"Papelería y Oficina\": [\"Papelería\", \"Muebles de Oficina\"],\n",
        "        \"Alimentos y Bebidas\": [\"Alimentos\", \"Bebidas\", \"Alimentos y Bebidas\"],\n",
        "        \"Automotriz\": [\"Accesorios Automotrices\"],\n",
        "        \"Temporada y Regalos\": [\n",
        "            \"Artículos para Fiestas\", \"Artículos de Navidad\", \"Flores\", \"Relojes y Regalos\"\n",
        "        ],\n",
        "        \"Otros\": [\"Marketplace\", \"Maletas y Accesorios\", \"Bebés\", \"Otros\"]\n",
        "    }\n",
        "\n",
        "    for group, categories in category_groups.items():\n",
        "        if category in categories:\n",
        "            return group\n",
        "    return \"Otros\"\n",
        "\n",
        "# Aplicar la función al DataFrame\n",
        "df[\"grupos_productos\"] = df[\"product_category_name_es\"].apply(categorize_product)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Verificar que la columna 'grupos_productos' existe\n",
        "if 'grupos_productos' not in df.columns:\n",
        "    df[\"grupos_productos\"] = df[\"product_category_name_es\"].apply(categorize_product)\n",
        "\n",
        "# Mostrar una muestra aleatoria de 10 filas\n",
        "df[['product_category_name_es', 'grupos_productos']].sample(10)\n"
      ],
      "metadata": {
        "id": "7jUUzqS_fOMI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dg9rz5k07Z3j"
      },
      "source": [
        "# Beneficio"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MqpvpVZf7Z3k"
      },
      "outputs": [],
      "source": [
        "# # Sumar payment_value por cada order_id y payment_sequential único\n",
        "# payment_sum = df.drop_duplicates(subset=[\"order_id\", \"payment_sequential\"]).groupby(\"order_id\")[\"payment_value\"].sum()\n",
        "\n",
        "# # Sumar price y freight_value por cada order_id y order_item_id único\n",
        "# price_sum = df.drop_duplicates(subset=[\"order_id\", \"order_item_id\"]).groupby(\"order_id\")[\"price\"].sum()\n",
        "# freight_sum = df.drop_duplicates(subset=[\"order_id\", \"order_item_id\"]).groupby(\"order_id\")[\"freight_value\"].sum()\n",
        "\n",
        "# # Calcular beneficio_ticket\n",
        "# df[\"beneficio_ticket\"] = df[\"order_id\"].map((payment_sum - price_sum - freight_sum).round(8))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZXMQHoGC7Z3k"
      },
      "outputs": [],
      "source": [
        "df[['order_id', 'order_item_id','payment_sequential', 'payment_value', 'price', 'freight_value', 'precio_ticket',  'beneficio_ticket']].sort_values(by='payment_value', ascending=False).head(8)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Fe8ujwW97Z3l"
      },
      "outputs": [],
      "source": [
        "df[df['beneficio_ticket'] <=0]['beneficio_ticket'].count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bpyjzUGB7Z3l"
      },
      "outputs": [],
      "source": [
        "df['beneficio_ticket'].count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3XxTEco17Z3m"
      },
      "outputs": [],
      "source": [
        "df.groupby('frecuencia_compra')['beneficio_ticket'].mean().round(4)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Verificar si el DataFrame tiene datos y contiene las columnas necesarias\n",
        "if not df.empty and {'frecuencia_compra', 'beneficio_ticket'}.issubset(df.columns):\n",
        "    try:\n",
        "        # Calcular el beneficio promedio por frecuencia de compra\n",
        "        beneficio_por_frecuencia = (\n",
        "            df.groupby('frecuencia_compra')['beneficio_ticket']\n",
        "            .median()\n",
        "            .round(4)\n",
        "            .reset_index()\n",
        "        )\n",
        "\n",
        "        # Ordenar las categorías de forma lógica\n",
        "        orden_frecuencia = [\n",
        "            \"Compra Única\", \"2-3 Compras\", \"4-5 Compras\", \"6-7 Compras\", \"9 o más Compras\"\n",
        "        ]\n",
        "        beneficio_por_frecuencia['frecuencia_compra'] = pd.Categorical(\n",
        "            beneficio_por_frecuencia['frecuencia_compra'],\n",
        "            categories=orden_frecuencia,\n",
        "            ordered=True\n",
        "        )\n",
        "        beneficio_por_frecuencia = beneficio_por_frecuencia.sort_values('frecuencia_compra')\n",
        "\n",
        "        # Configurar el gráfico\n",
        "        plt.figure(figsize=(10, 5))\n",
        "        ax = sns.barplot(\n",
        "            data=beneficio_por_frecuencia,\n",
        "            x='frecuencia_compra',\n",
        "            y='beneficio_ticket',\n",
        "            palette=['#001647']  # Azul oscuro para uniformidad\n",
        "        )\n",
        "\n",
        "        # Agregar etiquetas con los valores sobre las barras\n",
        "        for p in ax.patches:\n",
        "            ax.annotate(\n",
        "                f'{p.get_height():.4f}',\n",
        "                (p.get_x() + p.get_width() / 2., p.get_height()),\n",
        "                ha='center', va='bottom', fontsize=11, fontweight='bold', color='black'\n",
        "            )\n",
        "\n",
        "        # Personalizar el diseño del gráfico\n",
        "        plt.title(\"Beneficio Promedio por Frecuencia de Compra\", fontsize=14, fontweight='bold')\n",
        "        plt.xlabel(\"Frecuencia de Compra\", fontsize=12)\n",
        "        plt.ylabel(\"Beneficio Promedio por Ticket\", fontsize=12)\n",
        "        plt.xticks(rotation=0, fontsize=11)\n",
        "        plt.yticks(fontsize=11)\n",
        "        plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "\n",
        "        # Mostrar el gráfico\n",
        "        plt.show()\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"❌ Error al generar el gráfico: {e}\")\n",
        "else:\n",
        "    print(\"❌ Error: El DataFrame está vacío o faltan las columnas 'frecuencia_compra' o 'beneficio_ticket'.\")\n"
      ],
      "metadata": {
        "id": "qJX9Tr7_gfmz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcular la mediana del beneficio por frecuencia de compra\n",
        "beneficio_mediana = (\n",
        "    df.groupby('frecuencia_compra')['beneficio_ticket']\n",
        "    .median()\n",
        "    .round(4)\n",
        "    .reset_index()\n",
        ")\n",
        "\n",
        "# Calcular la mediana del beneficio por grupo de productos\n",
        "beneficio_mediana_grupos = (\n",
        "    df.groupby('grupos_productos')['beneficio_ticket']\n",
        "    .median()\n",
        "    .round(4)\n",
        "    .reset_index()\n",
        ")\n",
        "\n",
        "# Calcular la mediana del beneficio por categoría de producto\n",
        "beneficio_mediana_categorias = (\n",
        "    df.groupby('product_category_name_es')['beneficio_ticket']\n",
        "    .median()\n",
        "    .round(4)\n",
        "    .reset_index()\n",
        ")\n",
        "\n",
        "# Mostrar resultados\n",
        "print(\"\\n📊 Mediana del beneficio por frecuencia de compra:\")\n",
        "print(beneficio_mediana)\n",
        "\n",
        "print(\"\\n📊 Mediana del beneficio por grupo de productos:\")\n",
        "print(beneficio_mediana_grupos)\n",
        "\n",
        "print(\"\\n📊 Mediana del beneficio por categoría de producto:\")\n",
        "print(beneficio_mediana_categorias)\n"
      ],
      "metadata": {
        "id": "9cNzh9c9h9i7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Filtrar solo las compras en el grupo \"6-7 Compras\"\n",
        "df_67 = df[df['frecuencia_compra'] == \"6-7 Compras\"]\n",
        "\n",
        "# Calcular estadísticas de beneficio_ticket\n",
        "q1 = np.percentile(df_67['beneficio_ticket'], 25)  # Primer cuartil (Q1)\n",
        "q3 = np.percentile(df_67['beneficio_ticket'], 75)  # Tercer cuartil (Q3)\n",
        "iqr = q3 - q1  # Rango intercuartil (IQR)\n",
        "\n",
        "# Definir límites para detectar outliers\n",
        "limite_inferior = q1 - 1.5 * iqr\n",
        "limite_superior = q3 + 1.5 * iqr\n",
        "\n",
        "# Filtrar valores atípicos\n",
        "outliers = df_67[(df_67['beneficio_ticket'] < limite_inferior) | (df_67['beneficio_ticket'] > limite_superior)]\n",
        "\n",
        "# Mostrar cuántos outliers hay\n",
        "print(f\"🔍 Se encontraron {len(outliers)} compras atípicas en el grupo '6-7 Compras'.\")\n",
        "\n",
        "# Mostrar estadísticas clave\n",
        "print(f\"\\n📊 Estadísticas del grupo '6-7 Compras':\")\n",
        "print(f\"  - Q1 (25%): {q1:.4f}\")\n",
        "print(f\"  - Q3 (75%): {q3:.4f}\")\n",
        "print(f\"  - IQR: {iqr:.4f}\")\n",
        "print(f\"  - Límite inferior: {limite_inferior:.4f}\")\n",
        "print(f\"  - Límite superior: {limite_superior:.4f}\")\n",
        "\n",
        "# Mostrar las compras detectadas como outliers (si hay)\n",
        "if not outliers.empty:\n",
        "    print(\"\\n📌 Detalle de compras atípicas encontradas:\")\n",
        "    print(outliers[['frecuencia_compra', 'beneficio_ticket']])\n",
        "\n",
        "# Visualizar con un boxplot\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.boxplot(x=df_67['beneficio_ticket'], color='#e64e36')  # Rojo para destacar outliers\n",
        "plt.title(\"Distribución de Beneficio Ticket en '6-7 Compras' (Detección de Outliers)\", fontsize=13)\n",
        "plt.xlabel(\"Beneficio Ticket\")\n",
        "plt.grid(axis='x', linestyle='--', alpha=0.7)\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "GHqlkSHzhJiy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcular la mediana en lugar de la media\n",
        "beneficio_mediana = (\n",
        "    df.groupby('frecuencia_compra')['beneficio_ticket']\n",
        "    .median()  # ← Aquí usamos la mediana en lugar de la media\n",
        "    .round(4)\n",
        "    .reset_index()\n",
        ")\n"
      ],
      "metadata": {
        "id": "Ic65ZGqphjVs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3OvsV6vz7Z3m"
      },
      "outputs": [],
      "source": [
        "df.groupby('rango_ticket')['beneficio_ticket'].describe().round(4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J7h9HT3E7Z3m"
      },
      "outputs": [],
      "source": [
        "df.groupby('grupos_productos')['beneficio_ticket'].describe().round(4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "O7_6FX_E7Z3m"
      },
      "outputs": [],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zGyvBjroLXyE"
      },
      "outputs": [],
      "source": [
        "df['max_payment_sequential'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FUTyTmjLMGDb"
      },
      "outputs": [],
      "source": [
        "df[df['max_payment_sequential'].isnull()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gDh4aCz7M1za"
      },
      "outputs": [],
      "source": [
        "print(df.groupby('order_id')['max_payment_sequential'].max().value_counts(normalize=True, dropna=False) * 100)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6u1RglPeNlMh"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Paso 1: Obtener el valor máximo de max_payment_sequential por order_id\n",
        "max_payment_per_order = df.groupby('order_id', as_index=False)['max_payment_sequential'].max()\n",
        "\n",
        "# Paso 2: Crear un diccionario de asignación para mejorar eficiencia\n",
        "cluster_dict = {\n",
        "    1: \"Cuota única\",\n",
        "    2: \"2-3 cuotas\", 3: \"2-3 cuotas\",\n",
        "    4: \"4-6 cuotas\", 5: \"4-6 cuotas\", 6: \"4-6 cuotas\",\n",
        "    7: \"7-10 cuotas\", 8: \"11-14 cuotas\", 9: \"15-18 cuotas\", 10: \"19-24 cuotas\"\n",
        "}\n",
        "\n",
        "# Paso 3: Asignar clusters usando map() y manejar valores NaN\n",
        "max_payment_per_order['total_cuotas'] = max_payment_per_order['max_payment_sequential'].map(cluster_dict).fillna('11 o más cuotas')\n",
        "\n",
        "# Paso 4: Crear la columna cluster_cuotas en el DataFrame original\n",
        "df = df.merge(max_payment_per_order[['order_id', 'total_cuotas']], on='order_id', how='left')\n",
        "\n",
        "# Ver el resultado\n",
        "print(df[['order_id', 'max_payment_sequential', 'total_cuotas']].head())\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZUhFp2ptPP3J"
      },
      "outputs": [],
      "source": [
        "print(sorted(df[df['total_cuotas']== '11 o más cuotas']['precio_ticket'].unique()))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lmSx9nDCQPOP"
      },
      "outputs": [],
      "source": [
        "df['precio_ticket'].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RN2ZJ8xDRLun"
      },
      "outputs": [],
      "source": [
        "df[df['precio_ticket']==20.85]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "65liZC1tR14g"
      },
      "outputs": [],
      "source": [
        "df[df['order_id']=='d744783ed2ace06cac647a9e64dcbcfd']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aKmBwYN_SNi_"
      },
      "outputs": [],
      "source": [
        "df[df['customer_unique_id']== 'c411c8b6dbaffd467263f87a23f2cf52']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rJOmO3ZM7Z3n"
      },
      "source": [
        "# FIN"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Wf3WS3Ew7Z3n"
      },
      "outputs": [],
      "source": [
        "# import json\n",
        "\n",
        "# # Cargar el archivo .ipynb\n",
        "# with open(\"EDA.ipynb\", \"r\", encoding=\"utf-8\") as f:\n",
        "#     notebook = json.load(f)\n",
        "\n",
        "# # Extraer celdas markdown\n",
        "# titles = []\n",
        "# for cell in notebook[\"cells\"]:\n",
        "#     if cell[\"cell_type\"] == \"markdown\":\n",
        "#         for line in cell[\"source\"]:\n",
        "#             if line.startswith(\"#\"):  # Detecta encabezados Markdown\n",
        "#                 titles.append(line.strip())\n",
        "\n",
        "# # Mostrar títulos\n",
        "# for title in titles:\n",
        "#     print(title)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7bjKWEQQ7Z3n"
      },
      "outputs": [],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MTukSpo17Z3n"
      },
      "outputs": [],
      "source": [
        "df[df['order_id'] == 'e481f51cbdc54678b7cc49136f2d6af7'][['order_id', 'order_purchase_timestamp', 'order_item_id', 'product_id', 'price', 'freight_value', 'payment_sequential', 'payment_type', 'payment_value', 'product_category_name', 'precio_ticket', 'beneficio_ticket']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "d89Ejtw77Z3n"
      },
      "outputs": [],
      "source": [
        "df[df['order_id'] == 'e481f51cbdc54678b7cc49136f2d6af7'][['order_id', 'order_purchase_timestamp', 'order_item_id', 'product_id', 'price', 'freight_value', 'payment_sequential', 'payment_type', 'payment_value', 'product_category_name','precio_ticket']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "12qj4YXG7Z3o"
      },
      "outputs": [],
      "source": [
        "df[df['order_id'] == 'e481f51cbdc54678b7cc49136f2d6af7'][['order_id', 'order_purchase_timestamp', 'order_item_id', 'product_id', 'price', 'freight_value', 'payment_sequential', 'payment_type', 'payment_value', 'precio_ticket', 'beneficio_ticket']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nm3lj01s7Z3o"
      },
      "outputs": [],
      "source": [
        "df['beneficio_ticket'].sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WNpKmTyX84yf"
      },
      "outputs": [],
      "source": [
        "exploracion_inicial(df, tipo=None)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a0CNnmVr8Mnv"
      },
      "outputs": [],
      "source": [
        "df.to_csv('df_nuevas_columnas.csv', index=False)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6pUJhvkh-2hh"
      },
      "outputs": [],
      "source": [
        "df.to_csv('/content/drive/My Drive/df_nuevas_columnas.csv', index=False)"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LSQNNgXY2T4e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Análisis de vendedores**"
      ],
      "metadata": {
        "id": "aB6m0ZO62USx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Top 10 Vendedores con Más Ventas\n"
      ],
      "metadata": {
        "id": "6OCuZPsyXmxg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: cuantos seller_id tengo?\n",
        "\n",
        "# Assuming 'df' is your DataFrame and it contains a 'seller_id' column.\n",
        "seller_counts = df['seller_id'].value_counts()\n",
        "print(f\"Número de seller_id únicos: {len(seller_counts)}\")\n",
        "print(\"\\nTop 10 vendedores con más ventas:\")\n",
        "print(seller_counts.head(10))\n"
      ],
      "metadata": {
        "id": "eRdvaawfjL0-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: quiero crearle un nombre aleatorio a los 2970 seller podrias ayudarme?\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random\n",
        "\n",
        "# Assuming your dataframe is named 'df' and has a column named 'seller_id'\n",
        "# Replace 'df' with the actual name of your dataframe if it's different.\n",
        "\n",
        "def generate_random_seller_names(df):\n",
        "  \"\"\"Generates random names for sellers in a DataFrame.\n",
        "\n",
        "  Args:\n",
        "    df: The pandas DataFrame containing seller data.\n",
        "\n",
        "  Returns:\n",
        "    A pandas Series with random seller names.\n",
        "  \"\"\"\n",
        "  num_sellers = len(df['seller_id'].unique())\n",
        "  adjectives = ['Amazing', 'Brilliant', 'Creative', 'Dynamic', 'Efficient', 'Fantastic', 'Glorious', 'Harmonious', 'Incredible', 'Joyful', 'Kind', 'Lively', 'Magnificent', 'Noble', 'Outstanding', 'Perfect', 'Quick', 'Radiant', 'Superb', 'Thrilling', 'Unique', 'Vibrant', 'Wonderful', 'Xenial', 'Youthful', 'Zenith', 'Zealous', 'Ultimate', 'Supreme']\n",
        "  nouns = ['Solutions', 'Innovations', 'Creations', 'Designs', 'Developments', 'Enterprises', 'Ventures', 'Inventions', 'Technologies', 'Industries', 'Markets', 'Businesses', 'Corporations', 'Agencies', 'Studios', 'Workshops', 'Laboratories', 'Factories', 'Companies', 'Groups', 'Teams', 'Partnerships', 'Alliances', 'Networks', 'Communities', 'Consortiums', 'Syndicates', 'Unions', 'Federations', 'Confederations']\n",
        "\n",
        "  random_names = []\n",
        "  for _ in range(num_sellers):\n",
        "    adjective = random.choice(adjectives)\n",
        "    noun = random.choice(nouns)\n",
        "    random_names.append(f\"{adjective} {noun}\")\n",
        "\n",
        "  # Create a pandas Series with seller_id as index and random names as values\n",
        "  seller_names = pd.Series(random_names, index = df['seller_id'].unique())\n",
        "\n",
        "  return seller_names\n",
        "\n",
        "# Example usage:\n",
        "# Assuming 'df' is your DataFrame and has a 'seller_id' column.\n",
        "# If 'seller_names' column does not exist, create it; otherwise, update existing values\n",
        "if 'seller_names' not in df.columns:\n",
        "    df['seller_names'] = df['seller_id'].map(generate_random_seller_names(df))\n",
        "else:\n",
        "    df['seller_names'] = df['seller_id'].map(generate_random_seller_names(df))\n",
        "\n",
        "# Print the first 10 rows of the DataFrame with the new column\n",
        "print(df[['seller_id', 'seller_names']].head(10))\n",
        "\n"
      ],
      "metadata": {
        "id": "YbRTqPWyjQ-7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Agrupar por 'seller_id' y contar la cantidad de productos vendidos\n",
        "top_seller = df.groupby(\"seller_names\")[\"order_item_id\"].count().reset_index()\n",
        "\n",
        "# Ordenar de mayor a menor\n",
        "top_seller = top_seller.sort_values(by=\"order_item_id\", ascending=False)\n",
        "\n",
        "# Mostrar el vendedor con más ventas\n",
        "print(top_seller.head(10))  # Muestra el top 10"
      ],
      "metadata": {
        "id": "MdQVC6aV2cL7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Top 10 Vendedores con Mayor Ingreso\n"
      ],
      "metadata": {
        "id": "tBfT0mIKX79P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Agrupar por 'seller_id' y sumar el precio de los productos vendidos\n",
        "top_seller_revenue = df.groupby(\"seller_names\")[\"price\"].sum().reset_index()\n",
        "\n",
        "# Ordenar de mayor a menor\n",
        "top_seller_revenue = top_seller_revenue.sort_values(by=\"price\", ascending=False)\n",
        "\n",
        "# Mostrar el vendedor con más ingresos\n",
        "print(top_seller_revenue.head(10))\n"
      ],
      "metadata": {
        "id": "sG7uv6Ne2gBB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Estado con Mayor Cantidad de Ventas\n"
      ],
      "metadata": {
        "id": "GfKL2bcjX9nf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Agrupar por estado del vendedor y contar productos vendidos\n",
        "ventas_por_estado = df.groupby(\"seller_state_full\")[\"order_item_id\"].count().reset_index()\n",
        "\n",
        "# Ordenar de mayor a menor\n",
        "ventas_por_estado = ventas_por_estado.sort_values(by=\"order_item_id\", ascending=False)\n",
        "\n",
        "# Mostrar el estado con más ventas\n",
        "print(ventas_por_estado.head(1))  # Estado con más ventas\n"
      ],
      "metadata": {
        "id": "NOzXx8ji2iip"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Estado con Mayor Volumen de Ventas en Ingresos\n"
      ],
      "metadata": {
        "id": "ylWYjU5yYfYe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Agrupar por estado del vendedor y sumar las ventas totales\n",
        "ventas_por_estado_revenue = df.groupby(\"seller_state_full\")[\"price\"].sum().reset_index()\n",
        "\n",
        "# Ordenar de mayor a menor\n",
        "ventas_por_estado_revenue = ventas_por_estado_revenue.sort_values(by=\"price\", ascending=False)\n",
        "\n",
        "# Mostrar el estado con más ingresos en ventas\n",
        "print(ventas_por_estado_revenue.head(1))\n"
      ],
      "metadata": {
        "id": "fujFCGMc26M6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Vendedor con Más Ventas en el Estado con Mayor Demanda\n"
      ],
      "metadata": {
        "id": "pfbRTseDbTvi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Obtener el estado con más ventas\n",
        "estado_top = ventas_por_estado.iloc[0][\"seller_state_full\"]\n",
        "\n",
        "# Filtrar las ventas solo en ese estado\n",
        "df_estado_top = df[df[\"seller_state_full\"] == estado_top]\n",
        "\n",
        "# Agrupar por 'seller_id' y contar cantidad de productos vendidos\n",
        "top_seller_estado = df_estado_top.groupby(\"seller_names\")[\"order_item_id\"].count().reset_index()\n",
        "\n",
        "# Ordenar de mayor a menor\n",
        "top_seller_estado = top_seller_estado.sort_values(by=\"order_item_id\", ascending=False)\n",
        "\n",
        "# Mostrar el vendedor con más ventas en ese estado\n",
        "print(top_seller_estado.head(1))\n"
      ],
      "metadata": {
        "id": "M8awbccq29PP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Top 10 Vendedores con más Ventas"
      ],
      "metadata": {
        "id": "iCqNDE08bHfF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Paso 1: Asegurar que no haya valores nulos en \"seller_names\"\n",
        "df = df.dropna(subset=['seller_names'])\n",
        "\n",
        "# Paso 2: Obtener los 10 vendedores con más ventas (por cantidad de productos vendidos)\n",
        "top_sellers = (\n",
        "    df.groupby(\"seller_names\")[\"order_item_id\"]\n",
        "    .count()\n",
        "    .nlargest(10)\n",
        "    .reset_index()\n",
        ")\n",
        "\n",
        "# Paso 3: Configurar el gráfico\n",
        "plt.figure(figsize=(12, 6))\n",
        "ax = sns.barplot(\n",
        "    data=top_sellers,\n",
        "    x=\"seller_names\",\n",
        "    y=\"order_item_id\",\n",
        "    palette=[\"#001647\"]  # Azul oscuro para uniformidad\n",
        ")\n",
        "\n",
        "# Paso 4: Agregar valores sobre las barras\n",
        "for p in ax.patches:\n",
        "    ax.annotate(\n",
        "        f'{int(p.get_height())}',\n",
        "        (p.get_x() + p.get_width() / 2., p.get_height()),\n",
        "        ha='center', va='bottom', fontsize=11, fontweight='bold', color='black'\n",
        "    )\n",
        "\n",
        "# Paso 5: Personalizar el diseño del gráfico\n",
        "plt.title(\"Top 10 Vendedores con Más Ventas (Cantidad de Productos)\", fontsize=14, fontweight='bold')\n",
        "plt.xlabel(\"Vendedor\", fontsize=12)\n",
        "plt.ylabel(\"Cantidad de Productos Vendidos\", fontsize=12)\n",
        "plt.xticks(rotation=45, fontsize=11, ha='right')  # Rotación para mejor visibilidad\n",
        "plt.yticks(fontsize=11)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "kN5TULO83ap-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Relación entre Precio y Costo de Envío\n"
      ],
      "metadata": {
        "id": "KdbMpAUiaxvw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Gráfico de dispersión (Precio vs. Costo de Envío) ----\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(x=df[\"price\"], y=df[\"freight_value\"], alpha=0.7, color=\"darkred\")\n",
        "plt.title(\"Relación entre Precio y Costo de Envío\")\n",
        "plt.xlabel(\"Precio del Producto\")\n",
        "plt.ylabel(\"Costo de Envío\")\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "1xdoqWRH3rTC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Costo de Envío Promedio Por región"
      ],
      "metadata": {
        "id": "PUpmaoCPaqBj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Paso 1: Asegurar que las columnas sean numéricas y no contengan valores nulos\n",
        "df = df.dropna(subset=['price', 'freight_value'])\n",
        "df['price'] = pd.to_numeric(df['price'], errors='coerce')\n",
        "df['freight_value'] = pd.to_numeric(df['freight_value'], errors='coerce')\n",
        "\n",
        "# Paso 2: Calcular el precio promedio y costo de envío promedio por región\n",
        "seller_summary = df.groupby(\"seller_region\").agg(\n",
        "    precio_promedio=(\"price\", \"mean\"),\n",
        "    envio_promedio=(\"freight_value\", \"mean\")\n",
        ").reset_index()\n",
        "\n",
        "# Paso 3: Ordenar por costo de envío promedio en orden descendente\n",
        "top_sellers_envio = seller_summary.sort_values(by=\"envio_promedio\", ascending=False)\n",
        "\n",
        "# Paso 4: Configurar el gráfico\n",
        "plt.figure(figsize=(12, 6))\n",
        "ax = sns.barplot(\n",
        "    data=top_sellers_envio,\n",
        "    x=\"seller_region\",\n",
        "    y=\"envio_promedio\",\n",
        "    palette=[\"#001647\"]  # Azul oscuro para uniformidad\n",
        ")\n",
        "\n",
        "# Paso 5: Agregar etiquetas con los valores sobre las barras\n",
        "for p in ax.patches:\n",
        "    ax.annotate(\n",
        "        f'{p.get_height():.2f}',\n",
        "        (p.get_x() + p.get_width() / 2., p.get_height()),\n",
        "        ha='center', va='bottom', fontsize=11, fontweight='bold', color='black'\n",
        "    )\n",
        "\n",
        "# Paso 6: Personalizar el diseño del gráfico\n",
        "plt.title(\"Costo de Envío Promedio por Región\", fontsize=14, fontweight='bold')\n",
        "plt.xlabel(\"Región\", fontsize=12)\n",
        "plt.ylabel(\"Costo de Envío Promedio\", fontsize=12)\n",
        "plt.xticks(rotation=45, fontsize=11, ha='right')  # Rotación para mejor visibilidad\n",
        "plt.yticks(fontsize=11)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "ojJRRCi135nF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Relación entre Precio y Costo de Envío por Región del Vendedor\n"
      ],
      "metadata": {
        "id": "GXbWvVFbaiI4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Mapeo de estados a regiones\n",
        "region_map = {\n",
        "    \"SP\": \"Sudeste\", \"RJ\": \"Sudeste\", \"MG\": \"Sudeste\", \"ES\": \"Sudeste\",\n",
        "    \"PR\": \"Sur\", \"SC\": \"Sur\", \"RS\": \"Sur\",\n",
        "    \"DF\": \"Centro-Oeste\", \"GO\": \"Centro-Oeste\", \"MS\": \"Centro-Oeste\", \"MT\": \"Centro-Oeste\",\n",
        "    \"BA\": \"Nordeste\", \"PE\": \"Nordeste\", \"CE\": \"Nordeste\", \"MA\": \"Nordeste\",\n",
        "    \"PB\": \"Nordeste\", \"RN\": \"Nordeste\", \"AL\": \"Nordeste\", \"SE\": \"Nordeste\", \"PI\": \"Nordeste\",\n",
        "    \"AM\": \"Norte\", \"PA\": \"Norte\", \"TO\": \"Norte\", \"RO\": \"Norte\", \"RR\": \"Norte\",\n",
        "    \"AP\": \"Norte\", \"AC\": \"Norte\"\n",
        "}\n",
        "\n",
        "# Agregar la columna de región del vendedor\n",
        "df[\"seller_region\"] = df[\"seller_state\"].map(region_map)\n",
        "\n",
        "# Asegurar que las columnas sean numéricas y eliminar valores nulos o negativos\n",
        "df = df.dropna(subset=['price', 'freight_value'])\n",
        "df['price'] = pd.to_numeric(df['price'], errors='coerce')\n",
        "df['freight_value'] = pd.to_numeric(df['freight_value'], errors='coerce')\n",
        "\n",
        "# Filtrar valores fuera de un rango razonable\n",
        "df = df[(df['price'] > 0) & (df['freight_value'] > 0)]\n",
        "\n",
        "# Configurar el gráfico con mejor visualización\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.scatterplot(\n",
        "    data=df,\n",
        "    x=\"price\",\n",
        "    y=\"freight_value\",\n",
        "    hue=\"seller_region\",\n",
        "    alpha=0.5,  # Transparencia para evitar sobrecarga visual\n",
        "    palette=\"Set1\"  # Mejora la diferenciación de colores\n",
        ")\n",
        "\n",
        "# Usar escala logarítmica si hay mucha dispersión\n",
        "plt.xscale(\"log\")\n",
        "plt.yscale(\"log\")\n",
        "\n",
        "# Títulos y etiquetas\n",
        "plt.title(\"Relación entre Precio y Costo de Envío por Región del Vendedor\", fontsize=14, fontweight='bold')\n",
        "plt.xlabel(\"Precio del Producto (Escala Log)\", fontsize=12)\n",
        "plt.ylabel(\"Costo de Envío (Escala Log)\", fontsize=12)\n",
        "plt.legend(title=\"Región\", bbox_to_anchor=(1, 1))  # Mueve la leyenda fuera del gráfico\n",
        "\n",
        "# Ajustar la cuadrícula para una mejor lectura\n",
        "plt.grid(True, which=\"both\", linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "FSAb9aVv6Ljn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Conclusiones generales\n",
        "\n",
        "✅ No hay una relación fuerte entre precio y costo de envío. Los costos dependen más de la región del vendedor y factores logísticos que del precio del producto.\n",
        "\n",
        "✅ El Sudeste es la región con más ventas. Es posible que tenga una mejor infraestructura de distribución y costos de envío más bajos.\n",
        "\n",
        "✅ El Sur y el Norte tienden a tener costos de envío más altos. Esto puede deberse a mayores distancias o menos transportistas disponibles en esas regiones.\n",
        "\n",
        "✅ Algunas ventas de productos caros tienen costos de envío bajos. Puede haber estrategias de reducción de costos logísticos o subsidios para incentivar la compra de artículos de alto valor.\n",
        "\n",
        "🎯 Acciones y recomendaciones de negocio\n",
        "\n",
        "📌 Optimizar costos logísticos en el Sur y Norte: Evaluar transportistas o abrir centros de distribución en esas regiones.\n",
        "\n",
        "📌 Análisis de rentabilidad por región: Si los costos de envío son altos en ciertas regiones, puede ser necesario ajustar precios o explorar subsidios logísticos.\n",
        "\n",
        "📌 Estrategias de pricing y promociones: Aplicar envíos gratuitos o descuentos en costos de envío en regiones con tarifas más altas para mejorar la conversión de ventas.\n",
        "\n",
        "📌 Explorar tarifas diferenciadas: Si el costo de envío no está alineado con el precio del producto, se podrían aplicar tarifas más justas según categorías de productos y ubicación del vendedor."
      ],
      "metadata": {
        "id": "v3A6dF_76mlh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.columns)\n"
      ],
      "metadata": {
        "id": "OcfpKtAIlvXY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_olist_actualizado.columns)\n",
        "\n"
      ],
      "metadata": {
        "id": "cHDDkUuUtM9t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 🔹 Verificar si 'seller_region' existe, si no, crearla\n",
        "if \"seller_region\" not in df_olist_actualizado.columns:\n",
        "    region_map = {\n",
        "        \"SP\": \"Sudeste\", \"RJ\": \"Sudeste\", \"MG\": \"Sudeste\", \"ES\": \"Sudeste\",\n",
        "        \"PR\": \"Sur\", \"SC\": \"Sur\", \"RS\": \"Sur\",\n",
        "        \"DF\": \"Centro-Oeste\", \"GO\": \"Centro-Oeste\", \"MS\": \"Centro-Oeste\", \"MT\": \"Centro-Oeste\",\n",
        "        \"BA\": \"Nordeste\", \"PE\": \"Nordeste\", \"CE\": \"Nordeste\", \"MA\": \"Nordeste\",\n",
        "        \"PB\": \"Nordeste\", \"RN\": \"Nordeste\", \"AL\": \"Nordeste\", \"SE\": \"Nordeste\", \"PI\": \"Nordeste\",\n",
        "        \"AM\": \"Norte\", \"PA\": \"Norte\", \"TO\": \"Norte\", \"RO\": \"Norte\", \"RR\": \"Norte\",\n",
        "        \"AP\": \"Norte\", \"AC\": \"Norte\"\n",
        "    }\n",
        "    df_olist_actualizado[\"seller_region\"] = df_olist_actualizado[\"seller_state\"].map(region_map)\n",
        "\n",
        "# 🔹 Limpiar datos eliminando valores nulos\n",
        "df_clean = df_olist_actualizado.dropna(subset=[\"product_weight_g\", \"freight_value\", \"seller_region\"])\n",
        "\n",
        "# 🔹 Convertir a numérico por seguridad\n",
        "df_clean[\"product_weight_g\"] = pd.to_numeric(df_clean[\"product_weight_g\"], errors=\"coerce\")\n",
        "df_clean[\"freight_value\"] = pd.to_numeric(df_clean[\"freight_value\"], errors=\"coerce\")\n",
        "\n",
        "# 🔹 Crear gráfico de dispersión\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.scatterplot(\n",
        "    data=df_clean,\n",
        "    x=\"product_weight_g\",\n",
        "    y=\"freight_value\",\n",
        "    hue=\"seller_region\",  # Ahora está garantizado que existe\n",
        "    alpha=0.5,\n",
        "    palette=\"Set1\"\n",
        ")\n",
        "\n",
        "plt.xscale(\"log\")\n",
        "plt.yscale(\"log\")\n",
        "\n",
        "# 🔹 Etiquetas y título\n",
        "plt.title(\"Relación entre Peso del Producto y Costo de Envío\", fontsize=14)\n",
        "plt.xlabel(\"Peso del Producto (gramos) - Escala Log\", fontsize=12)\n",
        "plt.ylabel(\"Costo de Envío - Escala Log\", fontsize=12)\n",
        "plt.legend(title=\"Región del Vendedor\", bbox_to_anchor=(1, 1))  # Mueve la leyenda\n",
        "plt.grid(True, which=\"both\", linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "# 🔹 Mostrar gráfico\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "sEDi6dmytECa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 🔹 Filtrar datos eliminando valores nulos y restringiendo valores extremos\n",
        "df_clean = df_olist_actualizado.dropna(subset=[\"product_weight_g\", \"freight_value\", \"seller_region\"])\n",
        "\n",
        "# Eliminar productos con peso y costo de envío fuera del 99% percentil (para reducir outliers)\n",
        "peso_limite = df_clean[\"product_weight_g\"].quantile(0.99)\n",
        "envio_limite = df_clean[\"freight_value\"].quantile(0.99)\n",
        "df_clean = df_clean[(df_clean[\"product_weight_g\"] <= peso_limite) & (df_clean[\"freight_value\"] <= envio_limite)]\n",
        "\n",
        "# 🔹 Crear gráfico mejorado con menor opacidad y bordes en los puntos\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.scatterplot(\n",
        "    data=df_clean,\n",
        "    x=\"product_weight_g\",\n",
        "    y=\"freight_value\",\n",
        "    hue=\"seller_region\",\n",
        "    alpha=0.4,  # Reduce la opacidad para minimizar superposición\n",
        "    edgecolor=\"black\",  # Añade bordes para diferenciar puntos\n",
        "    linewidth=0.2,  # Grosor del borde\n",
        "    palette=\"Set1\"\n",
        ")\n",
        "\n",
        "# 🔹 Etiquetas y título\n",
        "plt.title(\"Relación entre Peso del Producto y Costo de Envío (Optimizado)\", fontsize=14)\n",
        "plt.xlabel(\"Peso del Producto (gramos)\", fontsize=12)\n",
        "plt.ylabel(\"Costo de Envío\", fontsize=12)\n",
        "plt.legend(title=\"Región del Vendedor\", bbox_to_anchor=(1, 1))  # Mueve la leyenda fuera del gráfico\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "# 🔹 Mostrar gráfico\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "xBtUF3Lgut7W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 🔹 Crear la figura\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# 🔹 Gráfico de densidad KDE mejorado\n",
        "sns.kdeplot(\n",
        "    data=df_clean,\n",
        "    x=\"product_weight_g\",\n",
        "    y=\"freight_value\",\n",
        "    fill=True,  # Relleno para destacar densidades\n",
        "    cmap=\"Blues\",  # Paleta de color más definida\n",
        "    bw_adjust=0.8,  # Ajuste de suavizado\n",
        "    levels=30,  # Más niveles para ver mejor la concentración\n",
        "    thresh=0.05  # Evita saturación en zonas con pocos datos\n",
        ")\n",
        "\n",
        "# 🔹 Etiquetas y título\n",
        "plt.title(\"Densidad de Peso vs. Costo de Envío\", fontsize=14)\n",
        "plt.xlabel(\"Peso del Producto (gramos)\", fontsize=12)\n",
        "plt.ylabel(\"Costo de Envío\", fontsize=12)\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.5)\n",
        "\n",
        "# 🔹 Mostrar gráfico\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "TtxmHKRBw_j_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Costo de Envío Promedio por Estado\n"
      ],
      "metadata": {
        "id": "KHwM1Lp4Z_UY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcular el costo de envío promedio por estado del vendedor\n",
        "costo_envio_estado = df.groupby(\"seller_state_full\")[\"freight_value\"].mean().sort_values(ascending=False)\n",
        "\n",
        "# Configurar el gráfico de barras\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.barplot(x=costo_envio_estado.index, y=costo_envio_estado.values, palette=[\"#001647\"])\n",
        "\n",
        "# Personalizar el gráfico\n",
        "plt.title(\"Costo de Envío Promedio por Estado\")\n",
        "plt.xlabel(\"Estado\")\n",
        "plt.ylabel(\"Costo de Envío Promedio (Reales)\")\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "xar4jZ0z6oSm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###  **Análisis del Gráfico: Costo de Envío Promedio por Estado**  \n",
        "\n",
        "✅ **1️⃣ Rondônia (RO) tiene el costo de envío más alto**, superando los **50 reales**, seguido de Ceará (CE) y Piauí (PI), lo que indica posibles dificultades logísticas en estas regiones.  \n",
        "\n",
        "✅ **2️⃣ Los estados del Norte y Nordeste tienen costos de envío más elevados**, probablemente debido a **mayores distancias de transporte** y **menor infraestructura logística** en comparación con el Sudeste y Sur.  \n",
        "\n",
        "✅ **3️⃣ São Paulo (SP) y Pará (PA) tienen los costos de envío más bajos**, con valores cercanos a **18-20 reales**, lo que sugiere que en estas regiones hay **más opciones logísticas, mayor volumen de envíos o distancias más cortas entre vendedores y clientes**.  \n",
        "\n",
        "✅ **4️⃣ La diferencia de costos es significativa entre los extremos**, con RO casi **triplicando el costo de SP**, lo que puede impactar la **competitividad de los vendedores en ciertas regiones** y desincentivar compras en lugares con tarifas más altas.  \n",
        "\n",
        "✅ **5️⃣ Los estados del Sur (PR, SC, RS) y Sudeste (SP, RJ, MG) tienen costos de envío relativamente bajos**, lo que puede favorecer el comercio en estas áreas y hacerlas más atractivas para vendedores y compradores.  \n",
        "\n",
        "🚀 **Conclusión:** Para reducir costos de envío en estados con valores altos, sería clave mejorar la **infraestructura logística**, aumentar la presencia de **centros de distribución** y negociar **mejores tarifas con transportistas**.\n"
      ],
      "metadata": {
        "id": "J40kac-v7MiY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Evolución de Ventas a lo Largo del Tiempo por Región del Vendedor\n"
      ],
      "metadata": {
        "id": "FlHXDh2jZvYN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Agrupar las ventas por fecha y región\n",
        "ventas_por_region = df.groupby([df[\"order_purchase_timestamp\"].dt.to_period(\"M\"), \"seller_region\"])[\"order_item_id\"].count().reset_index()\n",
        "\n",
        "# Renombrar columnas\n",
        "ventas_por_region.columns = [\"fecha\", \"seller_region\", \"ventas\"]\n",
        "\n",
        "# Convertir la fecha a formato datetime\n",
        "ventas_por_region[\"fecha\"] = ventas_por_region[\"fecha\"].astype(str)\n",
        "ventas_por_region[\"fecha\"] = pd.to_datetime(ventas_por_region[\"fecha\"])\n",
        "\n",
        "# Configurar el gráfico de líneas\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.lineplot(data=ventas_por_region, x=\"fecha\", y=\"ventas\", hue=\"seller_region\", marker=\"o\")\n",
        "\n",
        "# Personalizar el gráfico\n",
        "plt.title(\"Evolución de Ventas a lo Largo del Tiempo por Región del Vendedor\")\n",
        "plt.xlabel(\"Fecha\")\n",
        "plt.ylabel(\"Cantidad de Ventas\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.legend(title=\"Región del Vendedor\", bbox_to_anchor=(1, 1))\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "D2KQhkOt7Fvb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "🔎 Análisis del Gráfico: Evolución de Ventas a lo Largo del Tiempo por Región del Vendedor\n",
        "Este gráfico de líneas muestra cómo han evolucionado las ventas mensuales en cada región del vendedor a lo largo del tiempo.\n",
        "\n",
        "📌 Puntos clave del análisis\n",
        "\n",
        "1️⃣ Sudeste domina el mercado con una tendencia de crecimiento clara 📈\n",
        "La región Sudeste (línea roja) tiene una cantidad de ventas mucho mayor que las demás regiones.\n",
        "Hay un crecimiento sostenido desde 2017, con picos notables en ciertos meses.\n",
        "Se observa un gran aumento de ventas a finales de 2017 e inicios de 2018, seguido de fluctuaciones, pero manteniéndose en valores altos.\n",
        "✅ Posible causa:\n",
        "\n",
        "Sudeste es la región más industrializada de Brasil, con mejores redes logísticas y mayor concentración de vendedores.\n",
        "2️⃣ Otras regiones tienen ventas significativamente menores 🛑\n",
        "El Sur (línea azul) es la segunda región con más ventas, aunque muy por debajo del Sudeste.\n",
        "Centro-Oeste, Nordeste y Norte tienen ventas casi insignificantes en comparación.\n",
        "Todas las regiones muestran un crecimiento leve, pero sin picos pronunciados como en Sudeste.\n",
        "✅ Posible causa:\n",
        "\n",
        "Puede haber menos vendedores en estas regiones, problemas de logística o menor demanda de productos.\n",
        "3️⃣ Patrones estacionales y picos de ventas 📊\n",
        "Finales de 2017 e inicios de 2018 muestran un pico fuerte de ventas en Sudeste.\n",
        "En otras regiones, los aumentos son más suaves y no muestran cambios abruptos.\n",
        "✅ Posible causa:\n",
        "\n",
        "Eventos como Black Friday (noviembre) y Navidad podrían haber impulsado ventas en esa época.\n",
        "Campañas de marketing o mejoras logísticas en Sudeste pueden haber generado más ventas.\n",
        "🔍 Conclusiones generales\n",
        "✅ Sudeste es la región líder en ventas y crece constantemente.\n",
        "✅ Las otras regiones tienen ventas mucho más bajas y crecimiento moderado.\n",
        "✅ Eventos como Black Friday o campañas específicas pueden haber impulsado picos en ciertas fechas.\n",
        "\n",
        "🎯 Acciones y Recomendaciones\n",
        "📌 Expansión de vendedores en otras regiones\n",
        "\n",
        "Incentivar más vendedores en Sur, Centro-Oeste, Nordeste y Norte para aumentar la presencia en el mercado.\n",
        "📌 Optimización logística en regiones con menos ventas\n",
        "\n",
        "Si el problema es la falta de transportistas o altos costos de envío, buscar soluciones como nuevas rutas logísticas o alianzas con empresas de transporte.\n",
        "📌 Estrategias de promoción en otras regiones\n",
        "\n",
        "Campañas específicas en Nordeste, Norte y Centro-Oeste para aumentar la demanda en esas zonas.\n",
        "📌 Análisis de picos en Sudeste\n",
        "\n",
        "Identificar qué impulsó el fuerte aumento en 2017-2018 y replicar estrategias en otras regiones."
      ],
      "metadata": {
        "id": "d1-URfwX8nCH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Crecimiento Porcentual de Ventas por Región del Vendedor\n"
      ],
      "metadata": {
        "id": "E3rkO7_mZoaO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Agrupar ventas por mes y región\n",
        "ventas_por_region = df.groupby([df[\"order_purchase_timestamp\"].dt.to_period(\"M\"), \"seller_region\"])[\"order_item_id\"].count().reset_index()\n",
        "\n",
        "# Renombrar columnas\n",
        "ventas_por_region.columns = [\"fecha\", \"seller_region\", \"ventas\"]\n",
        "\n",
        "# Convertir fecha a datetime\n",
        "ventas_por_region[\"fecha\"] = ventas_por_region[\"fecha\"].astype(str)\n",
        "ventas_por_region[\"fecha\"] = pd.to_datetime(ventas_por_region[\"fecha\"])\n",
        "\n",
        "# Calcular crecimiento porcentual por región\n",
        "ventas_por_region[\"ventas_iniciales\"] = ventas_por_region.groupby(\"seller_region\")[\"ventas\"].transform(\"first\")\n",
        "ventas_por_region[\"crecimiento_pct\"] = (ventas_por_region[\"ventas\"] - ventas_por_region[\"ventas_iniciales\"]) / ventas_por_region[\"ventas_iniciales\"] * 100\n",
        "\n",
        "# Crear gráfico de líneas\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.lineplot(data=ventas_por_region, x=\"fecha\", y=\"crecimiento_pct\", hue=\"seller_region\", marker=\"o\")\n",
        "\n",
        "# Personalizar el gráfico\n",
        "plt.title(\"Crecimiento Porcentual de Ventas por Región del Vendedor\")\n",
        "plt.xlabel(\"Fecha\")\n",
        "plt.ylabel(\"Crecimiento Porcentual (%)\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.legend(title=\"Región del Vendedor\", bbox_to_anchor=(1, 1))\n",
        "\n",
        "# Mostrar gráfico\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "aMucWYa087ay"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Top 5 Categorías de Producto por Región del Vendedor\n"
      ],
      "metadata": {
        "id": "eRHiTKu3Zi_v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Agrupar ventas por región y categoría de producto\n",
        "ventas_categoria_region = df.groupby([\"seller_region\", \"product_category_name\"])[\"order_item_id\"].count().reset_index()\n",
        "\n",
        "# Seleccionar las 5 categorías más vendidas\n",
        "top_categorias = ventas_categoria_region.groupby(\"product_category_name\")[\"order_item_id\"].sum().nlargest(5).index\n",
        "ventas_filtradas = ventas_categoria_region[ventas_categoria_region[\"product_category_name\"].isin(top_categorias)]\n",
        "\n",
        "# Pivotear la tabla para graficar en formato apilado\n",
        "ventas_pivot = ventas_filtradas.pivot(index=\"seller_region\", columns=\"product_category_name\", values=\"order_item_id\")\n",
        "\n",
        "# Crear el gráfico de barras apiladas\n",
        "ventas_pivot.plot(kind=\"bar\", stacked=True, figsize=(10, 6), colormap=\"viridis\")\n",
        "\n",
        "# Personalizar el gráfico\n",
        "plt.title(\"Top 5 Categorías de Producto por Región del Vendedor\")\n",
        "plt.xlabel(\"Región del Vendedor\")\n",
        "plt.ylabel(\"Cantidad de Ventas\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.legend(title=\"Categoría de Producto\", bbox_to_anchor=(1, 1))\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "M92jrxoN9_OX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "📊 Análisis del Gráfico: Top 5 Categorías de Producto por Región del Vendedor\n",
        "\n",
        "Sudeste domina el mercado 🏆 → La gran mayoría de las ventas provienen de esta región, con una diferencia enorme frente a las demás.\n",
        "\n",
        "Las categorías más vendidas son variadas → bed_bath_table, computers_accessories, furniture_decor, health_beauty, y sports_leisure tienen una presencia fuerte en Sudeste.\n",
        "\n",
        "El Sur es la segunda región más activa 📈 → Aunque con un volumen mucho menor, sigue mostrando una diversidad de categorías vendidas.\n",
        "\n",
        "Centro-Oeste, Nordeste y Norte tienen ventas mínimas 🚨 → Poca presencia de vendedores o demanda limitada en estas regiones.\n",
        "\n",
        "Oportunidad en regiones menos activas → Potencial para expandir categorías de productos en Nordeste y Norte mediante estrategias de marketing y logística. 🚀"
      ],
      "metadata": {
        "id": "edk8NFKN-frD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Top 5 Categorías de Producto por Región del Cliente\n"
      ],
      "metadata": {
        "id": "RakduGdM-nLT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Asignar la región a cada cliente\n",
        "df[\"customer_region\"] = df[\"customer_state\"].map(region_map)\n",
        "\n",
        "# Agrupar ventas por región del cliente y categoría de producto\n",
        "ventas_categoria_cliente = df.groupby([\"customer_region\", \"product_category_name\"])[\"order_item_id\"].count().reset_index()\n",
        "\n",
        "# Seleccionar las 5 categorías más compradas\n",
        "top_categorias = ventas_categoria_cliente.groupby(\"product_category_name\")[\"order_item_id\"].sum().nlargest(5).index\n",
        "ventas_filtradas = ventas_categoria_cliente[ventas_categoria_cliente[\"product_category_name\"].isin(top_categorias)]\n",
        "\n",
        "# Pivotear la tabla para graficar en formato apilado\n",
        "ventas_pivot = ventas_filtradas.pivot(index=\"customer_region\", columns=\"product_category_name\", values=\"order_item_id\")\n",
        "\n",
        "# Crear el gráfico de barras apiladas\n",
        "ventas_pivot.plot(kind=\"bar\", stacked=True, figsize=(10, 6), colormap=\"plasma\")\n",
        "\n",
        "# Personalizar el gráfico\n",
        "plt.title(\"Top 5 Categorías de Producto por Región del Cliente\")\n",
        "plt.xlabel(\"Región del Cliente\")\n",
        "plt.ylabel(\"Cantidad de Compras\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.legend(title=\"Categoría de Producto\", bbox_to_anchor=(1, 1))\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "97U1hlq5_BlW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "FdQMZ6p_ZFGA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Matriz de Ventas: Región del Vendedor vs. Región del Comprador\n"
      ],
      "metadata": {
        "id": "gZdebdOXZDit"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Asignar la región a vendedores y clientes\n",
        "df[\"seller_region\"] = df[\"seller_state\"].map(region_map)\n",
        "df[\"customer_region\"] = df[\"customer_state\"].map(region_map)\n",
        "\n",
        "# Crear una tabla cruzada (matriz) de ventas entre regiones\n",
        "matriz_envios = df.pivot_table(index=\"seller_region\", columns=\"customer_region\", values=\"order_item_id\", aggfunc=\"count\", fill_value=0)\n",
        "\n",
        "# Crear un mapa de calor para visualizar la distribución\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.heatmap(matriz_envios, annot=True, fmt=\".0f\", cmap=\"Blues\")\n",
        "\n",
        "# Personalizar el gráfico\n",
        "plt.title(\"Matriz de Ventas: Región del Vendedor vs. Región del Comprador\")\n",
        "plt.xlabel(\"Región del Cliente\")\n",
        "plt.ylabel(\"Región del Vendedor\")\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "v6hIPu2Y_Z_T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "📌 Puntos clave del análisis\n",
        "\n",
        "1️⃣ Sudeste es el epicentro del comercio en Brasil 🏆\n",
        "\n",
        "Los vendedores de Sudeste realizan la mayor cantidad de ventas dentro de su propia región (67,468 transacciones).\n",
        "Sudeste también abastece a otras regiones, con un número significativo de envíos a:\n",
        "**Nordeste (8,976)\n",
        "Centro-Oeste (5,584)\n",
        "Sur (12,548)**\n",
        "Esto indica que Sudeste no solo vende a compradores locales, sino que también abastece a todo el país.\n",
        "\n",
        "✅ Conclusión:\n",
        "\n",
        "Sudeste es el principal hub logístico y de ventas en Brasil.\n",
        "Si hay problemas en la distribución en esta región, afectaría a todo el país.\n",
        "2️⃣ Las demás regiones dependen de Sudeste para el abastecimiento 📦\n",
        "Centro-Oeste, Nordeste, Norte y Sur compran principalmente a vendedores de Sudeste.\n",
        "Las ventas dentro de cada una de estas regiones son bajas, lo que sugiere que hay pocos vendedores locales.\n",
        "\n",
        "✅ Conclusión:\n",
        "\n",
        "Oportunidad de atraer más vendedores locales en Norte, Nordeste y Centro-Oeste para reducir la dependencia de Sudeste.\n",
        "Puede ser más eficiente desarrollar centros de distribución en otras regiones para optimizar la logística.\n",
        "3️⃣ Las ventas dentro de cada región son muy desiguales 🔍\n",
        "Sudeste y Sur tienen un buen volumen de ventas internas (lo que indica que la oferta y la demanda son altas en esas regiones).\n",
        "Nordeste, Norte y Centro-Oeste tienen muy pocas ventas dentro de sí mismas (lo que sugiere que dependen de otras regiones para abastecerse).\n",
        "\n",
        "✅ Conclusión:\n",
        "\n",
        "Se puede incentivar el crecimiento de vendedores en regiones como Nordeste y Centro-Oeste.\n",
        "Estrategias como reducción de costos de envío o incentivos para vendedores locales pueden ayudar a equilibrar la distribución.\n",
        "4️⃣ Las ventas en Norte son extremadamente bajas 🚨\n",
        "Casi no hay vendedores en Norte (solo 4 transacciones de vendedores del Norte a compradores de Nordeste).\n",
        "La mayoría de las compras en Norte provienen de Sudeste y Nordeste.\n",
        "\n",
        "✅ Conclusión:\n",
        "\n",
        "Oportunidad de inversión en infraestructura de ventas en el Norte.\n",
        "Problema logístico: Si el Norte depende de otras regiones para abastecerse, los costos de envío podrían ser altos.\n",
        "\n",
        "🎯 Conclusiones y Recomendaciones\n",
        "\n",
        "📌 Sudeste es el principal centro de ventas, abasteciendo a todo Brasil.\n",
        "\n",
        "📌 Las regiones Nordeste, Norte y Centro-Oeste dependen de vendedores de Sudeste.\n",
        "\n",
        "📌 En Norte casi no hay vendedores locales, lo que puede generar altos costos de envío y tiempos de entrega largos.\n",
        "\n",
        "📌 Oportunidad de crecimiento en Nordeste y Centro-Oeste para fortalecer el comercio local y reducir la dependencia de Sudeste."
      ],
      "metadata": {
        "id": "9IZcsgql_9_m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Flujo de Ventas Entre Regiones (Diagrama de Sankey)\n"
      ],
      "metadata": {
        "id": "B549LMqiY5UD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.graph_objects as go\n",
        "\n",
        "# Contar las transacciones entre cada par de regiones\n",
        "flows = df.groupby([\"seller_region\", \"customer_region\"])[\"order_item_id\"].count().reset_index()\n",
        "\n",
        "# Convertir datos para Sankey\n",
        "sources = flows[\"seller_region\"].tolist()\n",
        "targets = flows[\"customer_region\"].tolist()\n",
        "values = flows[\"order_item_id\"].tolist()\n",
        "\n",
        "# Crear lista única de nombres de regiones\n",
        "regions = list(set(sources + targets))\n",
        "\n",
        "# Mapear nombres a índices\n",
        "region_index = {region: i for i, region in enumerate(regions)}\n",
        "\n",
        "# Convertir nombres en índices\n",
        "source_indices = [region_index[src] for src in sources]\n",
        "target_indices = [region_index[tgt] for tgt in targets]\n",
        "\n",
        "# Crear el gráfico de Sankey\n",
        "fig = go.Figure(go.Sankey(\n",
        "    node=dict(\n",
        "        pad=15, thickness=20, line=dict(color=\"black\", width=0.5),\n",
        "        label=regions, color=[\"blue\"] * len(regions)\n",
        "    ),\n",
        "    link=dict(\n",
        "        source=source_indices, target=target_indices, value=values,\n",
        "        color=\"rgba(150, 150, 250, 0.5)\"\n",
        "    )\n",
        "))\n",
        "\n",
        "# Personalizar el título\n",
        "fig.update_layout(title_text=\"Flujo de Ventas Entre Regiones (Sankey)\", font_size=12)\n",
        "\n",
        "# Mostrar el gráfico\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "pLttxIB1__LW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1️⃣ Sudeste domina como la principal región vendedora 🏆\n",
        "Sudeste es la región con mayor volumen de ventas y abastece a todo Brasil.\n",
        "La mayoría de las ventas se quedan dentro de Sudeste, pero también hay envíos significativos a Sur, Nordeste, Centro-Oeste y Norte.\n",
        "\n",
        "✅ Conclusión:\n",
        "\n",
        "Sudeste es el centro logístico del país, abasteciendo tanto a compradores locales como a otras regiones.\n",
        "Si hay problemas de distribución en Sudeste, pueden afectar todo el comercio nacional.\n",
        "\n",
        "2️⃣ Las otras regiones dependen de Sudeste para abastecerse 📦\n",
        "Las líneas que van desde Sudeste hacia las demás regiones son más gruesas, indicando que las compras en otras regiones provienen principalmente de Sudeste.\n",
        "Sur es la segunda región más activa, con una parte importante de ventas locales y envíos a otras regiones.\n",
        "\n",
        "✅ Conclusión:\n",
        "\n",
        "Nordeste, Centro-Oeste y Norte no tienen suficiente oferta local y dependen de vendedores de Sudeste.\n",
        "Esto puede aumentar los costos de envío y tiempos de entrega en esas regiones.\n",
        "Oportunidad para atraer más vendedores locales en regiones con alta demanda.\n",
        "\n",
        "3️⃣ Centro-Oeste y Norte tienen un comercio interno muy bajo 🚨\n",
        "Centro-Oeste y Norte apenas aparecen como vendedores, lo que significa que tienen muy pocos vendedores locales.\n",
        "La mayoría de las compras en estas regiones provienen de Sudeste o Sur.\n",
        "\n",
        "✅ Conclusión:\n",
        "\n",
        "Estas regiones pueden ser mercados subdesarrollados con oportunidades para atraer más vendedores.\n",
        "Incentivar nuevos vendedores en estas regiones podría reducir costos logísticos y mejorar la distribución.\n",
        "\n",
        "🎯 Conclusiones y Recomendaciones\n",
        "\n",
        "📌 Sudeste es el centro de ventas de Brasil, abasteciendo a todo el país.\n",
        "\n",
        "📌 Las regiones Nordeste, Centro-Oeste y Norte dependen fuertemente de Sudeste para sus compras.\n",
        "\n",
        "📌 Centro-Oeste y Norte tienen muy pocos vendedores, lo que puede generar altos costos de envío y largos tiempos de entrega.\n",
        "\n",
        "📌 Oportunidad para incentivar nuevos vendedores en Nordeste y Norte y descentralizar el comercio.\n",
        "\n"
      ],
      "metadata": {
        "id": "cql4bxayBASe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Costo de Envío Promedio entre Regiones"
      ],
      "metadata": {
        "id": "4gH-cWMQiA55"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Agrupar por región del vendedor y región del cliente para obtener el costo de envío promedio\n",
        "costo_envio_region = df.groupby([\"seller_region\", \"customer_region\"])[\"freight_value\"].mean().reset_index()\n",
        "\n",
        "# Crear matriz de costos de envío\n",
        "costo_envio_matriz = costo_envio_region.pivot(index=\"seller_region\", columns=\"customer_region\", values=\"freight_value\")\n",
        "\n",
        "# Crear el mapa de calor\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.heatmap(costo_envio_matriz, annot=True, fmt=\".2f\", cmap=\"coolwarm\")\n",
        "\n",
        "# Personalizar el gráfico\n",
        "plt.title(\"Costo de Envío Promedio entre Regiones\")\n",
        "plt.xlabel(\"Región del Cliente\")\n",
        "plt.ylabel(\"Región del Vendedor\")\n",
        "\n",
        "# Mostrar el gráfico\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "zy8tD0cJdJcy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. **Las rutas más económicas corresponden a envíos dentro de la misma región en Centro-Oeste y Sur**:  \n",
        "   - **Centro-Oeste → Centro-Oeste** es la más barata (15.34).  \n",
        "   - **Sur → Sur** también destaca con un costo bajo (15.90).  \n",
        "\n",
        "2. **Existen rutas interregionales sorprendentemente baratas**:  \n",
        "   - **Sur → Sudeste** (19.15) resulta más económico que otros envíos dentro de la misma región en Norte (35.24).  \n",
        "\n",
        "3. **Costos intra-regionales variables**:  \n",
        "   - **Nordeste → Nordeste** (21.21) y **Sudeste → Sudeste** (21.40) se ubican en una franja moderada.  \n",
        "   - **Norte → Norte** (35.24) es inusualmente alto en comparación con otros envíos intra-regionales.  \n",
        "\n",
        "4. **Las rutas más costosas suelen involucrar grandes distancias o regiones menos conectadas**:  \n",
        "   - **Sur → Centro-Oeste** (46.61) y **Sur → Nordeste** (46.60) alcanzan los valores más altos.  \n",
        "   - **Sudeste → Norte** (46.18) y **Norte → Centro-Oeste** (46.41) también se sitúan por encima de 45.  \n",
        "\n",
        "5. **Norte presenta varias rutas de costo elevado**:  \n",
        "   - Además de su alto costo interno (35.24), los envíos hacia Centro-Oeste (46.41) o desde Sudeste (46.18) superan los 40, lo que sugiere mayores distancias o infraestructura menos desarrollada.\n"
      ],
      "metadata": {
        "id": "SrT1bbUkh6_E"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Recomendaciones para optimizar costos de envío basadas en la matriz de costos entre regiones:**\n",
        "\n",
        "1. **Establecer o fortalecer centros de distribución en regiones clave**  \n",
        "   - Dado que los costos más altos se observan en envíos largos (p. ej., Sur → Centro-Oeste o Sudeste → Norte), la apertura de almacenes o hubs logísticos más cercanos podría reducir el tiempo y costo de transporte.\n",
        "\n",
        "2. **Negociar tarifas con proveedores logísticos en rutas específicas**  \n",
        "   - En rutas donde el volumen de pedidos es alto pero los costos también lo son (por ejemplo, Sudeste ↔ Norte), se podrían lograr mejores acuerdos tarifarios aprovechando economías de escala.\n",
        "\n",
        "3. **Analizar la viabilidad de transportes alternativos**  \n",
        "   - Para regiones con costos muy elevados, considerar otros medios (transporte marítimo, fluvial o ferroviario, si están disponibles) puede reducir los costos y la dependencia del transporte por carretera o aéreo.\n",
        "\n",
        "4. **Segmentar y planificar la demanda según la región**  \n",
        "   - Identificar las rutas con mayor demanda y ajustar la estrategia de inventario (p. ej., mantener más stock en la región donde haya mayor concentración de clientes) para reducir la necesidad de envíos de larga distancia.\n",
        "\n",
        "5. **Optimizar la gestión de pedidos y empaques**  \n",
        "   - Consolidar pedidos para evitar envíos fragmentados y así disminuir el costo por paquete. Además, usar empaques eficientes en peso y volumen contribuye a un menor costo de flete en rutas costosas.\n",
        "\n",
        "Estas recomendaciones buscan equilibrar la logística entre regiones, aprovechando las rutas con menores costos y buscando soluciones para aquellas con tarifas más elevadas. Con una estrategia integral que combine hubs logísticos, negociación de tarifas y optimización de inventarios, es posible reducir de manera significativa el costo total de envío.  \n"
      ],
      "metadata": {
        "id": "RunBQ3gxjQOh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Correlación entre distancia y review_score:"
      ],
      "metadata": {
        "id": "CDc6m99Pl0QS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import math\n",
        "\n",
        "# --- 1. Cargar datasets ---\n",
        "\n",
        "path = '/content/drive/My Drive/proyecto final/'  # Ajusta según tu ruta\n",
        "\n",
        "df_sellers     = pd.read_csv(path + 'olist_sellers_dataset.csv')\n",
        "df_customers   = pd.read_csv(path + 'olist_customers_dataset.csv')\n",
        "df_geolocation = pd.read_csv(path + 'olist_geolocation_dataset.csv')\n",
        "df_orders      = pd.read_csv(path + 'olist_orders_dataset.csv')\n",
        "df_order_items = pd.read_csv(path + 'olist_order_items_dataset.csv')\n",
        "df_reviews     = pd.read_csv(path + 'olist_order_reviews_dataset.csv')\n",
        "\n",
        "# --- 2. Preprocesar geolocation (opcional) ---\n",
        "# En muchos casos, geolocation_zip_code_prefix se repite con coordenadas diferentes.\n",
        "# Para simplificar, tomamos la primera aparición de cada zip_code_prefix.\n",
        "df_geolocation_unique = df_geolocation.drop_duplicates(subset='geolocation_zip_code_prefix', keep='first')\n",
        "\n",
        "# Renombramos columnas para diferenciarlas (opcional)\n",
        "df_geolocation_unique.rename(columns={\n",
        "    'geolocation_zip_code_prefix': 'zip_code_prefix',\n",
        "    'geolocation_lat': 'lat',\n",
        "    'geolocation_lng': 'lng'\n",
        "}, inplace=True)\n",
        "\n",
        "# --- 3. Unir Sellers con coordenadas ---\n",
        "df_sellers_geo = pd.merge(\n",
        "    df_sellers,\n",
        "    df_geolocation_unique[['zip_code_prefix', 'lat', 'lng']],\n",
        "    left_on='seller_zip_code_prefix',\n",
        "    right_on='zip_code_prefix',\n",
        "    how='left'\n",
        ")\n",
        "\n",
        "# Renombramos las columnas de lat/lng para sellers\n",
        "df_sellers_geo.rename(columns={'lat': 'seller_lat', 'lng': 'seller_lng'}, inplace=True)\n",
        "\n",
        "# --- 4. Unir Customers con coordenadas ---\n",
        "df_customers_geo = pd.merge(\n",
        "    df_customers,\n",
        "    df_geolocation_unique[['zip_code_prefix', 'lat', 'lng']],\n",
        "    left_on='customer_zip_code_prefix',\n",
        "    right_on='zip_code_prefix',\n",
        "    how='left'\n",
        ")\n",
        "\n",
        "# Renombramos las columnas de lat/lng para customers\n",
        "df_customers_geo.rename(columns={'lat': 'customer_lat', 'lng': 'customer_lng'}, inplace=True)\n",
        "\n",
        "# --- 5. Unir todo para tener: order_id, seller_id, customer_id, coords del seller y del customer ---\n",
        "# Primero, unir order_items con orders (para obtener customer_id)\n",
        "df_merged = pd.merge(\n",
        "    df_order_items,\n",
        "    df_orders[['order_id', 'customer_id']],\n",
        "    on='order_id',\n",
        "    how='inner'\n",
        ")\n",
        "\n",
        "# Unir con df_sellers_geo (para coords del seller)\n",
        "df_merged = pd.merge(\n",
        "    df_merged,\n",
        "    df_sellers_geo[['seller_id', 'seller_lat', 'seller_lng']],\n",
        "    on='seller_id',\n",
        "    how='inner'\n",
        ")\n",
        "\n",
        "# Unir con df_customers_geo (para coords del customer)\n",
        "df_merged = pd.merge(\n",
        "    df_merged,\n",
        "    df_customers_geo[['customer_id', 'customer_lat', 'customer_lng']],\n",
        "    on='customer_id',\n",
        "    how='inner'\n",
        ")\n",
        "\n",
        "# --- 6. Calcular distancia usando Haversine ---\n",
        "\n",
        "def haversine_distance(lat1, lon1, lat2, lon2):\n",
        "    \"\"\"\n",
        "    Calcula la distancia en km entre dos puntos (lat1, lon1) y (lat2, lon2)\n",
        "    usando la fórmula de Haversine.\n",
        "    \"\"\"\n",
        "    R = 6371  # Radio de la tierra en km\n",
        "    d_lat = math.radians(lat2 - lat1)\n",
        "    d_lon = math.radians(lon2 - lon1)\n",
        "    a = (math.sin(d_lat/2)**2\n",
        "         + math.cos(math.radians(lat1))\n",
        "         * math.cos(math.radians(lat2))\n",
        "         * math.sin(d_lon/2)**2)\n",
        "    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n",
        "    return R * c\n",
        "\n",
        "# Crear columna de distancia\n",
        "df_merged['distance_km'] = df_merged.apply(lambda row: haversine_distance(\n",
        "    row['seller_lat'],\n",
        "    row['seller_lng'],\n",
        "    row['customer_lat'],\n",
        "    row['customer_lng']\n",
        "), axis=1)\n",
        "\n",
        "# --- 7. Unir con reviews para obtener review_score ---\n",
        "df_merged_reviews = pd.merge(\n",
        "    df_merged,\n",
        "    df_reviews[['order_id', 'review_score']],\n",
        "    on='order_id',\n",
        "    how='left'\n",
        ")\n",
        "\n",
        "# Ahora df_merged_reviews contiene:\n",
        "# - distance_km\n",
        "# - review_score\n",
        "# - Otros datos de la orden (precio, freight_value, etc.)\n",
        "\n",
        "# --- 8. Analizar la relación distancia - review ---\n",
        "\n",
        "# 8.1 Calcular correlación\n",
        "correlation = df_merged_reviews[['distance_km', 'review_score']].corr()\n",
        "print(\"Correlación entre distancia y review_score:\")\n",
        "print(correlation)\n",
        "\n",
        "# 8.2 Agrupar por intervalos de distancia y calcular review promedio\n",
        "# Creamos intervalos (bins) de 0-100, 100-500, 500-1000, etc.\n",
        "df_merged_reviews['distance_bin'] = pd.cut(\n",
        "    df_merged_reviews['distance_km'],\n",
        "    bins=[0, 100, 500, 1000, 2000, 999999],\n",
        "    labels=['0-100 km', '100-500 km', '500-1000 km', '1000-2000 km', '2000+ km']\n",
        ")\n",
        "\n",
        "review_by_distance = df_merged_reviews.groupby('distance_bin')['review_score'].mean().reset_index()\n",
        "print(\"\\nReview promedio por rango de distancia:\")\n",
        "print(review_by_distance)\n",
        "\n",
        "# (Opcional) Podrías graficar la relación entre distancia y review\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.boxplot(x='distance_bin', y='review_score', data=df_merged_reviews)\n",
        "plt.title(\"Distribución de review_score por rango de distancia\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "VqPYwljLjusF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. **Las distancias más cortas tienden a mostrar mejores calificaciones, pero con outliers negativos**  \n",
        "   - El rango de 0–100 km presenta la **mediana** de *review_score* más alta, rondando valores cercanos a 4.5.  \n",
        "   - Sin embargo, hay reseñas muy bajas (1 o 2) que aparecen como *outliers*, lo cual indica que no todos los envíos cortos garantizan buena satisfacción.\n",
        "\n",
        "2. **Las distancias medias (100–500 km) muestran una ligera disminución en la mediana de las reseñas**  \n",
        "   - Aunque el cambio no es drástico, se aprecia que la mediana baja un poco, lo que sugiere que, conforme aumenta la distancia, la satisfacción podría verse afectada de forma leve.\n",
        "\n",
        "3. **A partir de 500 km en adelante, las reseñas se estabilizan en valores similares**  \n",
        "   - Los boxplots para 500–1000 km, 1000–2000 km y más de 2000 km presentan medianas muy parecidas, cercanas a 4.2–4.3.  \n",
        "   - Esto sugiere que, una vez superado cierto umbral de distancia, el impacto adicional en la reseña no parece aumentar significativamente.\n",
        "\n",
        "4. **La presencia de outliers en todos los rangos indica factores adicionales**  \n",
        "   - Incluso en distancias muy largas o muy cortas, hay reseñas de 1 o 2 estrellas.  \n",
        "   - Esto evidencia que, más allá de la distancia, influyen otros elementos como la puntualidad real de la entrega, la calidad del producto o la atención al cliente.\n",
        "\n",
        "5. **En conjunto, la distancia no muestra un efecto drástico en las reseñas**  \n",
        "   - Si bien hay una ligera tendencia a mejores reseñas en distancias cortas, la variabilidad dentro de cada rango sugiere que la logística (tiempo de envío, cuidado del producto) y otros factores pueden ser determinantes para la satisfacción del cliente, más allá de los kilómetros recorridos.\n"
      ],
      "metadata": {
        "id": "US6Us2LqkT7A"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Correlación entre distancia y tiempo de entrega (días)"
      ],
      "metadata": {
        "id": "4d26DFhglwdl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import math\n",
        "import os\n",
        "\n",
        "# --- 1. Carga de datasets ---\n",
        "path = '/content/drive/My Drive/proyecto final/'  # Ajusta según tu ubicación\n",
        "df_sellers     = pd.read_csv(os.path.join(path, 'olist_sellers_dataset.csv'))\n",
        "df_customers   = pd.read_csv(os.path.join(path, 'olist_customers_dataset.csv'))\n",
        "df_geolocation = pd.read_csv(os.path.join(path, 'olist_geolocation_dataset.csv'))\n",
        "df_orders      = pd.read_csv(os.path.join(path, 'olist_orders_dataset.csv'))\n",
        "df_order_items = pd.read_csv(os.path.join(path, 'olist_order_items_dataset.csv'))\n",
        "\n",
        "# --- 2. Limpieza y unificación de geolocation (si hay duplicados) ---\n",
        "# Ejemplo: tomar la primera aparición de cada zip_code_prefix\n",
        "df_geolocation_unique = df_geolocation.drop_duplicates(subset='geolocation_zip_code_prefix', keep='first')\n",
        "\n",
        "# Renombrar columnas para facilitar merges\n",
        "df_geolocation_unique.rename(columns={\n",
        "    'geolocation_zip_code_prefix': 'zip_code_prefix',\n",
        "    'geolocation_lat': 'lat',\n",
        "    'geolocation_lng': 'lng'\n",
        "}, inplace=True)\n",
        "\n",
        "# --- 3. Unir Sellers con coordenadas ---\n",
        "df_sellers_geo = pd.merge(\n",
        "    df_sellers,\n",
        "    df_geolocation_unique[['zip_code_prefix', 'lat', 'lng']],\n",
        "    left_on='seller_zip_code_prefix',\n",
        "    right_on='zip_code_prefix',\n",
        "    how='left'\n",
        ")\n",
        "df_sellers_geo.rename(columns={'lat': 'seller_lat', 'lng': 'seller_lng'}, inplace=True)\n",
        "\n",
        "# --- 4. Unir Customers con coordenadas ---\n",
        "df_customers_geo = pd.merge(\n",
        "    df_customers,\n",
        "    df_geolocation_unique[['zip_code_prefix', 'lat', 'lng']],\n",
        "    left_on='customer_zip_code_prefix',\n",
        "    right_on='zip_code_prefix',\n",
        "    how='left'\n",
        ")\n",
        "df_customers_geo.rename(columns={'lat': 'customer_lat', 'lng': 'customer_lng'}, inplace=True)\n",
        "\n",
        "# --- 5. Combinar order_items con orders, sellers y customers ---\n",
        "# 5.1 Unir order_items con orders (para obtener fechas y customer_id)\n",
        "df_merged = pd.merge(\n",
        "    df_order_items,\n",
        "    df_orders[['order_id', 'customer_id', 'order_purchase_timestamp', 'order_delivered_customer_date']],\n",
        "    on='order_id',\n",
        "    how='inner'\n",
        ")\n",
        "\n",
        "# 5.2 Unir con df_sellers_geo (para coords del seller)\n",
        "df_merged = pd.merge(\n",
        "    df_merged,\n",
        "    df_sellers_geo[['seller_id', 'seller_lat', 'seller_lng']],\n",
        "    on='seller_id',\n",
        "    how='inner'\n",
        ")\n",
        "\n",
        "# 5.3 Unir con df_customers_geo (para coords del customer)\n",
        "df_merged = pd.merge(\n",
        "    df_merged,\n",
        "    df_customers_geo[['customer_id', 'customer_lat', 'customer_lng']],\n",
        "    on='customer_id',\n",
        "    how='inner'\n",
        ")\n",
        "\n",
        "# --- 6. Calcular el tiempo de entrega (en días) ---\n",
        "# Convertir a tipo datetime si no lo están\n",
        "df_merged['order_purchase_timestamp'] = pd.to_datetime(df_merged['order_purchase_timestamp'])\n",
        "df_merged['order_delivered_customer_date'] = pd.to_datetime(df_merged['order_delivered_customer_date'])\n",
        "\n",
        "# Crear la columna delivery_time_days\n",
        "df_merged['delivery_time_days'] = (\n",
        "    df_merged['order_delivered_customer_date'] - df_merged['order_purchase_timestamp']\n",
        ").dt.days\n",
        "\n",
        "# --- 7. Calcular la distancia (fórmula de Haversine) ---\n",
        "def haversine_distance(lat1, lon1, lat2, lon2):\n",
        "    R = 6371  # Radio de la Tierra en km\n",
        "    d_lat = math.radians(lat2 - lat1)\n",
        "    d_lon = math.radians(lon2 - lon1)\n",
        "    a = (math.sin(d_lat/2)**2\n",
        "         + math.cos(math.radians(lat1))\n",
        "         * math.cos(math.radians(lat2))\n",
        "         * math.sin(d_lon/2)**2)\n",
        "    c = 2 * math.atan2(np.sqrt(a), np.sqrt(1-a))\n",
        "    return R * c\n",
        "\n",
        "df_merged['distance_km'] = df_merged.apply(lambda row: haversine_distance(\n",
        "    row['seller_lat'], row['seller_lng'],\n",
        "    row['customer_lat'], row['customer_lng']\n",
        "), axis=1)\n",
        "\n",
        "# --- 8. Analizar la relación entre distancia y tiempo de entrega ---\n",
        "# 8.1 Calcular correlación\n",
        "corr = df_merged[['distance_km', 'delivery_time_days']].corr()\n",
        "print(\"Correlación entre distancia y tiempo de entrega (días):\")\n",
        "print(corr)\n",
        "\n",
        "# 8.2 Agrupar por rangos de distancia para ver el promedio de delivery_time_days\n",
        "df_merged['distance_bin'] = pd.cut(\n",
        "    df_merged['distance_km'],\n",
        "    bins=[0, 100, 500, 1000, 2000, 999999],\n",
        "    labels=['0-100 km', '100-500 km', '500-1000 km', '1000-2000 km', '2000+ km']\n",
        ")\n",
        "\n",
        "avg_delivery_by_distance = df_merged.groupby('distance_bin')['delivery_time_days'].mean().reset_index()\n",
        "print(\"\\nTiempo de entrega promedio (días) por rango de distancia:\")\n",
        "print(avg_delivery_by_distance)\n",
        "\n",
        "# (Opcional) Visualizar la relación con un gráfico\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.boxplot(x='distance_bin', y='delivery_time_days', data=df_merged)\n",
        "plt.title(\"Tiempo de entrega (días) por rango de distancia\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "qHmlZYGok9mi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. **Tendencia de mayor tiempo de entrega a mayor distancia**  \n",
        "   - Se aprecia un **incremento progresivo** en la mediana de los días de entrega desde el rango de 0–100 km hasta el de 2000+ km.  \n",
        "   - Aun así, la diferencia **no es drástica**, lo que sugiere que la logística podría estar relativamente optimizada, incluso para distancias largas.\n",
        "\n",
        "2. **Variabilidad alta en todos los rangos**  \n",
        "   - En cada bin se observan numerosos *outliers* que pueden alcanzar más de 50 días de entrega.  \n",
        "   - Esto indica que hay factores adicionales (como retrasos puntuales, disponibilidad de transportistas, o época del año) que influyen en los envíos, más allá de la distancia.\n",
        "\n",
        "3. **Rango corto (0–100 km) con algunos pedidos muy tardíos**  \n",
        "   - A pesar de que el grueso de las entregas en distancias cortas se realiza en menos tiempo, existen casos que superan ampliamente la mediana.  \n",
        "   - Esto sugiere que no todos los retrasos están asociados a la distancia; puede haber incidencias específicas (problemas logísticos, stock, etc.).\n",
        "\n",
        "4. **Medianas relativamente cercanas entre rangos medios**  \n",
        "   - Los rangos 100–500 km, 500–1000 km y 1000–2000 km muestran medianas de entrega **similares**, en torno a una franja de pocos días de diferencia.  \n",
        "   - Indica que, a partir de cierta distancia, otros factores (por ejemplo, rutas aéreas o centros de distribución) podrían compensar el incremento de kilómetros.\n",
        "\n",
        "5. **Rango 2000+ km con la mediana más alta, pero sin excesos extremos**  \n",
        "   - Aunque el rango más lejano exhibe la mediana de entrega más elevada, se superpone bastante con los rangos anteriores en cuanto a la distribución de datos.  \n",
        "   - Esto sugiere que, si bien la distancia influye, la red de logística del marketplace tiene mecanismos para no disparar el tiempo de entrega en pedidos muy lejanos.\n"
      ],
      "metadata": {
        "id": "pxyITIEmlfRi"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "KERNEL_CON_PANDAS",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.8"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
